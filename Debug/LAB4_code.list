
LAB4_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080038c0  080038c0  000138c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038e4  080038e4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080038e4  080038e4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080038e4  080038e4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080038e4  080038e4  000138e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080038e8  080038e8  000138e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080038ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000080  0800396c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800396c  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f9  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b57  00000000  00000000  000298a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002be78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c46  00000000  00000000  0002c7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bda6  00000000  00000000  0004343e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082814  00000000  00000000  0004f1e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d19f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  000d1a4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	080038a8 	.word	0x080038a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	080038a8 	.word	0x080038a8

0800014c <display7SEGFinal>:

int EN_horizontal = 0;
int EN_vertical = 0;

void display7SEGFinal()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	display7SEGFinalhorizontal();
 8000150:	f000 fc80 	bl	8000a54 <display7SEGFinalhorizontal>

	display7SEGFinalvertical();
 8000154:	f000 fbf2 	bl	800093c <display7SEGFinalvertical>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <display7SEGvertical>:

void display7SEGvertical(int num)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b09      	cmp	r3, #9
 8000168:	f200 81b2 	bhi.w	80004d0 <display7SEGvertical+0x374>
 800016c:	a201      	add	r2, pc, #4	; (adr r2, 8000174 <display7SEGvertical+0x18>)
 800016e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000172:	bf00      	nop
 8000174:	0800019d 	.word	0x0800019d
 8000178:	080001ef 	.word	0x080001ef
 800017c:	08000241 	.word	0x08000241
 8000180:	08000293 	.word	0x08000293
 8000184:	080002e5 	.word	0x080002e5
 8000188:	08000337 	.word	0x08000337
 800018c:	08000389 	.word	0x08000389
 8000190:	080003db 	.word	0x080003db
 8000194:	0800042d 	.word	0x0800042d
 8000198:	0800047f 	.word	0x0800047f
	switch(num)
	{
	    case 0:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2140      	movs	r1, #64	; 0x40
 80001a0:	48cd      	ldr	r0, [pc, #820]	; (80004d8 <display7SEGvertical+0x37c>)
 80001a2:	f002 fb6c 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2180      	movs	r1, #128	; 0x80
 80001aa:	48cb      	ldr	r0, [pc, #812]	; (80004d8 <display7SEGvertical+0x37c>)
 80001ac:	f002 fb67 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b6:	48c8      	ldr	r0, [pc, #800]	; (80004d8 <display7SEGvertical+0x37c>)
 80001b8:	f002 fb61 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c2:	48c5      	ldr	r0, [pc, #788]	; (80004d8 <display7SEGvertical+0x37c>)
 80001c4:	f002 fb5b 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ce:	48c2      	ldr	r0, [pc, #776]	; (80004d8 <display7SEGvertical+0x37c>)
 80001d0:	f002 fb55 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001da:	48bf      	ldr	r0, [pc, #764]	; (80004d8 <display7SEGvertical+0x37c>)
 80001dc:	f002 fb4f 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e6:	48bc      	ldr	r0, [pc, #752]	; (80004d8 <display7SEGvertical+0x37c>)
 80001e8:	f002 fb49 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 80001ec:	e170      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 1:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2140      	movs	r1, #64	; 0x40
 80001f2:	48b9      	ldr	r0, [pc, #740]	; (80004d8 <display7SEGvertical+0x37c>)
 80001f4:	f002 fb43 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2180      	movs	r1, #128	; 0x80
 80001fc:	48b6      	ldr	r0, [pc, #728]	; (80004d8 <display7SEGvertical+0x37c>)
 80001fe:	f002 fb3e 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000208:	48b3      	ldr	r0, [pc, #716]	; (80004d8 <display7SEGvertical+0x37c>)
 800020a:	f002 fb38 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000214:	48b0      	ldr	r0, [pc, #704]	; (80004d8 <display7SEGvertical+0x37c>)
 8000216:	f002 fb32 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	48ad      	ldr	r0, [pc, #692]	; (80004d8 <display7SEGvertical+0x37c>)
 8000222:	f002 fb2c 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800022c:	48aa      	ldr	r0, [pc, #680]	; (80004d8 <display7SEGvertical+0x37c>)
 800022e:	f002 fb26 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000238:	48a7      	ldr	r0, [pc, #668]	; (80004d8 <display7SEGvertical+0x37c>)
 800023a:	f002 fb20 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 800023e:	e147      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 2:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	48a4      	ldr	r0, [pc, #656]	; (80004d8 <display7SEGvertical+0x37c>)
 8000246:	f002 fb1a 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	48a2      	ldr	r0, [pc, #648]	; (80004d8 <display7SEGvertical+0x37c>)
 8000250:	f002 fb15 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025a:	489f      	ldr	r0, [pc, #636]	; (80004d8 <display7SEGvertical+0x37c>)
 800025c:	f002 fb0f 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000266:	489c      	ldr	r0, [pc, #624]	; (80004d8 <display7SEGvertical+0x37c>)
 8000268:	f002 fb09 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000272:	4899      	ldr	r0, [pc, #612]	; (80004d8 <display7SEGvertical+0x37c>)
 8000274:	f002 fb03 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800027e:	4896      	ldr	r0, [pc, #600]	; (80004d8 <display7SEGvertical+0x37c>)
 8000280:	f002 fafd 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800028a:	4893      	ldr	r0, [pc, #588]	; (80004d8 <display7SEGvertical+0x37c>)
 800028c:	f002 faf7 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 8000290:	e11e      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 3:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	2140      	movs	r1, #64	; 0x40
 8000296:	4890      	ldr	r0, [pc, #576]	; (80004d8 <display7SEGvertical+0x37c>)
 8000298:	f002 faf1 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	488d      	ldr	r0, [pc, #564]	; (80004d8 <display7SEGvertical+0x37c>)
 80002a2:	f002 faec 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ac:	488a      	ldr	r0, [pc, #552]	; (80004d8 <display7SEGvertical+0x37c>)
 80002ae:	f002 fae6 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b8:	4887      	ldr	r0, [pc, #540]	; (80004d8 <display7SEGvertical+0x37c>)
 80002ba:	f002 fae0 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c4:	4884      	ldr	r0, [pc, #528]	; (80004d8 <display7SEGvertical+0x37c>)
 80002c6:	f002 fada 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002d0:	4881      	ldr	r0, [pc, #516]	; (80004d8 <display7SEGvertical+0x37c>)
 80002d2:	f002 fad4 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002dc:	487e      	ldr	r0, [pc, #504]	; (80004d8 <display7SEGvertical+0x37c>)
 80002de:	f002 face 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 80002e2:	e0f5      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 4:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2140      	movs	r1, #64	; 0x40
 80002e8:	487b      	ldr	r0, [pc, #492]	; (80004d8 <display7SEGvertical+0x37c>)
 80002ea:	f002 fac8 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	4879      	ldr	r0, [pc, #484]	; (80004d8 <display7SEGvertical+0x37c>)
 80002f4:	f002 fac3 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fe:	4876      	ldr	r0, [pc, #472]	; (80004d8 <display7SEGvertical+0x37c>)
 8000300:	f002 fabd 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030a:	4873      	ldr	r0, [pc, #460]	; (80004d8 <display7SEGvertical+0x37c>)
 800030c:	f002 fab7 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000316:	4870      	ldr	r0, [pc, #448]	; (80004d8 <display7SEGvertical+0x37c>)
 8000318:	f002 fab1 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000322:	486d      	ldr	r0, [pc, #436]	; (80004d8 <display7SEGvertical+0x37c>)
 8000324:	f002 faab 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	486a      	ldr	r0, [pc, #424]	; (80004d8 <display7SEGvertical+0x37c>)
 8000330:	f002 faa5 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 8000334:	e0cc      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 5:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2140      	movs	r1, #64	; 0x40
 800033a:	4867      	ldr	r0, [pc, #412]	; (80004d8 <display7SEGvertical+0x37c>)
 800033c:	f002 fa9f 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	4864      	ldr	r0, [pc, #400]	; (80004d8 <display7SEGvertical+0x37c>)
 8000346:	f002 fa9a 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000350:	4861      	ldr	r0, [pc, #388]	; (80004d8 <display7SEGvertical+0x37c>)
 8000352:	f002 fa94 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800035c:	485e      	ldr	r0, [pc, #376]	; (80004d8 <display7SEGvertical+0x37c>)
 800035e:	f002 fa8e 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000368:	485b      	ldr	r0, [pc, #364]	; (80004d8 <display7SEGvertical+0x37c>)
 800036a:	f002 fa88 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000374:	4858      	ldr	r0, [pc, #352]	; (80004d8 <display7SEGvertical+0x37c>)
 8000376:	f002 fa82 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000380:	4855      	ldr	r0, [pc, #340]	; (80004d8 <display7SEGvertical+0x37c>)
 8000382:	f002 fa7c 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 8000386:	e0a3      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 6:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2140      	movs	r1, #64	; 0x40
 800038c:	4852      	ldr	r0, [pc, #328]	; (80004d8 <display7SEGvertical+0x37c>)
 800038e:	f002 fa76 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	4850      	ldr	r0, [pc, #320]	; (80004d8 <display7SEGvertical+0x37c>)
 8000398:	f002 fa71 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a2:	484d      	ldr	r0, [pc, #308]	; (80004d8 <display7SEGvertical+0x37c>)
 80003a4:	f002 fa6b 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ae:	484a      	ldr	r0, [pc, #296]	; (80004d8 <display7SEGvertical+0x37c>)
 80003b0:	f002 fa65 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ba:	4847      	ldr	r0, [pc, #284]	; (80004d8 <display7SEGvertical+0x37c>)
 80003bc:	f002 fa5f 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c6:	4844      	ldr	r0, [pc, #272]	; (80004d8 <display7SEGvertical+0x37c>)
 80003c8:	f002 fa59 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d2:	4841      	ldr	r0, [pc, #260]	; (80004d8 <display7SEGvertical+0x37c>)
 80003d4:	f002 fa53 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 80003d8:	e07a      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 7:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2140      	movs	r1, #64	; 0x40
 80003de:	483e      	ldr	r0, [pc, #248]	; (80004d8 <display7SEGvertical+0x37c>)
 80003e0:	f002 fa4d 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	483b      	ldr	r0, [pc, #236]	; (80004d8 <display7SEGvertical+0x37c>)
 80003ea:	f002 fa48 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	4838      	ldr	r0, [pc, #224]	; (80004d8 <display7SEGvertical+0x37c>)
 80003f6:	f002 fa42 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000400:	4835      	ldr	r0, [pc, #212]	; (80004d8 <display7SEGvertical+0x37c>)
 8000402:	f002 fa3c 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800040c:	4832      	ldr	r0, [pc, #200]	; (80004d8 <display7SEGvertical+0x37c>)
 800040e:	f002 fa36 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000418:	482f      	ldr	r0, [pc, #188]	; (80004d8 <display7SEGvertical+0x37c>)
 800041a:	f002 fa30 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	482c      	ldr	r0, [pc, #176]	; (80004d8 <display7SEGvertical+0x37c>)
 8000426:	f002 fa2a 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 800042a:	e051      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 8:
	    {
	    	HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2140      	movs	r1, #64	; 0x40
 8000430:	4829      	ldr	r0, [pc, #164]	; (80004d8 <display7SEGvertical+0x37c>)
 8000432:	f002 fa24 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	4827      	ldr	r0, [pc, #156]	; (80004d8 <display7SEGvertical+0x37c>)
 800043c:	f002 fa1f 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000446:	4824      	ldr	r0, [pc, #144]	; (80004d8 <display7SEGvertical+0x37c>)
 8000448:	f002 fa19 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000452:	4821      	ldr	r0, [pc, #132]	; (80004d8 <display7SEGvertical+0x37c>)
 8000454:	f002 fa13 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045e:	481e      	ldr	r0, [pc, #120]	; (80004d8 <display7SEGvertical+0x37c>)
 8000460:	f002 fa0d 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046a:	481b      	ldr	r0, [pc, #108]	; (80004d8 <display7SEGvertical+0x37c>)
 800046c:	f002 fa07 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000476:	4818      	ldr	r0, [pc, #96]	; (80004d8 <display7SEGvertical+0x37c>)
 8000478:	f002 fa01 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 800047c:	e028      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 9:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2140      	movs	r1, #64	; 0x40
 8000482:	4815      	ldr	r0, [pc, #84]	; (80004d8 <display7SEGvertical+0x37c>)
 8000484:	f002 f9fb 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	4812      	ldr	r0, [pc, #72]	; (80004d8 <display7SEGvertical+0x37c>)
 800048e:	f002 f9f6 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000498:	480f      	ldr	r0, [pc, #60]	; (80004d8 <display7SEGvertical+0x37c>)
 800049a:	f002 f9f0 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <display7SEGvertical+0x37c>)
 80004a6:	f002 f9ea 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <display7SEGvertical+0x37c>)
 80004b2:	f002 f9e4 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	4806      	ldr	r0, [pc, #24]	; (80004d8 <display7SEGvertical+0x37c>)
 80004be:	f002 f9de 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <display7SEGvertical+0x37c>)
 80004ca:	f002 f9d8 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 80004ce:	bf00      	nop
	    }
	}

}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40010c00 	.word	0x40010c00

080004dc <display7SEGhorizontal>:

void display7SEGhorizontal(int num)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b09      	cmp	r3, #9
 80004e8:	f200 81b2 	bhi.w	8000850 <display7SEGhorizontal+0x374>
 80004ec:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <display7SEGhorizontal+0x18>)
 80004ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f2:	bf00      	nop
 80004f4:	0800051d 	.word	0x0800051d
 80004f8:	0800056f 	.word	0x0800056f
 80004fc:	080005c1 	.word	0x080005c1
 8000500:	08000613 	.word	0x08000613
 8000504:	08000665 	.word	0x08000665
 8000508:	080006b7 	.word	0x080006b7
 800050c:	08000709 	.word	0x08000709
 8000510:	0800075b 	.word	0x0800075b
 8000514:	080007ad 	.word	0x080007ad
 8000518:	080007ff 	.word	0x080007ff
	switch(num)
	{
	    case 0:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	48cd      	ldr	r0, [pc, #820]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000522:	f002 f9ac 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	48cb      	ldr	r0, [pc, #812]	; (8000858 <display7SEGhorizontal+0x37c>)
 800052c:	f002 f9a7 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000536:	48c8      	ldr	r0, [pc, #800]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000538:	f002 f9a1 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000542:	48c5      	ldr	r0, [pc, #788]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000544:	f002 f99b 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054e:	48c2      	ldr	r0, [pc, #776]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000550:	f002 f995 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800055a:	48bf      	ldr	r0, [pc, #764]	; (8000858 <display7SEGhorizontal+0x37c>)
 800055c:	f002 f98f 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000566:	48bc      	ldr	r0, [pc, #752]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000568:	f002 f989 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 800056c:	e170      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 1:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	48b9      	ldr	r0, [pc, #740]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000574:	f002 f983 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	48b6      	ldr	r0, [pc, #728]	; (8000858 <display7SEGhorizontal+0x37c>)
 800057e:	f002 f97e 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	48b3      	ldr	r0, [pc, #716]	; (8000858 <display7SEGhorizontal+0x37c>)
 800058a:	f002 f978 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	48b0      	ldr	r0, [pc, #704]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000596:	f002 f972 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a0:	48ad      	ldr	r0, [pc, #692]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005a2:	f002 f96c 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ac:	48aa      	ldr	r0, [pc, #680]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005ae:	f002 f966 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b8:	48a7      	ldr	r0, [pc, #668]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005ba:	f002 f960 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 80005be:	e147      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 2:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	48a4      	ldr	r0, [pc, #656]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005c6:	f002 f95a 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	48a2      	ldr	r0, [pc, #648]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005d0:	f002 f955 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	489f      	ldr	r0, [pc, #636]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005dc:	f002 f94f 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e6:	489c      	ldr	r0, [pc, #624]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005e8:	f002 f949 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f2:	4899      	ldr	r0, [pc, #612]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005f4:	f002 f943 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fe:	4896      	ldr	r0, [pc, #600]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000600:	f002 f93d 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060a:	4893      	ldr	r0, [pc, #588]	; (8000858 <display7SEGhorizontal+0x37c>)
 800060c:	f002 f937 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 8000610:	e11e      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 3:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4890      	ldr	r0, [pc, #576]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000618:	f002 f931 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	488d      	ldr	r0, [pc, #564]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000622:	f002 f92c 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	488a      	ldr	r0, [pc, #552]	; (8000858 <display7SEGhorizontal+0x37c>)
 800062e:	f002 f926 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4887      	ldr	r0, [pc, #540]	; (8000858 <display7SEGhorizontal+0x37c>)
 800063a:	f002 f920 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000644:	4884      	ldr	r0, [pc, #528]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000646:	f002 f91a 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000650:	4881      	ldr	r0, [pc, #516]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000652:	f002 f914 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065c:	487e      	ldr	r0, [pc, #504]	; (8000858 <display7SEGhorizontal+0x37c>)
 800065e:	f002 f90e 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 8000662:	e0f5      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 4:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	487b      	ldr	r0, [pc, #492]	; (8000858 <display7SEGhorizontal+0x37c>)
 800066a:	f002 f908 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	4879      	ldr	r0, [pc, #484]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000674:	f002 f903 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4876      	ldr	r0, [pc, #472]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000680:	f002 f8fd 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800068a:	4873      	ldr	r0, [pc, #460]	; (8000858 <display7SEGhorizontal+0x37c>)
 800068c:	f002 f8f7 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000696:	4870      	ldr	r0, [pc, #448]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000698:	f002 f8f1 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a2:	486d      	ldr	r0, [pc, #436]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006a4:	f002 f8eb 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ae:	486a      	ldr	r0, [pc, #424]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006b0:	f002 f8e5 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 80006b4:	e0cc      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 5:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	4867      	ldr	r0, [pc, #412]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006bc:	f002 f8df 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	4864      	ldr	r0, [pc, #400]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006c6:	f002 f8da 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	4861      	ldr	r0, [pc, #388]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006d2:	f002 f8d4 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006dc:	485e      	ldr	r0, [pc, #376]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006de:	f002 f8ce 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e8:	485b      	ldr	r0, [pc, #364]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006ea:	f002 f8c8 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f4:	4858      	ldr	r0, [pc, #352]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006f6:	f002 f8c2 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000700:	4855      	ldr	r0, [pc, #340]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000702:	f002 f8bc 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 8000706:	e0a3      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 6:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4852      	ldr	r0, [pc, #328]	; (8000858 <display7SEGhorizontal+0x37c>)
 800070e:	f002 f8b6 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	4850      	ldr	r0, [pc, #320]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000718:	f002 f8b1 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	484d      	ldr	r0, [pc, #308]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000724:	f002 f8ab 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	484a      	ldr	r0, [pc, #296]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000730:	f002 f8a5 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4847      	ldr	r0, [pc, #284]	; (8000858 <display7SEGhorizontal+0x37c>)
 800073c:	f002 f89f 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	4844      	ldr	r0, [pc, #272]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000748:	f002 f899 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000752:	4841      	ldr	r0, [pc, #260]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000754:	f002 f893 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 8000758:	e07a      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 7:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2140      	movs	r1, #64	; 0x40
 800075e:	483e      	ldr	r0, [pc, #248]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000760:	f002 f88d 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	483b      	ldr	r0, [pc, #236]	; (8000858 <display7SEGhorizontal+0x37c>)
 800076a:	f002 f888 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4838      	ldr	r0, [pc, #224]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000776:	f002 f882 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000780:	4835      	ldr	r0, [pc, #212]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000782:	f002 f87c 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	4832      	ldr	r0, [pc, #200]	; (8000858 <display7SEGhorizontal+0x37c>)
 800078e:	f002 f876 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000798:	482f      	ldr	r0, [pc, #188]	; (8000858 <display7SEGhorizontal+0x37c>)
 800079a:	f002 f870 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	482c      	ldr	r0, [pc, #176]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007a6:	f002 f86a 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 80007aa:	e051      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 8:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	4829      	ldr	r0, [pc, #164]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007b2:	f002 f864 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	4827      	ldr	r0, [pc, #156]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007bc:	f002 f85f 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4824      	ldr	r0, [pc, #144]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007c8:	f002 f859 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d2:	4821      	ldr	r0, [pc, #132]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007d4:	f002 f853 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007de:	481e      	ldr	r0, [pc, #120]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007e0:	f002 f84d 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ea:	481b      	ldr	r0, [pc, #108]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007ec:	f002 f847 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f6:	4818      	ldr	r0, [pc, #96]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007f8:	f002 f841 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 80007fc:	e028      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 9:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4815      	ldr	r0, [pc, #84]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000804:	f002 f83b 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	4812      	ldr	r0, [pc, #72]	; (8000858 <display7SEGhorizontal+0x37c>)
 800080e:	f002 f836 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000818:	480f      	ldr	r0, [pc, #60]	; (8000858 <display7SEGhorizontal+0x37c>)
 800081a:	f002 f830 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000826:	f002 f82a 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000832:	f002 f824 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	4806      	ldr	r0, [pc, #24]	; (8000858 <display7SEGhorizontal+0x37c>)
 800083e:	f002 f81e 	bl	800287e <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <display7SEGhorizontal+0x37c>)
 800084a:	f002 f818 	bl	800287e <HAL_GPIO_WritePin>
	        break;
 800084e:	bf00      	nop
	    }
	}
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40010800 	.word	0x40010800

0800085c <display7SEGBuffervertical>:

void display7SEGBuffervertical(int num)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	switch(num)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <display7SEGBuffervertical+0x16>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d012      	beq.n	8000896 <display7SEGBuffervertical+0x3a>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
        display7SEGvertical(buffer_7SEG_vertical[num]);
		break;
	}
	}
}
 8000870:	e023      	b.n	80008ba <display7SEGBuffervertical+0x5e>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2110      	movs	r1, #16
 8000876:	4813      	ldr	r0, [pc, #76]	; (80008c4 <display7SEGBuffervertical+0x68>)
 8000878:	f002 f801 	bl	800287e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2120      	movs	r1, #32
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <display7SEGBuffervertical+0x68>)
 8000882:	f001 fffc 	bl	800287e <HAL_GPIO_WritePin>
        display7SEGvertical(buffer_7SEG_vertical[num]);
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <display7SEGBuffervertical+0x6c>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fc64 	bl	800015c <display7SEGvertical>
		break;
 8000894:	e011      	b.n	80008ba <display7SEGBuffervertical+0x5e>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2110      	movs	r1, #16
 800089a:	480a      	ldr	r0, [pc, #40]	; (80008c4 <display7SEGBuffervertical+0x68>)
 800089c:	f001 ffef 	bl	800287e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <display7SEGBuffervertical+0x68>)
 80008a6:	f001 ffea 	bl	800287e <HAL_GPIO_WritePin>
        display7SEGvertical(buffer_7SEG_vertical[num]);
 80008aa:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <display7SEGBuffervertical+0x6c>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fc52 	bl	800015c <display7SEGvertical>
		break;
 80008b8:	bf00      	nop
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40010c00 	.word	0x40010c00
 80008c8:	2000009c 	.word	0x2000009c

080008cc <display7SEGBufferhorizontal>:

void display7SEGBufferhorizontal(int num)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	switch(num)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <display7SEGBufferhorizontal+0x16>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d012      	beq.n	8000906 <display7SEGBufferhorizontal+0x3a>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
		break;
	}
	}
}
 80008e0:	e023      	b.n	800092a <display7SEGBufferhorizontal+0x5e>
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2102      	movs	r1, #2
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 80008e8:	f001 ffc9 	bl	800287e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2104      	movs	r1, #4
 80008f0:	4810      	ldr	r0, [pc, #64]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 80008f2:	f001 ffc4 	bl	800287e <HAL_GPIO_WritePin>
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <display7SEGBufferhorizontal+0x6c>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fdec 	bl	80004dc <display7SEGhorizontal>
		break;
 8000904:	e011      	b.n	800092a <display7SEGBufferhorizontal+0x5e>
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2102      	movs	r1, #2
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 800090c:	f001 ffb7 	bl	800287e <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2104      	movs	r1, #4
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 8000916:	f001 ffb2 	bl	800287e <HAL_GPIO_WritePin>
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
 800091a:	4a07      	ldr	r2, [pc, #28]	; (8000938 <display7SEGBufferhorizontal+0x6c>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fdda 	bl	80004dc <display7SEGhorizontal>
		break;
 8000928:	bf00      	nop
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010c00 	.word	0x40010c00
 8000938:	200000a4 	.word	0x200000a4

0800093c <display7SEGFinalvertical>:

void display7SEGFinalvertical()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	switch(status_vertical)
 8000940:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <display7SEGFinalvertical+0x100>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b03      	cmp	r3, #3
 8000946:	d046      	beq.n	80009d6 <display7SEGFinalvertical+0x9a>
 8000948:	2b03      	cmp	r3, #3
 800094a:	dc64      	bgt.n	8000a16 <display7SEGFinalvertical+0xda>
 800094c:	2b01      	cmp	r3, #1
 800094e:	d002      	beq.n	8000956 <display7SEGFinalvertical+0x1a>
 8000950:	2b02      	cmp	r3, #2
 8000952:	d020      	beq.n	8000996 <display7SEGFinalvertical+0x5a>
 8000954:	e05f      	b.n	8000a16 <display7SEGFinalvertical+0xda>
	{
	case AUTO_RED:
	{
		buffer_7SEG_vertical[0] = (red_yellow_green_auto_time_vertical[0] - vertical_counter) / 10;
 8000956:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <display7SEGFinalvertical+0x104>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <display7SEGFinalvertical+0x108>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	4a39      	ldr	r2, [pc, #228]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 8000962:	fb82 1203 	smull	r1, r2, r2, r3
 8000966:	1092      	asrs	r2, r2, #2
 8000968:	17db      	asrs	r3, r3, #31
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	4a37      	ldr	r2, [pc, #220]	; (8000a4c <display7SEGFinalvertical+0x110>)
 800096e:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = (red_yellow_green_auto_time_vertical[0] - vertical_counter) % 10;
 8000970:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <display7SEGFinalvertical+0x104>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <display7SEGFinalvertical+0x108>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	1ad1      	subs	r1, r2, r3
 800097a:	4b33      	ldr	r3, [pc, #204]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 800097c:	fb83 2301 	smull	r2, r3, r3, r1
 8000980:	109a      	asrs	r2, r3, #2
 8000982:	17cb      	asrs	r3, r1, #31
 8000984:	1ad2      	subs	r2, r2, r3
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	1aca      	subs	r2, r1, r3
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <display7SEGFinalvertical+0x110>)
 8000992:	605a      	str	r2, [r3, #4]
		break;
 8000994:	e03f      	b.n	8000a16 <display7SEGFinalvertical+0xda>
	}
	case AUTO_YELLOW:
	{
		buffer_7SEG_vertical[0] = (red_yellow_green_auto_time_vertical[1] - vertical_counter) / 10;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <display7SEGFinalvertical+0x104>)
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <display7SEGFinalvertical+0x108>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 80009a2:	fb82 1203 	smull	r1, r2, r2, r3
 80009a6:	1092      	asrs	r2, r2, #2
 80009a8:	17db      	asrs	r3, r3, #31
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <display7SEGFinalvertical+0x110>)
 80009ae:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = (red_yellow_green_auto_time_vertical[1] - vertical_counter) % 10;
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <display7SEGFinalvertical+0x104>)
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <display7SEGFinalvertical+0x108>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	1ad1      	subs	r1, r2, r3
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 80009bc:	fb83 2301 	smull	r2, r3, r3, r1
 80009c0:	109a      	asrs	r2, r3, #2
 80009c2:	17cb      	asrs	r3, r1, #31
 80009c4:	1ad2      	subs	r2, r2, r3
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	1aca      	subs	r2, r1, r3
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <display7SEGFinalvertical+0x110>)
 80009d2:	605a      	str	r2, [r3, #4]
		break;
 80009d4:	e01f      	b.n	8000a16 <display7SEGFinalvertical+0xda>
	}
	case AUTO_GREEN:
	{
		buffer_7SEG_vertical[0] = (red_yellow_green_auto_time_vertical[2] - vertical_counter) / 10;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <display7SEGFinalvertical+0x104>)
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <display7SEGFinalvertical+0x108>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 80009e2:	fb82 1203 	smull	r1, r2, r2, r3
 80009e6:	1092      	asrs	r2, r2, #2
 80009e8:	17db      	asrs	r3, r3, #31
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <display7SEGFinalvertical+0x110>)
 80009ee:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = (red_yellow_green_auto_time_vertical[2] - vertical_counter) % 10;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <display7SEGFinalvertical+0x104>)
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <display7SEGFinalvertical+0x108>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1ad1      	subs	r1, r2, r3
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 80009fc:	fb83 2301 	smull	r2, r3, r3, r1
 8000a00:	109a      	asrs	r2, r3, #2
 8000a02:	17cb      	asrs	r3, r1, #31
 8000a04:	1ad2      	subs	r2, r2, r3
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	1aca      	subs	r2, r1, r3
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <display7SEGFinalvertical+0x110>)
 8000a12:	605a      	str	r2, [r3, #4]
		break;
 8000a14:	bf00      	nop
	}
	}

	if(EN_vertical > 1)
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <display7SEGFinalvertical+0x114>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	dd02      	ble.n	8000a24 <display7SEGFinalvertical+0xe8>
	{
		EN_vertical = 0;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <display7SEGFinalvertical+0x114>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
	}

	display7SEGBuffervertical(EN_vertical);
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <display7SEGFinalvertical+0x114>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff17 	bl	800085c <display7SEGBuffervertical>

	EN_vertical++;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <display7SEGFinalvertical+0x114>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <display7SEGFinalvertical+0x114>)
 8000a36:	6013      	str	r3, [r2, #0]

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000006c 	.word	0x2000006c
 8000a40:	20000050 	.word	0x20000050
 8000a44:	200000c8 	.word	0x200000c8
 8000a48:	66666667 	.word	0x66666667
 8000a4c:	2000009c 	.word	0x2000009c
 8000a50:	200000b0 	.word	0x200000b0

08000a54 <display7SEGFinalhorizontal>:

void display7SEGFinalhorizontal()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 8000a58:	4b75      	ldr	r3, [pc, #468]	; (8000c30 <display7SEGFinalhorizontal+0x1dc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	f200 80d2 	bhi.w	8000c08 <display7SEGFinalhorizontal+0x1b4>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <display7SEGFinalhorizontal+0x18>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a89 	.word	0x08000a89
 8000a70:	08000ac9 	.word	0x08000ac9
 8000a74:	08000b09 	.word	0x08000b09
 8000a78:	08000c09 	.word	0x08000c09
 8000a7c:	08000b49 	.word	0x08000b49
 8000a80:	08000b89 	.word	0x08000b89
 8000a84:	08000bc9 	.word	0x08000bc9
	{
	case AUTO_RED:
	{
		buffer_7SEG_horizontal[0] = (red_yellow_green_auto_time_horizontal[0] - horizontal_counter) / 10;
 8000a88:	4b6a      	ldr	r3, [pc, #424]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b6a      	ldr	r3, [pc, #424]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	4a6a      	ldr	r2, [pc, #424]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000a94:	fb82 1203 	smull	r1, r2, r2, r3
 8000a98:	1092      	asrs	r2, r2, #2
 8000a9a:	17db      	asrs	r3, r3, #31
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	4a68      	ldr	r2, [pc, #416]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000aa0:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = (red_yellow_green_auto_time_horizontal[0] - horizontal_counter) % 10;
 8000aa2:	4b64      	ldr	r3, [pc, #400]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4b64      	ldr	r3, [pc, #400]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	1ad1      	subs	r1, r2, r3
 8000aac:	4b63      	ldr	r3, [pc, #396]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000aae:	fb83 2301 	smull	r2, r3, r3, r1
 8000ab2:	109a      	asrs	r2, r3, #2
 8000ab4:	17cb      	asrs	r3, r1, #31
 8000ab6:	1ad2      	subs	r2, r2, r3
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1aca      	subs	r2, r1, r3
 8000ac2:	4b5f      	ldr	r3, [pc, #380]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000ac4:	605a      	str	r2, [r3, #4]
		break;
 8000ac6:	e09f      	b.n	8000c08 <display7SEGFinalhorizontal+0x1b4>
	}
	case AUTO_YELLOW:
	{
		buffer_7SEG_horizontal[0] = (red_yellow_green_auto_time_horizontal[1] - horizontal_counter) / 10;
 8000ac8:	4b5a      	ldr	r3, [pc, #360]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	4b5a      	ldr	r3, [pc, #360]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	4a5a      	ldr	r2, [pc, #360]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad8:	1092      	asrs	r2, r2, #2
 8000ada:	17db      	asrs	r3, r3, #31
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	4a58      	ldr	r2, [pc, #352]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000ae0:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = (red_yellow_green_auto_time_horizontal[1] - horizontal_counter) % 10;
 8000ae2:	4b54      	ldr	r3, [pc, #336]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	1ad1      	subs	r1, r2, r3
 8000aec:	4b53      	ldr	r3, [pc, #332]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000aee:	fb83 2301 	smull	r2, r3, r3, r1
 8000af2:	109a      	asrs	r2, r3, #2
 8000af4:	17cb      	asrs	r3, r1, #31
 8000af6:	1ad2      	subs	r2, r2, r3
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	1aca      	subs	r2, r1, r3
 8000b02:	4b4f      	ldr	r3, [pc, #316]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b04:	605a      	str	r2, [r3, #4]
		break;
 8000b06:	e07f      	b.n	8000c08 <display7SEGFinalhorizontal+0x1b4>
	}
	case AUTO_GREEN:
	{
		buffer_7SEG_horizontal[0] = (red_yellow_green_auto_time_horizontal[2] - horizontal_counter) / 10;
 8000b08:	4b4a      	ldr	r3, [pc, #296]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	4a4a      	ldr	r2, [pc, #296]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000b14:	fb82 1203 	smull	r1, r2, r2, r3
 8000b18:	1092      	asrs	r2, r2, #2
 8000b1a:	17db      	asrs	r3, r3, #31
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	4a48      	ldr	r2, [pc, #288]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b20:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = (red_yellow_green_auto_time_horizontal[2] - horizontal_counter) % 10;
 8000b22:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	4b44      	ldr	r3, [pc, #272]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1ad1      	subs	r1, r2, r3
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000b2e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b32:	109a      	asrs	r2, r3, #2
 8000b34:	17cb      	asrs	r3, r1, #31
 8000b36:	1ad2      	subs	r2, r2, r3
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	1aca      	subs	r2, r1, r3
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b44:	605a      	str	r2, [r3, #4]
		break;
 8000b46:	e05f      	b.n	8000c08 <display7SEGFinalhorizontal+0x1b4>
	}
	case MANUAL_RED:
	{
		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[0] / 10;
 8000b48:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a3b      	ldr	r2, [pc, #236]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b52:	1092      	asrs	r2, r2, #2
 8000b54:	17db      	asrs	r3, r3, #31
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	4a39      	ldr	r2, [pc, #228]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b5a:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[0] % 10;
 8000b5c:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000b5e:	6819      	ldr	r1, [r3, #0]
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000b62:	fb83 2301 	smull	r2, r3, r3, r1
 8000b66:	109a      	asrs	r2, r3, #2
 8000b68:	17cb      	asrs	r3, r1, #31
 8000b6a:	1ad2      	subs	r2, r2, r3
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	1aca      	subs	r2, r1, r3
 8000b76:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b78:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 2;
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	605a      	str	r2, [r3, #4]
		break;
 8000b86:	e03f      	b.n	8000c08 <display7SEGFinalhorizontal+0x1b4>
	}
	case MANUAL_YELLOW:
	{
		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[1] / 10;
 8000b88:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	4a2b      	ldr	r2, [pc, #172]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b92:	1092      	asrs	r2, r2, #2
 8000b94:	17db      	asrs	r3, r3, #31
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	4a29      	ldr	r2, [pc, #164]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b9a:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[1] % 10;
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000b9e:	6859      	ldr	r1, [r3, #4]
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000ba2:	fb83 2301 	smull	r2, r3, r3, r1
 8000ba6:	109a      	asrs	r2, r3, #2
 8000ba8:	17cb      	asrs	r3, r1, #31
 8000baa:	1ad2      	subs	r2, r2, r3
 8000bac:	4613      	mov	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	1aca      	subs	r2, r1, r3
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000bb8:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 3;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	605a      	str	r2, [r3, #4]
		break;
 8000bc6:	e01f      	b.n	8000c08 <display7SEGFinalhorizontal+0x1b4>
	}
	case MANUAL_GREEN:
	{
		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[2] / 10;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000bce:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd2:	1092      	asrs	r2, r2, #2
 8000bd4:	17db      	asrs	r3, r3, #31
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000bda:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[2] % 10;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000bde:	6899      	ldr	r1, [r3, #8]
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000be2:	fb83 2301 	smull	r2, r3, r3, r1
 8000be6:	109a      	asrs	r2, r3, #2
 8000be8:	17cb      	asrs	r3, r1, #31
 8000bea:	1ad2      	subs	r2, r2, r3
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	1aca      	subs	r2, r1, r3
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000bf8:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 4;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	605a      	str	r2, [r3, #4]
		break;
 8000c06:	bf00      	nop
	}
	}

	if(EN_horizontal > 1)
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <display7SEGFinalhorizontal+0x1f8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	dd02      	ble.n	8000c16 <display7SEGFinalhorizontal+0x1c2>
	{
		EN_horizontal = 0;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <display7SEGFinalhorizontal+0x1f8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
	}

	display7SEGBufferhorizontal(EN_horizontal);
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <display7SEGFinalhorizontal+0x1f8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fe56 	bl	80008cc <display7SEGBufferhorizontal>

	EN_horizontal++;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <display7SEGFinalhorizontal+0x1f8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <display7SEGFinalhorizontal+0x1f8>)
 8000c28:	6013      	str	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000068 	.word	0x20000068
 8000c34:	2000005c 	.word	0x2000005c
 8000c38:	200000c4 	.word	0x200000c4
 8000c3c:	66666667 	.word	0x66666667
 8000c40:	200000a4 	.word	0x200000a4
 8000c44:	200000cc 	.word	0x200000cc
 8000c48:	2000009c 	.word	0x2000009c
 8000c4c:	200000ac 	.word	0x200000ac

08000c50 <isButton1Pressed>:
int button2_flag = 0;
int button3_flag = 0;
int button4_flag = 0;

int isButton1Pressed()
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <isButton1Pressed+0x20>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d104      	bne.n	8000c66 <isButton1Pressed+0x16>
	{
		button1_flag = 0;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <isButton1Pressed+0x20>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
		return 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <isButton1Pressed+0x18>
	}

	return 0;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	200000b4 	.word	0x200000b4

08000c74 <isButton2Pressed>:

int isButton2Pressed()
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <isButton2Pressed+0x20>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d104      	bne.n	8000c8a <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <isButton2Pressed+0x20>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
		return 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <isButton2Pressed+0x18>
	}

	return 0;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	200000b8 	.word	0x200000b8

08000c98 <isButton3Pressed>:

int isButton3Pressed()
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <isButton3Pressed+0x20>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d104      	bne.n	8000cae <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <isButton3Pressed+0x20>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
		return 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <isButton3Pressed+0x18>
	}

	return 0;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	200000bc 	.word	0x200000bc

08000cbc <isButton4Pressed>:

int isButton4Pressed()
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	if(button4_flag == 1)
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <isButton4Pressed+0x20>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d104      	bne.n	8000cd2 <isButton4Pressed+0x16>
	{
		button4_flag = 0;
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <isButton4Pressed+0x20>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
		return 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <isButton4Pressed+0x18>
	}

	return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	200000c0 	.word	0x200000c0

08000ce0 <getButton1>:

void getButton1()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	int i = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000cea:	4a39      	ldr	r2, [pc, #228]	; (8000dd0 <getButton1+0xf0>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cf2:	4938      	ldr	r1, [pc, #224]	; (8000dd4 <getButton1+0xf4>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000cfa:	4a37      	ldr	r2, [pc, #220]	; (8000dd8 <getButton1+0xf8>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d02:	4933      	ldr	r1, [pc, #204]	; (8000dd0 <getButton1+0xf0>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0e:	4833      	ldr	r0, [pc, #204]	; (8000ddc <getButton1+0xfc>)
 8000d10:	f001 fd9e 	bl	8002850 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4619      	mov	r1, r3
 8000d18:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <getButton1+0xf8>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000d20:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <getButton1+0xf4>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d28:	4929      	ldr	r1, [pc, #164]	; (8000dd0 <getButton1+0xf0>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d149      	bne.n	8000dc8 <getButton1+0xe8>
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <getButton1+0xf0>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d3c:	4926      	ldr	r1, [pc, #152]	; (8000dd8 <getButton1+0xf8>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d13f      	bne.n	8000dc8 <getButton1+0xe8>
	{
		if(keyReg3[i] != keyReg2[i])
 8000d48:	4a25      	ldr	r2, [pc, #148]	; (8000de0 <getButton1+0x100>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d50:	4921      	ldr	r1, [pc, #132]	; (8000dd8 <getButton1+0xf8>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d017      	beq.n	8000d8c <getButton1+0xac>
		{
			keyReg3[i] = keyReg2[i];
 8000d5c:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <getButton1+0xf8>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d64:	491e      	ldr	r1, [pc, #120]	; (8000de0 <getButton1+0x100>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000d6c:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <getButton1+0xf8>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d127      	bne.n	8000dc8 <getButton1+0xe8>
			{
				button1_flag = 1;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <getButton1+0x104>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 300;
 8000d7e:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <getButton1+0x108>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
				}
			}
		}
	}
}
 8000d8a:	e01d      	b.n	8000dc8 <getButton1+0xe8>
			if(keyReg2[i] == PRESSED_STATE)
 8000d8c:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <getButton1+0xf8>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d117      	bne.n	8000dc8 <getButton1+0xe8>
				TimerForKeyPress[i]--;
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <getButton1+0x108>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	4911      	ldr	r1, [pc, #68]	; (8000de8 <getButton1+0x108>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <getButton1+0x108>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d108      	bne.n	8000dc8 <getButton1+0xe8>
					button1_flag = 1;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <getButton1+0x104>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 300;
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <getButton1+0x108>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000dc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000020 	.word	0x20000020
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	20000030 	.word	0x20000030
 8000de4:	200000b4 	.word	0x200000b4
 8000de8:	20000040 	.word	0x20000040

08000dec <getButton2>:

void getButton2()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
	int i = 1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000df6:	4a38      	ldr	r2, [pc, #224]	; (8000ed8 <getButton2+0xec>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dfe:	4937      	ldr	r1, [pc, #220]	; (8000edc <getButton2+0xf0>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000e06:	4a36      	ldr	r2, [pc, #216]	; (8000ee0 <getButton2+0xf4>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e0e:	4932      	ldr	r1, [pc, #200]	; (8000ed8 <getButton2+0xec>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 8000e16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1a:	4832      	ldr	r0, [pc, #200]	; (8000ee4 <getButton2+0xf8>)
 8000e1c:	f001 fd18 	bl	8002850 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4619      	mov	r1, r3
 8000e24:	4a2e      	ldr	r2, [pc, #184]	; (8000ee0 <getButton2+0xf4>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000e2c:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <getButton2+0xf0>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e34:	4928      	ldr	r1, [pc, #160]	; (8000ed8 <getButton2+0xec>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d147      	bne.n	8000ed0 <getButton2+0xe4>
 8000e40:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <getButton2+0xec>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e48:	4925      	ldr	r1, [pc, #148]	; (8000ee0 <getButton2+0xf4>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d13d      	bne.n	8000ed0 <getButton2+0xe4>
	{
		if(keyReg3[i] != keyReg2[i])
 8000e54:	4a24      	ldr	r2, [pc, #144]	; (8000ee8 <getButton2+0xfc>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e5c:	4920      	ldr	r1, [pc, #128]	; (8000ee0 <getButton2+0xf4>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d016      	beq.n	8000e96 <getButton2+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <getButton2+0xf4>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e70:	491d      	ldr	r1, [pc, #116]	; (8000ee8 <getButton2+0xfc>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000e78:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <getButton2+0xf4>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d125      	bne.n	8000ed0 <getButton2+0xe4>
			{
				button2_flag = 1;
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <getButton2+0x100>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 50;
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <getButton2+0x104>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2132      	movs	r1, #50	; 0x32
 8000e90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 50;
				}
			}
		}
	}
}
 8000e94:	e01c      	b.n	8000ed0 <getButton2+0xe4>
			if(keyReg2[i] == PRESSED_STATE)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <getButton2+0xf4>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d116      	bne.n	8000ed0 <getButton2+0xe4>
				TimerForKeyPress[i]--;
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <getButton2+0x104>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	1e5a      	subs	r2, r3, #1
 8000eac:	4910      	ldr	r1, [pc, #64]	; (8000ef0 <getButton2+0x104>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <getButton2+0x104>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d107      	bne.n	8000ed0 <getButton2+0xe4>
					button2_flag = 1;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <getButton2+0x100>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 50;
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <getButton2+0x104>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2132      	movs	r1, #50	; 0x32
 8000ecc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000010 	.word	0x20000010
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000020 	.word	0x20000020
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	20000030 	.word	0x20000030
 8000eec:	200000b8 	.word	0x200000b8
 8000ef0:	20000040 	.word	0x20000040

08000ef4 <getButton3>:

void getButton3()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	int i = 2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000efe:	4a38      	ldr	r2, [pc, #224]	; (8000fe0 <getButton3+0xec>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f06:	4937      	ldr	r1, [pc, #220]	; (8000fe4 <getButton3+0xf0>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000f0e:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <getButton3+0xf4>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f16:	4932      	ldr	r1, [pc, #200]	; (8000fe0 <getButton3+0xec>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f22:	4832      	ldr	r0, [pc, #200]	; (8000fec <getButton3+0xf8>)
 8000f24:	f001 fc94 	bl	8002850 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <getButton3+0xf4>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000f34:	4a2b      	ldr	r2, [pc, #172]	; (8000fe4 <getButton3+0xf0>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f3c:	4928      	ldr	r1, [pc, #160]	; (8000fe0 <getButton3+0xec>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d147      	bne.n	8000fd8 <getButton3+0xe4>
 8000f48:	4a25      	ldr	r2, [pc, #148]	; (8000fe0 <getButton3+0xec>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f50:	4925      	ldr	r1, [pc, #148]	; (8000fe8 <getButton3+0xf4>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d13d      	bne.n	8000fd8 <getButton3+0xe4>
	{
		if(keyReg3[i] != keyReg2[i])
 8000f5c:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <getButton3+0xfc>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f64:	4920      	ldr	r1, [pc, #128]	; (8000fe8 <getButton3+0xf4>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d016      	beq.n	8000f9e <getButton3+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <getButton3+0xf4>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f78:	491d      	ldr	r1, [pc, #116]	; (8000ff0 <getButton3+0xfc>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <getButton3+0xf4>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d125      	bne.n	8000fd8 <getButton3+0xe4>
			{
				button3_flag = 1;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <getButton3+0x100>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 50;
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <getButton3+0x104>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2132      	movs	r1, #50	; 0x32
 8000f98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 50;
				}
			}
		}
	}
}
 8000f9c:	e01c      	b.n	8000fd8 <getButton3+0xe4>
			if(keyReg2[i] == PRESSED_STATE)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <getButton3+0xf4>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d116      	bne.n	8000fd8 <getButton3+0xe4>
				TimerForKeyPress[i]--;
 8000faa:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <getButton3+0x104>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	1e5a      	subs	r2, r3, #1
 8000fb4:	4910      	ldr	r1, [pc, #64]	; (8000ff8 <getButton3+0x104>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <getButton3+0x104>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d107      	bne.n	8000fd8 <getButton3+0xe4>
					button3_flag = 1;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <getButton3+0x100>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 50;
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <getButton3+0x104>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2132      	movs	r1, #50	; 0x32
 8000fd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000010 	.word	0x20000010
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000020 	.word	0x20000020
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	20000030 	.word	0x20000030
 8000ff4:	200000bc 	.word	0x200000bc
 8000ff8:	20000040 	.word	0x20000040

08000ffc <getButton4>:

void getButton4()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	int i = 3;
 8001002:	2303      	movs	r3, #3
 8001004:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8001006:	4a39      	ldr	r2, [pc, #228]	; (80010ec <getButton4+0xf0>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800100e:	4938      	ldr	r1, [pc, #224]	; (80010f0 <getButton4+0xf4>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8001016:	4a37      	ldr	r2, [pc, #220]	; (80010f4 <getButton4+0xf8>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800101e:	4933      	ldr	r1, [pc, #204]	; (80010ec <getButton4+0xf0>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button4_GPIO_Port, button4_Pin);
 8001026:	2101      	movs	r1, #1
 8001028:	4833      	ldr	r0, [pc, #204]	; (80010f8 <getButton4+0xfc>)
 800102a:	f001 fc11 	bl	8002850 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	4619      	mov	r1, r3
 8001032:	4a30      	ldr	r2, [pc, #192]	; (80010f4 <getButton4+0xf8>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800103a:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <getButton4+0xf4>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001042:	492a      	ldr	r1, [pc, #168]	; (80010ec <getButton4+0xf0>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800104a:	429a      	cmp	r2, r3
 800104c:	d149      	bne.n	80010e2 <getButton4+0xe6>
 800104e:	4a27      	ldr	r2, [pc, #156]	; (80010ec <getButton4+0xf0>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001056:	4927      	ldr	r1, [pc, #156]	; (80010f4 <getButton4+0xf8>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800105e:	429a      	cmp	r2, r3
 8001060:	d13f      	bne.n	80010e2 <getButton4+0xe6>
	{
		if(keyReg3[i] != keyReg2[i])
 8001062:	4a26      	ldr	r2, [pc, #152]	; (80010fc <getButton4+0x100>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800106a:	4922      	ldr	r1, [pc, #136]	; (80010f4 <getButton4+0xf8>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001072:	429a      	cmp	r2, r3
 8001074:	d017      	beq.n	80010a6 <getButton4+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 8001076:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <getButton4+0xf8>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800107e:	491f      	ldr	r1, [pc, #124]	; (80010fc <getButton4+0x100>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8001086:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <getButton4+0xf8>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d127      	bne.n	80010e2 <getButton4+0xe6>
			{
				button4_flag = 1;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <getButton4+0x104>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 300;
 8001098:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <getButton4+0x108>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80010a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
				}
			}
		}
	}
}
 80010a4:	e01d      	b.n	80010e2 <getButton4+0xe6>
			if(keyReg2[i] == PRESSED_STATE)
 80010a6:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <getButton4+0xf8>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d117      	bne.n	80010e2 <getButton4+0xe6>
				TimerForKeyPress[i]--;
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <getButton4+0x108>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	1e5a      	subs	r2, r3, #1
 80010bc:	4911      	ldr	r1, [pc, #68]	; (8001104 <getButton4+0x108>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 80010c4:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <getButton4+0x108>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d108      	bne.n	80010e2 <getButton4+0xe6>
					button4_flag = 1;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <getButton4+0x104>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 300;
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <getButton4+0x108>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80010de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000010 	.word	0x20000010
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000020 	.word	0x20000020
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	20000030 	.word	0x20000030
 8001100:	200000c0 	.word	0x200000c0
 8001104:	20000040 	.word	0x20000040

08001108 <fsm_automatic>:

int status_horizontal = AUTO_RED;
int status_vertical = AUTO_GREEN;

void fsm_automatic()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	fsm_auto_horizontal();
 800110c:	f000 f804 	bl	8001118 <fsm_auto_horizontal>

	fsm_auto_vertical();
 8001110:	f000 f884 	bl	800121c <fsm_auto_vertical>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <fsm_auto_horizontal>:

void fsm_auto_horizontal()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 800111c:	4b3b      	ldr	r3, [pc, #236]	; (800120c <fsm_auto_horizontal+0xf4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d048      	beq.n	80011b6 <fsm_auto_horizontal+0x9e>
 8001124:	2b03      	cmp	r3, #3
 8001126:	dc67      	bgt.n	80011f8 <fsm_auto_horizontal+0xe0>
 8001128:	2b01      	cmp	r3, #1
 800112a:	d002      	beq.n	8001132 <fsm_auto_horizontal+0x1a>
 800112c:	2b02      	cmp	r3, #2
 800112e:	d021      	beq.n	8001174 <fsm_auto_horizontal+0x5c>
		}

		break;
	}
	default:
		break;
 8001130:	e062      	b.n	80011f8 <fsm_auto_horizontal+0xe0>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	2104      	movs	r1, #4
 8001136:	4836      	ldr	r0, [pc, #216]	; (8001210 <fsm_auto_horizontal+0xf8>)
 8001138:	f001 fba1 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2108      	movs	r1, #8
 8001140:	4833      	ldr	r0, [pc, #204]	; (8001210 <fsm_auto_horizontal+0xf8>)
 8001142:	f001 fb9c 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2110      	movs	r1, #16
 800114a:	4831      	ldr	r0, [pc, #196]	; (8001210 <fsm_auto_horizontal+0xf8>)
 800114c:	f001 fb97 	bl	800287e <HAL_GPIO_WritePin>
		horizontal_counter++;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <fsm_auto_horizontal+0xfc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <fsm_auto_horizontal+0xfc>)
 8001158:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_horizontal[0] == horizontal_counter)
 800115a:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <fsm_auto_horizontal+0x100>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <fsm_auto_horizontal+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d14a      	bne.n	80011fc <fsm_auto_horizontal+0xe4>
			horizontal_counter = 0;
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <fsm_auto_horizontal+0xfc>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_GREEN;
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <fsm_auto_horizontal+0xf4>)
 800116e:	2203      	movs	r2, #3
 8001170:	601a      	str	r2, [r3, #0]
		break;
 8001172:	e043      	b.n	80011fc <fsm_auto_horizontal+0xe4>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2104      	movs	r1, #4
 8001178:	4825      	ldr	r0, [pc, #148]	; (8001210 <fsm_auto_horizontal+0xf8>)
 800117a:	f001 fb80 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2108      	movs	r1, #8
 8001182:	4823      	ldr	r0, [pc, #140]	; (8001210 <fsm_auto_horizontal+0xf8>)
 8001184:	f001 fb7b 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2110      	movs	r1, #16
 800118c:	4820      	ldr	r0, [pc, #128]	; (8001210 <fsm_auto_horizontal+0xf8>)
 800118e:	f001 fb76 	bl	800287e <HAL_GPIO_WritePin>
		horizontal_counter++;
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <fsm_auto_horizontal+0xfc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <fsm_auto_horizontal+0xfc>)
 800119a:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_horizontal[1] == horizontal_counter)
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <fsm_auto_horizontal+0x100>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d12b      	bne.n	8001200 <fsm_auto_horizontal+0xe8>
			horizontal_counter = 0;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <fsm_auto_horizontal+0xf4>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		break;
 80011b4:	e024      	b.n	8001200 <fsm_auto_horizontal+0xe8>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2104      	movs	r1, #4
 80011ba:	4815      	ldr	r0, [pc, #84]	; (8001210 <fsm_auto_horizontal+0xf8>)
 80011bc:	f001 fb5f 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2108      	movs	r1, #8
 80011c4:	4812      	ldr	r0, [pc, #72]	; (8001210 <fsm_auto_horizontal+0xf8>)
 80011c6:	f001 fb5a 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2110      	movs	r1, #16
 80011ce:	4810      	ldr	r0, [pc, #64]	; (8001210 <fsm_auto_horizontal+0xf8>)
 80011d0:	f001 fb55 	bl	800287e <HAL_GPIO_WritePin>
		horizontal_counter++;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011dc:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_horizontal[2] == horizontal_counter)
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <fsm_auto_horizontal+0x100>)
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d10c      	bne.n	8001204 <fsm_auto_horizontal+0xec>
			horizontal_counter = 0;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_YELLOW;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <fsm_auto_horizontal+0xf4>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	601a      	str	r2, [r3, #0]
		break;
 80011f6:	e005      	b.n	8001204 <fsm_auto_horizontal+0xec>
		break;
 80011f8:	bf00      	nop
 80011fa:	e004      	b.n	8001206 <fsm_auto_horizontal+0xee>
		break;
 80011fc:	bf00      	nop
 80011fe:	e002      	b.n	8001206 <fsm_auto_horizontal+0xee>
		break;
 8001200:	bf00      	nop
 8001202:	e000      	b.n	8001206 <fsm_auto_horizontal+0xee>
		break;
 8001204:	bf00      	nop
	}

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000068 	.word	0x20000068
 8001210:	40010800 	.word	0x40010800
 8001214:	200000c4 	.word	0x200000c4
 8001218:	2000005c 	.word	0x2000005c

0800121c <fsm_auto_vertical>:

void fsm_auto_vertical()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

	switch(status_vertical)
 8001220:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <fsm_auto_vertical+0x104>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d04e      	beq.n	80012c6 <fsm_auto_vertical+0xaa>
 8001228:	2b03      	cmp	r3, #3
 800122a:	dc70      	bgt.n	800130e <fsm_auto_vertical+0xf2>
 800122c:	2b01      	cmp	r3, #1
 800122e:	d002      	beq.n	8001236 <fsm_auto_vertical+0x1a>
 8001230:	2b02      	cmp	r3, #2
 8001232:	d024      	beq.n	800127e <fsm_auto_vertical+0x62>
		}

		break;
	}
	default:
		break;
 8001234:	e06b      	b.n	800130e <fsm_auto_vertical+0xf2>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123c:	4839      	ldr	r0, [pc, #228]	; (8001324 <fsm_auto_vertical+0x108>)
 800123e:	f001 fb1e 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001248:	4836      	ldr	r0, [pc, #216]	; (8001324 <fsm_auto_vertical+0x108>)
 800124a:	f001 fb18 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001254:	4833      	ldr	r0, [pc, #204]	; (8001324 <fsm_auto_vertical+0x108>)
 8001256:	f001 fb12 	bl	800287e <HAL_GPIO_WritePin>
		vertical_counter++;
 800125a:	4b33      	ldr	r3, [pc, #204]	; (8001328 <fsm_auto_vertical+0x10c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a31      	ldr	r2, [pc, #196]	; (8001328 <fsm_auto_vertical+0x10c>)
 8001262:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_vertical[0] == vertical_counter)
 8001264:	4b31      	ldr	r3, [pc, #196]	; (800132c <fsm_auto_vertical+0x110>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <fsm_auto_vertical+0x10c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d150      	bne.n	8001312 <fsm_auto_vertical+0xf6>
			vertical_counter = 0;
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <fsm_auto_vertical+0x10c>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <fsm_auto_vertical+0x104>)
 8001278:	2203      	movs	r2, #3
 800127a:	601a      	str	r2, [r3, #0]
		break;
 800127c:	e049      	b.n	8001312 <fsm_auto_vertical+0xf6>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001284:	4827      	ldr	r0, [pc, #156]	; (8001324 <fsm_auto_vertical+0x108>)
 8001286:	f001 fafa 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001290:	4824      	ldr	r0, [pc, #144]	; (8001324 <fsm_auto_vertical+0x108>)
 8001292:	f001 faf4 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129c:	4821      	ldr	r0, [pc, #132]	; (8001324 <fsm_auto_vertical+0x108>)
 800129e:	f001 faee 	bl	800287e <HAL_GPIO_WritePin>
		vertical_counter++;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012aa:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_vertical[1] == vertical_counter)
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <fsm_auto_vertical+0x110>)
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d12e      	bne.n	8001316 <fsm_auto_vertical+0xfa>
			vertical_counter = 0;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_RED;
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <fsm_auto_vertical+0x104>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
		break;
 80012c4:	e027      	b.n	8001316 <fsm_auto_vertical+0xfa>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012cc:	4815      	ldr	r0, [pc, #84]	; (8001324 <fsm_auto_vertical+0x108>)
 80012ce:	f001 fad6 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d8:	4812      	ldr	r0, [pc, #72]	; (8001324 <fsm_auto_vertical+0x108>)
 80012da:	f001 fad0 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e4:	480f      	ldr	r0, [pc, #60]	; (8001324 <fsm_auto_vertical+0x108>)
 80012e6:	f001 faca 	bl	800287e <HAL_GPIO_WritePin>
		vertical_counter++;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012f2:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_vertical[2] == vertical_counter)
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <fsm_auto_vertical+0x110>)
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d10c      	bne.n	800131a <fsm_auto_vertical+0xfe>
			vertical_counter = 0;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <fsm_auto_vertical+0x10c>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_YELLOW;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <fsm_auto_vertical+0x104>)
 8001308:	2202      	movs	r2, #2
 800130a:	601a      	str	r2, [r3, #0]
		break;
 800130c:	e005      	b.n	800131a <fsm_auto_vertical+0xfe>
		break;
 800130e:	bf00      	nop
 8001310:	e004      	b.n	800131c <fsm_auto_vertical+0x100>
		break;
 8001312:	bf00      	nop
 8001314:	e002      	b.n	800131c <fsm_auto_vertical+0x100>
		break;
 8001316:	bf00      	nop
 8001318:	e000      	b.n	800131c <fsm_auto_vertical+0x100>
		break;
 800131a:	bf00      	nop
	}

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	2000006c 	.word	0x2000006c
 8001324:	40010c00 	.word	0x40010c00
 8001328:	200000c8 	.word	0x200000c8
 800132c:	20000050 	.word	0x20000050

08001330 <fsm_manual>:
int check_button3_green = 0;

int auto_count = 20;

void fsm_manual()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 8001336:	4ba7      	ldr	r3, [pc, #668]	; (80015d4 <fsm_manual+0x2a4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3b01      	subs	r3, #1
 800133c:	2b06      	cmp	r3, #6
 800133e:	f200 840c 	bhi.w	8001b5a <fsm_manual+0x82a>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <fsm_manual+0x18>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	08001365 	.word	0x08001365
 800134c:	080013d7 	.word	0x080013d7
 8001350:	08001449 	.word	0x08001449
 8001354:	08001b5b 	.word	0x08001b5b
 8001358:	080014bb 	.word	0x080014bb
 800135c:	08001623 	.word	0x08001623
 8001360:	080017bf 	.word	0x080017bf
	{
	case AUTO_RED:
	{
		if(isButton1Pressed() == 1)
 8001364:	f7ff fc74 	bl	8000c50 <isButton1Pressed>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	f040 83f0 	bne.w	8001b50 <fsm_manual+0x820>
		{
			for(int i = 0; i < 3; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e00a      	b.n	800138c <fsm_manual+0x5c>
			{
				red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 8001376:	4a98      	ldr	r2, [pc, #608]	; (80015d8 <fsm_manual+0x2a8>)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800137e:	4997      	ldr	r1, [pc, #604]	; (80015dc <fsm_manual+0x2ac>)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b02      	cmp	r3, #2
 8001390:	ddf1      	ble.n	8001376 <fsm_manual+0x46>
			}

			check_sync_red = 0;
 8001392:	4b93      	ldr	r3, [pc, #588]	; (80015e0 <fsm_manual+0x2b0>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
			check_sync_yellow = 0;
 8001398:	4b92      	ldr	r3, [pc, #584]	; (80015e4 <fsm_manual+0x2b4>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
			check_sync_green = 0;
 800139e:	4b92      	ldr	r3, [pc, #584]	; (80015e8 <fsm_manual+0x2b8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

			check_button2_red = 0;
 80013a4:	4b91      	ldr	r3, [pc, #580]	; (80015ec <fsm_manual+0x2bc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
			check_button2_yellow = 0;
 80013aa:	4b91      	ldr	r3, [pc, #580]	; (80015f0 <fsm_manual+0x2c0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
			check_button2_green = 0;
 80013b0:	4b90      	ldr	r3, [pc, #576]	; (80015f4 <fsm_manual+0x2c4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

			check_button3_red = 0;
 80013b6:	4b90      	ldr	r3, [pc, #576]	; (80015f8 <fsm_manual+0x2c8>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
			check_button3_yellow = 0;
 80013bc:	4b8f      	ldr	r3, [pc, #572]	; (80015fc <fsm_manual+0x2cc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
			check_button3_green = 0;
 80013c2:	4b8f      	ldr	r3, [pc, #572]	; (8001600 <fsm_manual+0x2d0>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

			status_horizontal = MANUAL_RED;
 80013c8:	4b82      	ldr	r3, [pc, #520]	; (80015d4 <fsm_manual+0x2a4>)
 80013ca:	2205      	movs	r2, #5
 80013cc:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_RED;
 80013ce:	4b8d      	ldr	r3, [pc, #564]	; (8001604 <fsm_manual+0x2d4>)
 80013d0:	2205      	movs	r2, #5
 80013d2:	601a      	str	r2, [r3, #0]
		}
		break;
 80013d4:	e3bc      	b.n	8001b50 <fsm_manual+0x820>
	}
	case AUTO_YELLOW:
	{
		if(isButton1Pressed() == 1)
 80013d6:	f7ff fc3b 	bl	8000c50 <isButton1Pressed>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	f040 83b9 	bne.w	8001b54 <fsm_manual+0x824>
		{
			for(int i = 0; i < 3; i++)
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	e00a      	b.n	80013fe <fsm_manual+0xce>
			{
				red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 80013e8:	4a7b      	ldr	r2, [pc, #492]	; (80015d8 <fsm_manual+0x2a8>)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f0:	497a      	ldr	r1, [pc, #488]	; (80015dc <fsm_manual+0x2ac>)
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	3301      	adds	r3, #1
 80013fc:	60bb      	str	r3, [r7, #8]
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	2b02      	cmp	r3, #2
 8001402:	ddf1      	ble.n	80013e8 <fsm_manual+0xb8>
			}

			check_sync_red = 0;
 8001404:	4b76      	ldr	r3, [pc, #472]	; (80015e0 <fsm_manual+0x2b0>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
			check_sync_yellow = 0;
 800140a:	4b76      	ldr	r3, [pc, #472]	; (80015e4 <fsm_manual+0x2b4>)
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
			check_sync_green = 0;
 8001410:	4b75      	ldr	r3, [pc, #468]	; (80015e8 <fsm_manual+0x2b8>)
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]

			check_button2_red = 0;
 8001416:	4b75      	ldr	r3, [pc, #468]	; (80015ec <fsm_manual+0x2bc>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
			check_button2_yellow = 0;
 800141c:	4b74      	ldr	r3, [pc, #464]	; (80015f0 <fsm_manual+0x2c0>)
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
			check_button2_green = 0;
 8001422:	4b74      	ldr	r3, [pc, #464]	; (80015f4 <fsm_manual+0x2c4>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

			check_button3_red = 0;
 8001428:	4b73      	ldr	r3, [pc, #460]	; (80015f8 <fsm_manual+0x2c8>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
			check_button3_yellow = 0;
 800142e:	4b73      	ldr	r3, [pc, #460]	; (80015fc <fsm_manual+0x2cc>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
			check_button3_green = 0;
 8001434:	4b72      	ldr	r3, [pc, #456]	; (8001600 <fsm_manual+0x2d0>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]

			status_horizontal = MANUAL_RED;
 800143a:	4b66      	ldr	r3, [pc, #408]	; (80015d4 <fsm_manual+0x2a4>)
 800143c:	2205      	movs	r2, #5
 800143e:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_RED;
 8001440:	4b70      	ldr	r3, [pc, #448]	; (8001604 <fsm_manual+0x2d4>)
 8001442:	2205      	movs	r2, #5
 8001444:	601a      	str	r2, [r3, #0]
		}
		break;
 8001446:	e385      	b.n	8001b54 <fsm_manual+0x824>
	}
	case AUTO_GREEN:
	{
		if(isButton1Pressed() == 1)
 8001448:	f7ff fc02 	bl	8000c50 <isButton1Pressed>
 800144c:	4603      	mov	r3, r0
 800144e:	2b01      	cmp	r3, #1
 8001450:	f040 8382 	bne.w	8001b58 <fsm_manual+0x828>
		{
			for(int i = 0; i < 3; i++)
 8001454:	2300      	movs	r3, #0
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	e00a      	b.n	8001470 <fsm_manual+0x140>
			{
				red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 800145a:	4a5f      	ldr	r2, [pc, #380]	; (80015d8 <fsm_manual+0x2a8>)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001462:	495e      	ldr	r1, [pc, #376]	; (80015dc <fsm_manual+0x2ac>)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3301      	adds	r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2b02      	cmp	r3, #2
 8001474:	ddf1      	ble.n	800145a <fsm_manual+0x12a>
			}

			check_sync_red = 0;
 8001476:	4b5a      	ldr	r3, [pc, #360]	; (80015e0 <fsm_manual+0x2b0>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
			check_sync_yellow = 0;
 800147c:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <fsm_manual+0x2b4>)
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
			check_sync_green = 0;
 8001482:	4b59      	ldr	r3, [pc, #356]	; (80015e8 <fsm_manual+0x2b8>)
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]

			check_button2_red = 0;
 8001488:	4b58      	ldr	r3, [pc, #352]	; (80015ec <fsm_manual+0x2bc>)
 800148a:	2200      	movs	r2, #0
 800148c:	601a      	str	r2, [r3, #0]
			check_button2_yellow = 0;
 800148e:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <fsm_manual+0x2c0>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
			check_button2_green = 0;
 8001494:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <fsm_manual+0x2c4>)
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]

			check_button3_red = 0;
 800149a:	4b57      	ldr	r3, [pc, #348]	; (80015f8 <fsm_manual+0x2c8>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
			check_button3_yellow = 0;
 80014a0:	4b56      	ldr	r3, [pc, #344]	; (80015fc <fsm_manual+0x2cc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
			check_button3_green = 0;
 80014a6:	4b56      	ldr	r3, [pc, #344]	; (8001600 <fsm_manual+0x2d0>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

			status_horizontal = MANUAL_RED;
 80014ac:	4b49      	ldr	r3, [pc, #292]	; (80015d4 <fsm_manual+0x2a4>)
 80014ae:	2205      	movs	r2, #5
 80014b0:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_RED;
 80014b2:	4b54      	ldr	r3, [pc, #336]	; (8001604 <fsm_manual+0x2d4>)
 80014b4:	2205      	movs	r2, #5
 80014b6:	601a      	str	r2, [r3, #0]
		}
		break;
 80014b8:	e34e      	b.n	8001b58 <fsm_manual+0x828>
	}
	case MANUAL_RED:
	{

		if(check_sync_red == 0)
 80014ba:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <fsm_manual+0x2b0>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10d      	bne.n	80014de <fsm_manual+0x1ae>
		{
			check_sync_red = 1;
 80014c2:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <fsm_manual+0x2b0>)
 80014c4:	2201      	movs	r2, #1
 80014c6:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 80014c8:	2201      	movs	r2, #1
 80014ca:	2104      	movs	r1, #4
 80014cc:	484e      	ldr	r0, [pc, #312]	; (8001608 <fsm_manual+0x2d8>)
 80014ce:	f001 f9d6 	bl	800287e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 80014d2:	2201      	movs	r2, #1
 80014d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d8:	484c      	ldr	r0, [pc, #304]	; (800160c <fsm_manual+0x2dc>)
 80014da:	f001 f9d0 	bl	800287e <HAL_GPIO_WritePin>
		}

		HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 80014de:	2104      	movs	r1, #4
 80014e0:	4849      	ldr	r0, [pc, #292]	; (8001608 <fsm_manual+0x2d8>)
 80014e2:	f001 f9e4 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 80014e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ea:	4848      	ldr	r0, [pc, #288]	; (800160c <fsm_manual+0x2dc>)
 80014ec:	f001 f9df 	bl	80028ae <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2108      	movs	r1, #8
 80014f4:	4844      	ldr	r0, [pc, #272]	; (8001608 <fsm_manual+0x2d8>)
 80014f6:	f001 f9c2 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001500:	4842      	ldr	r0, [pc, #264]	; (800160c <fsm_manual+0x2dc>)
 8001502:	f001 f9bc 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	2110      	movs	r1, #16
 800150a:	483f      	ldr	r0, [pc, #252]	; (8001608 <fsm_manual+0x2d8>)
 800150c:	f001 f9b7 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001510:	2200      	movs	r2, #0
 8001512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001516:	483d      	ldr	r0, [pc, #244]	; (800160c <fsm_manual+0x2dc>)
 8001518:	f001 f9b1 	bl	800287e <HAL_GPIO_WritePin>

		if(isButton1Pressed() == 1)
 800151c:	f7ff fb98 	bl	8000c50 <isButton1Pressed>
 8001520:	4603      	mov	r3, r0
 8001522:	2b01      	cmp	r3, #1
 8001524:	d108      	bne.n	8001538 <fsm_manual+0x208>
		{
			status_horizontal = MANUAL_YELLOW;
 8001526:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <fsm_manual+0x2a4>)
 8001528:	2206      	movs	r2, #6
 800152a:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_YELLOW;
 800152c:	4b35      	ldr	r3, [pc, #212]	; (8001604 <fsm_manual+0x2d4>)
 800152e:	2206      	movs	r2, #6
 8001530:	601a      	str	r2, [r3, #0]

			auto_count = 20;
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <fsm_manual+0x2e0>)
 8001534:	2214      	movs	r2, #20
 8001536:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1)
 8001538:	f7ff fb9c 	bl	8000c74 <isButton2Pressed>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d116      	bne.n	8001570 <fsm_manual+0x240>
		{
			check_button2_red = 1;
 8001542:	4b2a      	ldr	r3, [pc, #168]	; (80015ec <fsm_manual+0x2bc>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[0] <= 99 && red_yellow_green_manual_time[0] >= 1)
 8001548:	4b24      	ldr	r3, [pc, #144]	; (80015dc <fsm_manual+0x2ac>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b63      	cmp	r3, #99	; 0x63
 800154e:	dc09      	bgt.n	8001564 <fsm_manual+0x234>
 8001550:	4b22      	ldr	r3, [pc, #136]	; (80015dc <fsm_manual+0x2ac>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	dd05      	ble.n	8001564 <fsm_manual+0x234>
			{
				red_yellow_green_manual_time[0]++;
 8001558:	4b20      	ldr	r3, [pc, #128]	; (80015dc <fsm_manual+0x2ac>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	4a1f      	ldr	r2, [pc, #124]	; (80015dc <fsm_manual+0x2ac>)
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e002      	b.n	800156a <fsm_manual+0x23a>
			}
			else
			{
				red_yellow_green_manual_time[0] = 1;
 8001564:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <fsm_manual+0x2ac>)
 8001566:	2201      	movs	r2, #1
 8001568:	601a      	str	r2, [r3, #0]
			}

			auto_count = 20;
 800156a:	4b29      	ldr	r3, [pc, #164]	; (8001610 <fsm_manual+0x2e0>)
 800156c:	2214      	movs	r2, #20
 800156e:	601a      	str	r2, [r3, #0]
		}

		if(isButton3Pressed() == 1)
 8001570:	f7ff fb92 	bl	8000c98 <isButton3Pressed>
 8001574:	4603      	mov	r3, r0
 8001576:	2b01      	cmp	r3, #1
 8001578:	d116      	bne.n	80015a8 <fsm_manual+0x278>
		{
			check_button3_red = 1;
 800157a:	4b1f      	ldr	r3, [pc, #124]	; (80015f8 <fsm_manual+0x2c8>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[0] <= 99 && red_yellow_green_manual_time[0] >= 1)
 8001580:	4b16      	ldr	r3, [pc, #88]	; (80015dc <fsm_manual+0x2ac>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2b63      	cmp	r3, #99	; 0x63
 8001586:	dc09      	bgt.n	800159c <fsm_manual+0x26c>
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <fsm_manual+0x2ac>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	dd05      	ble.n	800159c <fsm_manual+0x26c>
			{
				red_yellow_green_manual_time[0]--;
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <fsm_manual+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	3b01      	subs	r3, #1
 8001596:	4a11      	ldr	r2, [pc, #68]	; (80015dc <fsm_manual+0x2ac>)
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	e002      	b.n	80015a2 <fsm_manual+0x272>
			}
			else
			{
				red_yellow_green_manual_time[0] = 1;
 800159c:	4b0f      	ldr	r3, [pc, #60]	; (80015dc <fsm_manual+0x2ac>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]
			}

			auto_count = 20;
 80015a2:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <fsm_manual+0x2e0>)
 80015a4:	2214      	movs	r2, #20
 80015a6:	601a      	str	r2, [r3, #0]
		}

		if(isButton4Pressed() == 1)
 80015a8:	f7ff fb88 	bl	8000cbc <isButton4Pressed>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d105      	bne.n	80015be <fsm_manual+0x28e>
		{
			status_horizontal = AUTO_RED;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <fsm_manual+0x2a4>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 80015b8:	4b12      	ldr	r3, [pc, #72]	; (8001604 <fsm_manual+0x2d4>)
 80015ba:	2203      	movs	r2, #3
 80015bc:	601a      	str	r2, [r3, #0]
		}

		if(auto_count > 0)
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <fsm_manual+0x2e0>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	dd26      	ble.n	8001614 <fsm_manual+0x2e4>
		{
			auto_count--;
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <fsm_manual+0x2e0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	3b01      	subs	r3, #1
 80015cc:	4a10      	ldr	r2, [pc, #64]	; (8001610 <fsm_manual+0x2e0>)
 80015ce:	6013      	str	r3, [r2, #0]
		{
			status_horizontal = AUTO_RED;
			status_vertical = AUTO_GREEN;
		}

		break;
 80015d0:	e2c3      	b.n	8001b5a <fsm_manual+0x82a>
 80015d2:	bf00      	nop
 80015d4:	20000068 	.word	0x20000068
 80015d8:	2000005c 	.word	0x2000005c
 80015dc:	200000cc 	.word	0x200000cc
 80015e0:	200000d8 	.word	0x200000d8
 80015e4:	200000dc 	.word	0x200000dc
 80015e8:	200000e0 	.word	0x200000e0
 80015ec:	200000e4 	.word	0x200000e4
 80015f0:	200000e8 	.word	0x200000e8
 80015f4:	200000ec 	.word	0x200000ec
 80015f8:	200000f0 	.word	0x200000f0
 80015fc:	200000f4 	.word	0x200000f4
 8001600:	200000f8 	.word	0x200000f8
 8001604:	2000006c 	.word	0x2000006c
 8001608:	40010800 	.word	0x40010800
 800160c:	40010c00 	.word	0x40010c00
 8001610:	20000070 	.word	0x20000070
			status_horizontal = AUTO_RED;
 8001614:	4ba1      	ldr	r3, [pc, #644]	; (800189c <fsm_manual+0x56c>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 800161a:	4ba1      	ldr	r3, [pc, #644]	; (80018a0 <fsm_manual+0x570>)
 800161c:	2203      	movs	r2, #3
 800161e:	601a      	str	r2, [r3, #0]
		break;
 8001620:	e29b      	b.n	8001b5a <fsm_manual+0x82a>
	}
	case MANUAL_YELLOW:
	{

		if(check_sync_yellow == 0)
 8001622:	4ba0      	ldr	r3, [pc, #640]	; (80018a4 <fsm_manual+0x574>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d10d      	bne.n	8001646 <fsm_manual+0x316>
		{
			check_sync_yellow = 1;
 800162a:	4b9e      	ldr	r3, [pc, #632]	; (80018a4 <fsm_manual+0x574>)
 800162c:	2201      	movs	r2, #1
 800162e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 8001630:	2201      	movs	r2, #1
 8001632:	2108      	movs	r1, #8
 8001634:	489c      	ldr	r0, [pc, #624]	; (80018a8 <fsm_manual+0x578>)
 8001636:	f001 f922 	bl	800287e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 800163a:	2201      	movs	r2, #1
 800163c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001640:	489a      	ldr	r0, [pc, #616]	; (80018ac <fsm_manual+0x57c>)
 8001642:	f001 f91c 	bl	800287e <HAL_GPIO_WritePin>
		}

		HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 8001646:	2108      	movs	r1, #8
 8001648:	4897      	ldr	r0, [pc, #604]	; (80018a8 <fsm_manual+0x578>)
 800164a:	f001 f930 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 800164e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001652:	4896      	ldr	r0, [pc, #600]	; (80018ac <fsm_manual+0x57c>)
 8001654:	f001 f92b 	bl	80028ae <HAL_GPIO_TogglePin>


		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	2104      	movs	r1, #4
 800165c:	4892      	ldr	r0, [pc, #584]	; (80018a8 <fsm_manual+0x578>)
 800165e:	f001 f90e 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001668:	4890      	ldr	r0, [pc, #576]	; (80018ac <fsm_manual+0x57c>)
 800166a:	f001 f908 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2110      	movs	r1, #16
 8001672:	488d      	ldr	r0, [pc, #564]	; (80018a8 <fsm_manual+0x578>)
 8001674:	f001 f903 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001678:	2200      	movs	r2, #0
 800167a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800167e:	488b      	ldr	r0, [pc, #556]	; (80018ac <fsm_manual+0x57c>)
 8001680:	f001 f8fd 	bl	800287e <HAL_GPIO_WritePin>

		if(isButton1Pressed() == 1)
 8001684:	f7ff fae4 	bl	8000c50 <isButton1Pressed>
 8001688:	4603      	mov	r3, r0
 800168a:	2b01      	cmp	r3, #1
 800168c:	d108      	bne.n	80016a0 <fsm_manual+0x370>
		{
			status_horizontal = MANUAL_GREEN;
 800168e:	4b83      	ldr	r3, [pc, #524]	; (800189c <fsm_manual+0x56c>)
 8001690:	2207      	movs	r2, #7
 8001692:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_GREEN;
 8001694:	4b82      	ldr	r3, [pc, #520]	; (80018a0 <fsm_manual+0x570>)
 8001696:	2207      	movs	r2, #7
 8001698:	601a      	str	r2, [r3, #0]

			auto_count = 20;
 800169a:	4b85      	ldr	r3, [pc, #532]	; (80018b0 <fsm_manual+0x580>)
 800169c:	2214      	movs	r2, #20
 800169e:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1)
 80016a0:	f7ff fae8 	bl	8000c74 <isButton2Pressed>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d116      	bne.n	80016d8 <fsm_manual+0x3a8>
		{
			check_button2_yellow = 1;
 80016aa:	4b82      	ldr	r3, [pc, #520]	; (80018b4 <fsm_manual+0x584>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[1] <= 99 && red_yellow_green_manual_time[1] >= 1)
 80016b0:	4b81      	ldr	r3, [pc, #516]	; (80018b8 <fsm_manual+0x588>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b63      	cmp	r3, #99	; 0x63
 80016b6:	dc09      	bgt.n	80016cc <fsm_manual+0x39c>
 80016b8:	4b7f      	ldr	r3, [pc, #508]	; (80018b8 <fsm_manual+0x588>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	dd05      	ble.n	80016cc <fsm_manual+0x39c>
			{
				red_yellow_green_manual_time[1]++;
 80016c0:	4b7d      	ldr	r3, [pc, #500]	; (80018b8 <fsm_manual+0x588>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	3301      	adds	r3, #1
 80016c6:	4a7c      	ldr	r2, [pc, #496]	; (80018b8 <fsm_manual+0x588>)
 80016c8:	6053      	str	r3, [r2, #4]
 80016ca:	e002      	b.n	80016d2 <fsm_manual+0x3a2>
			}
			else
			{
				red_yellow_green_manual_time[1] = 1;
 80016cc:	4b7a      	ldr	r3, [pc, #488]	; (80018b8 <fsm_manual+0x588>)
 80016ce:	2201      	movs	r2, #1
 80016d0:	605a      	str	r2, [r3, #4]
			}

			auto_count = 20;
 80016d2:	4b77      	ldr	r3, [pc, #476]	; (80018b0 <fsm_manual+0x580>)
 80016d4:	2214      	movs	r2, #20
 80016d6:	601a      	str	r2, [r3, #0]
		}

		if(isButton3Pressed() == 1)
 80016d8:	f7ff fade 	bl	8000c98 <isButton3Pressed>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d116      	bne.n	8001710 <fsm_manual+0x3e0>
		{
			check_button3_yellow = 1;
 80016e2:	4b76      	ldr	r3, [pc, #472]	; (80018bc <fsm_manual+0x58c>)
 80016e4:	2201      	movs	r2, #1
 80016e6:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[1] <= 99 && red_yellow_green_manual_time[1] >= 1)
 80016e8:	4b73      	ldr	r3, [pc, #460]	; (80018b8 <fsm_manual+0x588>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b63      	cmp	r3, #99	; 0x63
 80016ee:	dc09      	bgt.n	8001704 <fsm_manual+0x3d4>
 80016f0:	4b71      	ldr	r3, [pc, #452]	; (80018b8 <fsm_manual+0x588>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd05      	ble.n	8001704 <fsm_manual+0x3d4>
			{
				red_yellow_green_manual_time[1]--;
 80016f8:	4b6f      	ldr	r3, [pc, #444]	; (80018b8 <fsm_manual+0x588>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <fsm_manual+0x588>)
 8001700:	6053      	str	r3, [r2, #4]
 8001702:	e002      	b.n	800170a <fsm_manual+0x3da>
			}
			else
			{
				red_yellow_green_manual_time[1] = 1;
 8001704:	4b6c      	ldr	r3, [pc, #432]	; (80018b8 <fsm_manual+0x588>)
 8001706:	2201      	movs	r2, #1
 8001708:	605a      	str	r2, [r3, #4]
			}

			auto_count = 20;
 800170a:	4b69      	ldr	r3, [pc, #420]	; (80018b0 <fsm_manual+0x580>)
 800170c:	2214      	movs	r2, #20
 800170e:	601a      	str	r2, [r3, #0]
		}

		if(isButton4Pressed() == 1)
 8001710:	f7ff fad4 	bl	8000cbc <isButton4Pressed>
 8001714:	4603      	mov	r3, r0
 8001716:	2b01      	cmp	r3, #1
 8001718:	d140      	bne.n	800179c <fsm_manual+0x46c>
		{
			if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_yellow == 1 || check_button3_yellow == 1))
 800171a:	4b69      	ldr	r3, [pc, #420]	; (80018c0 <fsm_manual+0x590>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d003      	beq.n	800172a <fsm_manual+0x3fa>
 8001722:	4b68      	ldr	r3, [pc, #416]	; (80018c4 <fsm_manual+0x594>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d132      	bne.n	8001790 <fsm_manual+0x460>
 800172a:	4b62      	ldr	r3, [pc, #392]	; (80018b4 <fsm_manual+0x584>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d003      	beq.n	800173a <fsm_manual+0x40a>
 8001732:	4b62      	ldr	r3, [pc, #392]	; (80018bc <fsm_manual+0x58c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d12a      	bne.n	8001790 <fsm_manual+0x460>
			{
				red_yellow_green_manual_time[2] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[1];
 800173a:	4b5f      	ldr	r3, [pc, #380]	; (80018b8 <fsm_manual+0x588>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b5e      	ldr	r3, [pc, #376]	; (80018b8 <fsm_manual+0x588>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	4a5c      	ldr	r2, [pc, #368]	; (80018b8 <fsm_manual+0x588>)
 8001746:	6093      	str	r3, [r2, #8]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001748:	4b5b      	ldr	r3, [pc, #364]	; (80018b8 <fsm_manual+0x588>)
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <fsm_manual+0x588>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	429a      	cmp	r2, r3
 8001752:	da1d      	bge.n	8001790 <fsm_manual+0x460>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 8001754:	4b58      	ldr	r3, [pc, #352]	; (80018b8 <fsm_manual+0x588>)
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4b57      	ldr	r3, [pc, #348]	; (80018b8 <fsm_manual+0x588>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	da17      	bge.n	8001790 <fsm_manual+0x460>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001760:	4b55      	ldr	r3, [pc, #340]	; (80018b8 <fsm_manual+0x588>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a58      	ldr	r2, [pc, #352]	; (80018c8 <fsm_manual+0x598>)
 8001766:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001768:	4b53      	ldr	r3, [pc, #332]	; (80018b8 <fsm_manual+0x588>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a57      	ldr	r2, [pc, #348]	; (80018cc <fsm_manual+0x59c>)
 800176e:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001770:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <fsm_manual+0x588>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4a54      	ldr	r2, [pc, #336]	; (80018c8 <fsm_manual+0x598>)
 8001776:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001778:	4b4f      	ldr	r3, [pc, #316]	; (80018b8 <fsm_manual+0x588>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	4a53      	ldr	r2, [pc, #332]	; (80018cc <fsm_manual+0x59c>)
 800177e:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001780:	4b4d      	ldr	r3, [pc, #308]	; (80018b8 <fsm_manual+0x588>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a50      	ldr	r2, [pc, #320]	; (80018c8 <fsm_manual+0x598>)
 8001786:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001788:	4b4b      	ldr	r3, [pc, #300]	; (80018b8 <fsm_manual+0x588>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a4f      	ldr	r2, [pc, #316]	; (80018cc <fsm_manual+0x59c>)
 800178e:	6093      	str	r3, [r2, #8]
				}

			}

			status_horizontal = AUTO_RED;
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <fsm_manual+0x56c>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001796:	4b42      	ldr	r3, [pc, #264]	; (80018a0 <fsm_manual+0x570>)
 8001798:	2203      	movs	r2, #3
 800179a:	601a      	str	r2, [r3, #0]
		}

		if(auto_count > 0)
 800179c:	4b44      	ldr	r3, [pc, #272]	; (80018b0 <fsm_manual+0x580>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd05      	ble.n	80017b0 <fsm_manual+0x480>
		{
			auto_count--;
 80017a4:	4b42      	ldr	r3, [pc, #264]	; (80018b0 <fsm_manual+0x580>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	3b01      	subs	r3, #1
 80017aa:	4a41      	ldr	r2, [pc, #260]	; (80018b0 <fsm_manual+0x580>)
 80017ac:	6013      	str	r3, [r2, #0]
		{
			status_horizontal = AUTO_RED;
			status_vertical = AUTO_GREEN;
		}

		break;
 80017ae:	e1d4      	b.n	8001b5a <fsm_manual+0x82a>
			status_horizontal = AUTO_RED;
 80017b0:	4b3a      	ldr	r3, [pc, #232]	; (800189c <fsm_manual+0x56c>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 80017b6:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <fsm_manual+0x570>)
 80017b8:	2203      	movs	r2, #3
 80017ba:	601a      	str	r2, [r3, #0]
		break;
 80017bc:	e1cd      	b.n	8001b5a <fsm_manual+0x82a>
	}
	case MANUAL_GREEN:
	{

		if(check_sync_green == 0)
 80017be:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <fsm_manual+0x5a0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10d      	bne.n	80017e2 <fsm_manual+0x4b2>
		{
			check_sync_green = 1;
 80017c6:	4b42      	ldr	r3, [pc, #264]	; (80018d0 <fsm_manual+0x5a0>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 80017cc:	2201      	movs	r2, #1
 80017ce:	2110      	movs	r1, #16
 80017d0:	4835      	ldr	r0, [pc, #212]	; (80018a8 <fsm_manual+0x578>)
 80017d2:	f001 f854 	bl	800287e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017dc:	4833      	ldr	r0, [pc, #204]	; (80018ac <fsm_manual+0x57c>)
 80017de:	f001 f84e 	bl	800287e <HAL_GPIO_WritePin>
		}

		HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 80017e2:	2110      	movs	r1, #16
 80017e4:	4830      	ldr	r0, [pc, #192]	; (80018a8 <fsm_manual+0x578>)
 80017e6:	f001 f862 	bl	80028ae <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 80017ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017ee:	482f      	ldr	r0, [pc, #188]	; (80018ac <fsm_manual+0x57c>)
 80017f0:	f001 f85d 	bl	80028ae <HAL_GPIO_TogglePin>


		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	2104      	movs	r1, #4
 80017f8:	482b      	ldr	r0, [pc, #172]	; (80018a8 <fsm_manual+0x578>)
 80017fa:	f001 f840 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001804:	4829      	ldr	r0, [pc, #164]	; (80018ac <fsm_manual+0x57c>)
 8001806:	f001 f83a 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 800180a:	2200      	movs	r2, #0
 800180c:	2108      	movs	r1, #8
 800180e:	4826      	ldr	r0, [pc, #152]	; (80018a8 <fsm_manual+0x578>)
 8001810:	f001 f835 	bl	800287e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001814:	2200      	movs	r2, #0
 8001816:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800181a:	4824      	ldr	r0, [pc, #144]	; (80018ac <fsm_manual+0x57c>)
 800181c:	f001 f82f 	bl	800287e <HAL_GPIO_WritePin>

		if(isButton1Pressed() == 1)
 8001820:	f7ff fa16 	bl	8000c50 <isButton1Pressed>
 8001824:	4603      	mov	r3, r0
 8001826:	2b01      	cmp	r3, #1
 8001828:	d105      	bne.n	8001836 <fsm_manual+0x506>
		{
			status_horizontal = AUTO_RED;
 800182a:	4b1c      	ldr	r3, [pc, #112]	; (800189c <fsm_manual+0x56c>)
 800182c:	2201      	movs	r2, #1
 800182e:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <fsm_manual+0x570>)
 8001832:	2203      	movs	r2, #3
 8001834:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1)
 8001836:	f7ff fa1d 	bl	8000c74 <isButton2Pressed>
 800183a:	4603      	mov	r3, r0
 800183c:	2b01      	cmp	r3, #1
 800183e:	d116      	bne.n	800186e <fsm_manual+0x53e>
		{
			check_button2_green = 1;
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <fsm_manual+0x5a4>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[2] <= 99 && red_yellow_green_manual_time[2] >= 1)
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <fsm_manual+0x588>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b63      	cmp	r3, #99	; 0x63
 800184c:	dc09      	bgt.n	8001862 <fsm_manual+0x532>
 800184e:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <fsm_manual+0x588>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	dd05      	ble.n	8001862 <fsm_manual+0x532>
			{
				red_yellow_green_manual_time[2]++;
 8001856:	4b18      	ldr	r3, [pc, #96]	; (80018b8 <fsm_manual+0x588>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	3301      	adds	r3, #1
 800185c:	4a16      	ldr	r2, [pc, #88]	; (80018b8 <fsm_manual+0x588>)
 800185e:	6093      	str	r3, [r2, #8]
 8001860:	e002      	b.n	8001868 <fsm_manual+0x538>
			}
			else
			{
				red_yellow_green_manual_time[2] = 1;
 8001862:	4b15      	ldr	r3, [pc, #84]	; (80018b8 <fsm_manual+0x588>)
 8001864:	2201      	movs	r2, #1
 8001866:	609a      	str	r2, [r3, #8]
			}

			auto_count = 20;
 8001868:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <fsm_manual+0x580>)
 800186a:	2214      	movs	r2, #20
 800186c:	601a      	str	r2, [r3, #0]
		}

		if(isButton3Pressed() == 1)
 800186e:	f7ff fa13 	bl	8000c98 <isButton3Pressed>
 8001872:	4603      	mov	r3, r0
 8001874:	2b01      	cmp	r3, #1
 8001876:	d137      	bne.n	80018e8 <fsm_manual+0x5b8>
		{
			check_button3_green = 1;
 8001878:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <fsm_manual+0x5a8>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[2] <= 99 && red_yellow_green_manual_time[2] >= 1)
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <fsm_manual+0x588>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	2b63      	cmp	r3, #99	; 0x63
 8001884:	dc2a      	bgt.n	80018dc <fsm_manual+0x5ac>
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <fsm_manual+0x588>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	dd26      	ble.n	80018dc <fsm_manual+0x5ac>
			{
				red_yellow_green_manual_time[2]--;
 800188e:	4b0a      	ldr	r3, [pc, #40]	; (80018b8 <fsm_manual+0x588>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	3b01      	subs	r3, #1
 8001894:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <fsm_manual+0x588>)
 8001896:	6093      	str	r3, [r2, #8]
 8001898:	e023      	b.n	80018e2 <fsm_manual+0x5b2>
 800189a:	bf00      	nop
 800189c:	20000068 	.word	0x20000068
 80018a0:	2000006c 	.word	0x2000006c
 80018a4:	200000dc 	.word	0x200000dc
 80018a8:	40010800 	.word	0x40010800
 80018ac:	40010c00 	.word	0x40010c00
 80018b0:	20000070 	.word	0x20000070
 80018b4:	200000e8 	.word	0x200000e8
 80018b8:	200000cc 	.word	0x200000cc
 80018bc:	200000f4 	.word	0x200000f4
 80018c0:	200000e4 	.word	0x200000e4
 80018c4:	200000f0 	.word	0x200000f0
 80018c8:	2000005c 	.word	0x2000005c
 80018cc:	20000050 	.word	0x20000050
 80018d0:	200000e0 	.word	0x200000e0
 80018d4:	200000ec 	.word	0x200000ec
 80018d8:	200000f8 	.word	0x200000f8
			}
			else
			{
				red_yellow_green_manual_time[2] = 1;
 80018dc:	4b86      	ldr	r3, [pc, #536]	; (8001af8 <fsm_manual+0x7c8>)
 80018de:	2201      	movs	r2, #1
 80018e0:	609a      	str	r2, [r3, #8]
			}

			auto_count = 20;
 80018e2:	4b86      	ldr	r3, [pc, #536]	; (8001afc <fsm_manual+0x7cc>)
 80018e4:	2214      	movs	r2, #20
 80018e6:	601a      	str	r2, [r3, #0]
		}

		if(isButton4Pressed() == 1)
 80018e8:	f7ff f9e8 	bl	8000cbc <isButton4Pressed>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	f040 811d 	bne.w	8001b2e <fsm_manual+0x7fe>
		{
			if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_yellow == 1 || check_button3_yellow == 1))
 80018f4:	4b82      	ldr	r3, [pc, #520]	; (8001b00 <fsm_manual+0x7d0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d003      	beq.n	8001904 <fsm_manual+0x5d4>
 80018fc:	4b81      	ldr	r3, [pc, #516]	; (8001b04 <fsm_manual+0x7d4>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d135      	bne.n	8001970 <fsm_manual+0x640>
 8001904:	4b80      	ldr	r3, [pc, #512]	; (8001b08 <fsm_manual+0x7d8>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d003      	beq.n	8001914 <fsm_manual+0x5e4>
 800190c:	4b7f      	ldr	r3, [pc, #508]	; (8001b0c <fsm_manual+0x7dc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d12d      	bne.n	8001970 <fsm_manual+0x640>
			{
				red_yellow_green_manual_time[2] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[1];
 8001914:	4b78      	ldr	r3, [pc, #480]	; (8001af8 <fsm_manual+0x7c8>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b77      	ldr	r3, [pc, #476]	; (8001af8 <fsm_manual+0x7c8>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	4a76      	ldr	r2, [pc, #472]	; (8001af8 <fsm_manual+0x7c8>)
 8001920:	6093      	str	r3, [r2, #8]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001922:	4b75      	ldr	r3, [pc, #468]	; (8001af8 <fsm_manual+0x7c8>)
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	4b74      	ldr	r3, [pc, #464]	; (8001af8 <fsm_manual+0x7c8>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	429a      	cmp	r2, r3
 800192c:	f280 80e0 	bge.w	8001af0 <fsm_manual+0x7c0>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 8001930:	4b71      	ldr	r3, [pc, #452]	; (8001af8 <fsm_manual+0x7c8>)
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4b70      	ldr	r3, [pc, #448]	; (8001af8 <fsm_manual+0x7c8>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	429a      	cmp	r2, r3
 800193a:	f280 80d9 	bge.w	8001af0 <fsm_manual+0x7c0>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 800193e:	4b6e      	ldr	r3, [pc, #440]	; (8001af8 <fsm_manual+0x7c8>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a73      	ldr	r2, [pc, #460]	; (8001b10 <fsm_manual+0x7e0>)
 8001944:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001946:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <fsm_manual+0x7c8>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a72      	ldr	r2, [pc, #456]	; (8001b14 <fsm_manual+0x7e4>)
 800194c:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 800194e:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <fsm_manual+0x7c8>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	4a6f      	ldr	r2, [pc, #444]	; (8001b10 <fsm_manual+0x7e0>)
 8001954:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001956:	4b68      	ldr	r3, [pc, #416]	; (8001af8 <fsm_manual+0x7c8>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	4a6e      	ldr	r2, [pc, #440]	; (8001b14 <fsm_manual+0x7e4>)
 800195c:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 800195e:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <fsm_manual+0x7c8>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <fsm_manual+0x7e0>)
 8001964:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001966:	4b64      	ldr	r3, [pc, #400]	; (8001af8 <fsm_manual+0x7c8>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	4a6a      	ldr	r2, [pc, #424]	; (8001b14 <fsm_manual+0x7e4>)
 800196c:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 800196e:	e0bf      	b.n	8001af0 <fsm_manual+0x7c0>
				}

			}
			else if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_green == 1 || check_button3_green == 1))
 8001970:	4b63      	ldr	r3, [pc, #396]	; (8001b00 <fsm_manual+0x7d0>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d003      	beq.n	8001980 <fsm_manual+0x650>
 8001978:	4b62      	ldr	r3, [pc, #392]	; (8001b04 <fsm_manual+0x7d4>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d135      	bne.n	80019ec <fsm_manual+0x6bc>
 8001980:	4b65      	ldr	r3, [pc, #404]	; (8001b18 <fsm_manual+0x7e8>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d003      	beq.n	8001990 <fsm_manual+0x660>
 8001988:	4b64      	ldr	r3, [pc, #400]	; (8001b1c <fsm_manual+0x7ec>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d12d      	bne.n	80019ec <fsm_manual+0x6bc>
			{
				red_yellow_green_manual_time[1] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[2];
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <fsm_manual+0x7c8>)
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	4b58      	ldr	r3, [pc, #352]	; (8001af8 <fsm_manual+0x7c8>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <fsm_manual+0x7c8>)
 800199c:	6053      	str	r3, [r2, #4]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 800199e:	4b56      	ldr	r3, [pc, #344]	; (8001af8 <fsm_manual+0x7c8>)
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	4b55      	ldr	r3, [pc, #340]	; (8001af8 <fsm_manual+0x7c8>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	f280 80a4 	bge.w	8001af4 <fsm_manual+0x7c4>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 80019ac:	4b52      	ldr	r3, [pc, #328]	; (8001af8 <fsm_manual+0x7c8>)
 80019ae:	685a      	ldr	r2, [r3, #4]
 80019b0:	4b51      	ldr	r3, [pc, #324]	; (8001af8 <fsm_manual+0x7c8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	f280 809d 	bge.w	8001af4 <fsm_manual+0x7c4>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 80019ba:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <fsm_manual+0x7c8>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a54      	ldr	r2, [pc, #336]	; (8001b10 <fsm_manual+0x7e0>)
 80019c0:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 80019c2:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <fsm_manual+0x7c8>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a53      	ldr	r2, [pc, #332]	; (8001b14 <fsm_manual+0x7e4>)
 80019c8:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 80019ca:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <fsm_manual+0x7c8>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4a50      	ldr	r2, [pc, #320]	; (8001b10 <fsm_manual+0x7e0>)
 80019d0:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <fsm_manual+0x7c8>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a4f      	ldr	r2, [pc, #316]	; (8001b14 <fsm_manual+0x7e4>)
 80019d8:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <fsm_manual+0x7c8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4a4c      	ldr	r2, [pc, #304]	; (8001b10 <fsm_manual+0x7e0>)
 80019e0:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 80019e2:	4b45      	ldr	r3, [pc, #276]	; (8001af8 <fsm_manual+0x7c8>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	4a4b      	ldr	r2, [pc, #300]	; (8001b14 <fsm_manual+0x7e4>)
 80019e8:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80019ea:	e083      	b.n	8001af4 <fsm_manual+0x7c4>
				}

			}
			else if((check_button2_yellow == 1 || check_button3_yellow == 1) && (check_button2_green == 1 || check_button3_green == 1))
 80019ec:	4b46      	ldr	r3, [pc, #280]	; (8001b08 <fsm_manual+0x7d8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d003      	beq.n	80019fc <fsm_manual+0x6cc>
 80019f4:	4b45      	ldr	r3, [pc, #276]	; (8001b0c <fsm_manual+0x7dc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d133      	bne.n	8001a64 <fsm_manual+0x734>
 80019fc:	4b46      	ldr	r3, [pc, #280]	; (8001b18 <fsm_manual+0x7e8>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d003      	beq.n	8001a0c <fsm_manual+0x6dc>
 8001a04:	4b45      	ldr	r3, [pc, #276]	; (8001b1c <fsm_manual+0x7ec>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d12b      	bne.n	8001a64 <fsm_manual+0x734>
			{
				red_yellow_green_manual_time[0] = red_yellow_green_manual_time[1] + red_yellow_green_manual_time[2];
 8001a0c:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <fsm_manual+0x7c8>)
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	4b39      	ldr	r3, [pc, #228]	; (8001af8 <fsm_manual+0x7c8>)
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a38      	ldr	r2, [pc, #224]	; (8001af8 <fsm_manual+0x7c8>)
 8001a18:	6013      	str	r3, [r2, #0]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001a1a:	4b37      	ldr	r3, [pc, #220]	; (8001af8 <fsm_manual+0x7c8>)
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <fsm_manual+0x7c8>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	da7c      	bge.n	8001b20 <fsm_manual+0x7f0>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 8001a26:	4b34      	ldr	r3, [pc, #208]	; (8001af8 <fsm_manual+0x7c8>)
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	4b33      	ldr	r3, [pc, #204]	; (8001af8 <fsm_manual+0x7c8>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	da76      	bge.n	8001b20 <fsm_manual+0x7f0>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001a32:	4b31      	ldr	r3, [pc, #196]	; (8001af8 <fsm_manual+0x7c8>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a36      	ldr	r2, [pc, #216]	; (8001b10 <fsm_manual+0x7e0>)
 8001a38:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001a3a:	4b2f      	ldr	r3, [pc, #188]	; (8001af8 <fsm_manual+0x7c8>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a35      	ldr	r2, [pc, #212]	; (8001b14 <fsm_manual+0x7e4>)
 8001a40:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001a42:	4b2d      	ldr	r3, [pc, #180]	; (8001af8 <fsm_manual+0x7c8>)
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	4a32      	ldr	r2, [pc, #200]	; (8001b10 <fsm_manual+0x7e0>)
 8001a48:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001a4a:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <fsm_manual+0x7c8>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	4a31      	ldr	r2, [pc, #196]	; (8001b14 <fsm_manual+0x7e4>)
 8001a50:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <fsm_manual+0x7c8>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	4a2e      	ldr	r2, [pc, #184]	; (8001b10 <fsm_manual+0x7e0>)
 8001a58:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001a5a:	4b27      	ldr	r3, [pc, #156]	; (8001af8 <fsm_manual+0x7c8>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <fsm_manual+0x7e4>)
 8001a60:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001a62:	e05d      	b.n	8001b20 <fsm_manual+0x7f0>
				}

			}
			else if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_yellow == 1 || check_button3_yellow == 1) && (check_button2_green == 1 || check_button3_green == 1))
 8001a64:	4b26      	ldr	r3, [pc, #152]	; (8001b00 <fsm_manual+0x7d0>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	d003      	beq.n	8001a74 <fsm_manual+0x744>
 8001a6c:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <fsm_manual+0x7d4>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d156      	bne.n	8001b22 <fsm_manual+0x7f2>
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <fsm_manual+0x7d8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d003      	beq.n	8001a84 <fsm_manual+0x754>
 8001a7c:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <fsm_manual+0x7dc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d14e      	bne.n	8001b22 <fsm_manual+0x7f2>
 8001a84:	4b24      	ldr	r3, [pc, #144]	; (8001b18 <fsm_manual+0x7e8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d003      	beq.n	8001a94 <fsm_manual+0x764>
 8001a8c:	4b23      	ldr	r3, [pc, #140]	; (8001b1c <fsm_manual+0x7ec>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d146      	bne.n	8001b22 <fsm_manual+0x7f2>
			{

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001a94:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <fsm_manual+0x7c8>)
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <fsm_manual+0x7c8>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	da40      	bge.n	8001b22 <fsm_manual+0x7f2>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0]
 8001aa0:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <fsm_manual+0x7c8>)
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <fsm_manual+0x7c8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	da3a      	bge.n	8001b22 <fsm_manual+0x7f2>
				&& red_yellow_green_manual_time[0] == red_yellow_green_manual_time[1] + red_yellow_green_manual_time[2])
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <fsm_manual+0x7c8>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <fsm_manual+0x7c8>)
 8001ab2:	6859      	ldr	r1, [r3, #4]
 8001ab4:	4b10      	ldr	r3, [pc, #64]	; (8001af8 <fsm_manual+0x7c8>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	440b      	add	r3, r1
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d131      	bne.n	8001b22 <fsm_manual+0x7f2>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001abe:	4b0e      	ldr	r3, [pc, #56]	; (8001af8 <fsm_manual+0x7c8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a13      	ldr	r2, [pc, #76]	; (8001b10 <fsm_manual+0x7e0>)
 8001ac4:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001ac6:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <fsm_manual+0x7c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a12      	ldr	r2, [pc, #72]	; (8001b14 <fsm_manual+0x7e4>)
 8001acc:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001ace:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <fsm_manual+0x7c8>)
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	4a0f      	ldr	r2, [pc, #60]	; (8001b10 <fsm_manual+0x7e0>)
 8001ad4:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001ad6:	4b08      	ldr	r3, [pc, #32]	; (8001af8 <fsm_manual+0x7c8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <fsm_manual+0x7e4>)
 8001adc:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <fsm_manual+0x7c8>)
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	4a0b      	ldr	r2, [pc, #44]	; (8001b10 <fsm_manual+0x7e0>)
 8001ae4:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001ae6:	4b04      	ldr	r3, [pc, #16]	; (8001af8 <fsm_manual+0x7c8>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <fsm_manual+0x7e4>)
 8001aec:	6093      	str	r3, [r2, #8]
 8001aee:	e018      	b.n	8001b22 <fsm_manual+0x7f2>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001af0:	bf00      	nop
 8001af2:	e016      	b.n	8001b22 <fsm_manual+0x7f2>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001af4:	bf00      	nop
 8001af6:	e014      	b.n	8001b22 <fsm_manual+0x7f2>
 8001af8:	200000cc 	.word	0x200000cc
 8001afc:	20000070 	.word	0x20000070
 8001b00:	200000e4 	.word	0x200000e4
 8001b04:	200000f0 	.word	0x200000f0
 8001b08:	200000e8 	.word	0x200000e8
 8001b0c:	200000f4 	.word	0x200000f4
 8001b10:	2000005c 	.word	0x2000005c
 8001b14:	20000050 	.word	0x20000050
 8001b18:	200000ec 	.word	0x200000ec
 8001b1c:	200000f8 	.word	0x200000f8
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001b20:	bf00      	nop
				}

			}

			status_horizontal = AUTO_RED;
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <fsm_manual+0x834>)
 8001b24:	2201      	movs	r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001b28:	4b0f      	ldr	r3, [pc, #60]	; (8001b68 <fsm_manual+0x838>)
 8001b2a:	2203      	movs	r2, #3
 8001b2c:	601a      	str	r2, [r3, #0]
		}

		if(auto_count > 0)
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <fsm_manual+0x83c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	dd05      	ble.n	8001b42 <fsm_manual+0x812>
		{
			auto_count--;
 8001b36:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <fsm_manual+0x83c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	3b01      	subs	r3, #1
 8001b3c:	4a0b      	ldr	r2, [pc, #44]	; (8001b6c <fsm_manual+0x83c>)
 8001b3e:	6013      	str	r3, [r2, #0]
		{
			status_horizontal = AUTO_RED;
			status_vertical = AUTO_GREEN;
		}

		break;
 8001b40:	e00b      	b.n	8001b5a <fsm_manual+0x82a>
			status_horizontal = AUTO_RED;
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <fsm_manual+0x834>)
 8001b44:	2201      	movs	r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001b48:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <fsm_manual+0x838>)
 8001b4a:	2203      	movs	r2, #3
 8001b4c:	601a      	str	r2, [r3, #0]
		break;
 8001b4e:	e004      	b.n	8001b5a <fsm_manual+0x82a>
		break;
 8001b50:	bf00      	nop
 8001b52:	e002      	b.n	8001b5a <fsm_manual+0x82a>
		break;
 8001b54:	bf00      	nop
 8001b56:	e000      	b.n	8001b5a <fsm_manual+0x82a>
		break;
 8001b58:	bf00      	nop
	}

	}

}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000068 	.word	0x20000068
 8001b68:	2000006c 	.word	0x2000006c
 8001b6c:	20000070 	.word	0x20000070

08001b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b74:	f000 fb82 	bl	800227c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b78:	f000 f84a 	bl	8001c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b7c:	f000 f8d0 	bl	8001d20 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001b80:	f000 f882 	bl	8001c88 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8001b84:	f000 f956 	bl	8001e34 <SCH_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001b88:	4818      	ldr	r0, [pc, #96]	; (8001bec <main+0x7c>)
 8001b8a:	f001 fad5 	bl	8003138 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(getButton1, 0, 10);
 8001b8e:	220a      	movs	r2, #10
 8001b90:	2100      	movs	r1, #0
 8001b92:	4817      	ldr	r0, [pc, #92]	; (8001bf0 <main+0x80>)
 8001b94:	f000 fa24 	bl	8001fe0 <SCH_Add_Task>
  SCH_Add_Task(getButton2, 0, 10);
 8001b98:	220a      	movs	r2, #10
 8001b9a:	2100      	movs	r1, #0
 8001b9c:	4815      	ldr	r0, [pc, #84]	; (8001bf4 <main+0x84>)
 8001b9e:	f000 fa1f 	bl	8001fe0 <SCH_Add_Task>
  SCH_Add_Task(getButton3, 0, 10);
 8001ba2:	220a      	movs	r2, #10
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4814      	ldr	r0, [pc, #80]	; (8001bf8 <main+0x88>)
 8001ba8:	f000 fa1a 	bl	8001fe0 <SCH_Add_Task>
  SCH_Add_Task(getButton4, 0, 10);
 8001bac:	220a      	movs	r2, #10
 8001bae:	2100      	movs	r1, #0
 8001bb0:	4812      	ldr	r0, [pc, #72]	; (8001bfc <main+0x8c>)
 8001bb2:	f000 fa15 	bl	8001fe0 <SCH_Add_Task>

  SCH_Add_Task(testLED, 0, 1000);
 8001bb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4810      	ldr	r0, [pc, #64]	; (8001c00 <main+0x90>)
 8001bbe:	f000 fa0f 	bl	8001fe0 <SCH_Add_Task>

  SCH_Add_Task(fsm_manual, 0, 500);
 8001bc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	480e      	ldr	r0, [pc, #56]	; (8001c04 <main+0x94>)
 8001bca:	f000 fa09 	bl	8001fe0 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 0, 1000);
 8001bce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <main+0x98>)
 8001bd6:	f000 fa03 	bl	8001fe0 <SCH_Add_Task>
  SCH_Add_Task(display7SEGFinal, 0, 500);
 8001bda:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001bde:	2100      	movs	r1, #0
 8001be0:	480a      	ldr	r0, [pc, #40]	; (8001c0c <main+0x9c>)
 8001be2:	f000 f9fd 	bl	8001fe0 <SCH_Add_Task>



  while (1)
  {
	  SCH_Dispatch_Tasks();
 8001be6:	f000 f9af 	bl	8001f48 <SCH_Dispatch_Tasks>
 8001bea:	e7fc      	b.n	8001be6 <main+0x76>
 8001bec:	20000100 	.word	0x20000100
 8001bf0:	08000ce1 	.word	0x08000ce1
 8001bf4:	08000ded 	.word	0x08000ded
 8001bf8:	08000ef5 	.word	0x08000ef5
 8001bfc:	08000ffd 	.word	0x08000ffd
 8001c00:	08001e15 	.word	0x08001e15
 8001c04:	08001331 	.word	0x08001331
 8001c08:	08001109 	.word	0x08001109
 8001c0c:	0800014d 	.word	0x0800014d

08001c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b090      	sub	sp, #64	; 0x40
 8001c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c16:	f107 0318 	add.w	r3, r7, #24
 8001c1a:	2228      	movs	r2, #40	; 0x28
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f001 fe3a 	bl	8003898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
 8001c30:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c36:	2301      	movs	r3, #1
 8001c38:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c3a:	2310      	movs	r3, #16
 8001c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c42:	f107 0318 	add.w	r3, r7, #24
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 fe4a 	bl	80028e0 <HAL_RCC_OscConfig>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001c52:	f000 f8e9 	bl	8001e28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c56:	230f      	movs	r3, #15
 8001c58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c62:	2300      	movs	r3, #0
 8001c64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f001 f8b6 	bl	8002de0 <HAL_RCC_ClockConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001c7a:	f000 f8d5 	bl	8001e28 <Error_Handler>
  }
}
 8001c7e:	bf00      	nop
 8001c80:	3740      	adds	r7, #64	; 0x40
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
	...

08001c88 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c9c:	463b      	mov	r3, r7
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ca4:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <MX_TIM2_Init+0x94>)
 8001ca6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001caa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <MX_TIM2_Init+0x94>)
 8001cae:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001cb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <MX_TIM2_Init+0x94>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001cba:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <MX_TIM2_Init+0x94>)
 8001cbc:	2209      	movs	r2, #9
 8001cbe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <MX_TIM2_Init+0x94>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <MX_TIM2_Init+0x94>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ccc:	4813      	ldr	r0, [pc, #76]	; (8001d1c <MX_TIM2_Init+0x94>)
 8001cce:	f001 f9e3 	bl	8003098 <HAL_TIM_Base_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001cd8:	f000 f8a6 	bl	8001e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ce2:	f107 0308 	add.w	r3, r7, #8
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	480c      	ldr	r0, [pc, #48]	; (8001d1c <MX_TIM2_Init+0x94>)
 8001cea:	f001 fb61 	bl	80033b0 <HAL_TIM_ConfigClockSource>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001cf4:	f000 f898 	bl	8001e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d00:	463b      	mov	r3, r7
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_TIM2_Init+0x94>)
 8001d06:	f001 fd39 	bl	800377c <HAL_TIMEx_MasterConfigSynchronization>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d10:	f000 f88a 	bl	8001e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000100 	.word	0x20000100

08001d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d26:	f107 0308 	add.w	r3, r7, #8
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d34:	4b2f      	ldr	r3, [pc, #188]	; (8001df4 <MX_GPIO_Init+0xd4>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a2e      	ldr	r2, [pc, #184]	; (8001df4 <MX_GPIO_Init+0xd4>)
 8001d3a:	f043 0304 	orr.w	r3, r3, #4
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b2c      	ldr	r3, [pc, #176]	; (8001df4 <MX_GPIO_Init+0xd4>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <MX_GPIO_Init+0xd4>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	4a28      	ldr	r2, [pc, #160]	; (8001df4 <MX_GPIO_Init+0xd4>)
 8001d52:	f043 0308 	orr.w	r3, r3, #8
 8001d56:	6193      	str	r3, [r2, #24]
 8001d58:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <MX_GPIO_Init+0xd4>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	603b      	str	r3, [r7, #0]
 8001d62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|yellow1_Pin|green1_Pin|test_Pin
 8001d64:	2200      	movs	r2, #0
 8001d66:	f641 71fc 	movw	r1, #8188	; 0x1ffc
 8001d6a:	4823      	ldr	r0, [pc, #140]	; (8001df8 <MX_GPIO_Init+0xd8>)
 8001d6c:	f000 fd87 	bl	800287e <HAL_GPIO_WritePin>
                          |a1_Pin|b1_Pin|c1_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|e2_Pin|f2_Pin
 8001d70:	2200      	movs	r2, #0
 8001d72:	f64f 71f6 	movw	r1, #65526	; 0xfff6
 8001d76:	4821      	ldr	r0, [pc, #132]	; (8001dfc <MX_GPIO_Init+0xdc>)
 8001d78:	f000 fd81 	bl	800287e <HAL_GPIO_WritePin>
                          |c2_Pin|d2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin yellow1_Pin green1_Pin test_Pin
                           a1_Pin b1_Pin c1_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|test_Pin
 8001d7c:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8001d80:	60bb      	str	r3, [r7, #8]
                          |a1_Pin|b1_Pin|c1_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d82:	2301      	movs	r3, #1
 8001d84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0308 	add.w	r3, r7, #8
 8001d92:	4619      	mov	r1, r3
 8001d94:	4818      	ldr	r0, [pc, #96]	; (8001df8 <MX_GPIO_Init+0xd8>)
 8001d96:	f000 fbe1 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pin : button4_Pin */
  GPIO_InitStruct.Pin = button4_Pin;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(button4_GPIO_Port, &GPIO_InitStruct);
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4619      	mov	r1, r3
 8001dac:	4813      	ldr	r0, [pc, #76]	; (8001dfc <MX_GPIO_Init+0xdc>)
 8001dae:	f000 fbd5 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin e2_Pin f2_Pin
                           g2_Pin red2_Pin yellow2_Pin green2_Pin
                           EN2_Pin EN3_Pin a2_Pin b2_Pin
                           c2_Pin d2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|e2_Pin|f2_Pin
 8001db2:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8001db6:	60bb      	str	r3, [r7, #8]
                          |g2_Pin|red2_Pin|yellow2_Pin|green2_Pin
                          |EN2_Pin|EN3_Pin|a2_Pin|b2_Pin
                          |c2_Pin|d2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db8:	2301      	movs	r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc4:	f107 0308 	add.w	r3, r7, #8
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480c      	ldr	r0, [pc, #48]	; (8001dfc <MX_GPIO_Init+0xdc>)
 8001dcc:	f000 fbc6 	bl	800255c <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001dd0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001dd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 0308 	add.w	r3, r7, #8
 8001de2:	4619      	mov	r1, r3
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <MX_GPIO_Init+0xd8>)
 8001de6:	f000 fbb9 	bl	800255c <HAL_GPIO_Init>

}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40021000 	.word	0x40021000
 8001df8:	40010800 	.word	0x40010800
 8001dfc:	40010c00 	.word	0x40010c00

08001e00 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001e08:	f000 f82e 	bl	8001e68 <SCH_Update>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <testLED>:

void testLED(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(test_GPIO_Port, test_Pin);
 8001e18:	2120      	movs	r1, #32
 8001e1a:	4802      	ldr	r0, [pc, #8]	; (8001e24 <testLED+0x10>)
 8001e1c:	f000 fd47 	bl	80028ae <HAL_GPIO_TogglePin>
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	40010800 	.word	0x40010800

08001e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <Error_Handler+0x8>
	...

08001e34 <SCH_Init>:
sTask SCH_tasks_G[SCH_MAX_TASKS];
unsigned char Error_code_G = 0;

//SCH_Init function
void SCH_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
	unsigned char i;

	for (i = 0; i < SCH_MAX_TASKS; i++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	71fb      	strb	r3, [r7, #7]
 8001e3e:	e006      	b.n	8001e4e <SCH_Init+0x1a>
	{
		SCH_Delete_Task(i);
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f91e 	bl	8002084 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++)
 8001e48:	79fb      	ldrb	r3, [r7, #7]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	71fb      	strb	r3, [r7, #7]
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	2b27      	cmp	r3, #39	; 0x27
 8001e52:	d9f5      	bls.n	8001e40 <SCH_Init+0xc>
	}

	Error_code_G = 0;
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <SCH_Init+0x30>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200000fc 	.word	0x200000fc

08001e68 <SCH_Update>:


//SCH_Update function
void SCH_Update(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
    unsigned char Index;

    for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	71fb      	strb	r3, [r7, #7]
 8001e72:	e05e      	b.n	8001f32 <SCH_Update+0xca>
    {
        if (SCH_tasks_G[Index].pTask)
 8001e74:	79fa      	ldrb	r2, [r7, #7]
 8001e76:	4933      	ldr	r1, [pc, #204]	; (8001f44 <SCH_Update+0xdc>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d051      	beq.n	8001f2c <SCH_Update+0xc4>
        {
            if (SCH_tasks_G[Index].Delay == 0)
 8001e88:	79fa      	ldrb	r2, [r7, #7]
 8001e8a:	492e      	ldr	r1, [pc, #184]	; (8001f44 <SCH_Update+0xdc>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	3304      	adds	r3, #4
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d132      	bne.n	8001f04 <SCH_Update+0x9c>
            {
                SCH_tasks_G[Index].RunMe += 1;
 8001e9e:	79fa      	ldrb	r2, [r7, #7]
 8001ea0:	4928      	ldr	r1, [pc, #160]	; (8001f44 <SCH_Update+0xdc>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	330c      	adds	r3, #12
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	79fa      	ldrb	r2, [r7, #7]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b2d8      	uxtb	r0, r3
 8001eb6:	4923      	ldr	r1, [pc, #140]	; (8001f44 <SCH_Update+0xdc>)
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	440b      	add	r3, r1
 8001ec2:	330c      	adds	r3, #12
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	701a      	strb	r2, [r3, #0]

                if (SCH_tasks_G[Index].Period)
 8001ec8:	79fa      	ldrb	r2, [r7, #7]
 8001eca:	491e      	ldr	r1, [pc, #120]	; (8001f44 <SCH_Update+0xdc>)
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	3308      	adds	r3, #8
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d026      	beq.n	8001f2c <SCH_Update+0xc4>
                {
                    SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8001ede:	79f9      	ldrb	r1, [r7, #7]
 8001ee0:	79fa      	ldrb	r2, [r7, #7]
 8001ee2:	4818      	ldr	r0, [pc, #96]	; (8001f44 <SCH_Update+0xdc>)
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	4403      	add	r3, r0
 8001eee:	3308      	adds	r3, #8
 8001ef0:	6819      	ldr	r1, [r3, #0]
 8001ef2:	4814      	ldr	r0, [pc, #80]	; (8001f44 <SCH_Update+0xdc>)
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4403      	add	r3, r0
 8001efe:	3304      	adds	r3, #4
 8001f00:	6019      	str	r1, [r3, #0]
 8001f02:	e013      	b.n	8001f2c <SCH_Update+0xc4>
                }
            }
            else
            {
                SCH_tasks_G[Index].Delay -= 10;
 8001f04:	79fa      	ldrb	r2, [r7, #7]
 8001f06:	490f      	ldr	r1, [pc, #60]	; (8001f44 <SCH_Update+0xdc>)
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	3304      	adds	r3, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	79fa      	ldrb	r2, [r7, #7]
 8001f18:	f1a3 010a 	sub.w	r1, r3, #10
 8001f1c:	4809      	ldr	r0, [pc, #36]	; (8001f44 <SCH_Update+0xdc>)
 8001f1e:	4613      	mov	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4413      	add	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4403      	add	r3, r0
 8001f28:	3304      	adds	r3, #4
 8001f2a:	6019      	str	r1, [r3, #0]
    for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	71fb      	strb	r3, [r7, #7]
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	2b27      	cmp	r3, #39	; 0x27
 8001f36:	d99d      	bls.n	8001e74 <SCH_Update+0xc>
            }
        }
    }
}
 8001f38:	bf00      	nop
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr
 8001f44:	20000148 	.word	0x20000148

08001f48 <SCH_Dispatch_Tasks>:

//SCH_Dispatch_Tasks function
void SCH_Dispatch_Tasks(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
    unsigned char Index;

    for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	71fb      	strb	r3, [r7, #7]
 8001f52:	e03a      	b.n	8001fca <SCH_Dispatch_Tasks+0x82>
    {
        if (SCH_tasks_G[Index].RunMe > 0)
 8001f54:	79fa      	ldrb	r2, [r7, #7]
 8001f56:	4921      	ldr	r1, [pc, #132]	; (8001fdc <SCH_Dispatch_Tasks+0x94>)
 8001f58:	4613      	mov	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	4413      	add	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	440b      	add	r3, r1
 8001f62:	330c      	adds	r3, #12
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d02c      	beq.n	8001fc4 <SCH_Dispatch_Tasks+0x7c>
        {
            (*SCH_tasks_G[Index].pTask)();
 8001f6a:	79fa      	ldrb	r2, [r7, #7]
 8001f6c:	491b      	ldr	r1, [pc, #108]	; (8001fdc <SCH_Dispatch_Tasks+0x94>)
 8001f6e:	4613      	mov	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	440b      	add	r3, r1
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4798      	blx	r3
            SCH_tasks_G[Index].RunMe -= 1;
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	4917      	ldr	r1, [pc, #92]	; (8001fdc <SCH_Dispatch_Tasks+0x94>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	330c      	adds	r3, #12
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	79fa      	ldrb	r2, [r7, #7]
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b2d8      	uxtb	r0, r3
 8001f94:	4911      	ldr	r1, [pc, #68]	; (8001fdc <SCH_Dispatch_Tasks+0x94>)
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	701a      	strb	r2, [r3, #0]

            if (SCH_tasks_G[Index].Period == 0)
 8001fa6:	79fa      	ldrb	r2, [r7, #7]
 8001fa8:	490c      	ldr	r1, [pc, #48]	; (8001fdc <SCH_Dispatch_Tasks+0x94>)
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	440b      	add	r3, r1
 8001fb4:	3308      	adds	r3, #8
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d103      	bne.n	8001fc4 <SCH_Dispatch_Tasks+0x7c>
            {
                SCH_Delete_Task(Index);
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f000 f860 	bl	8002084 <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	71fb      	strb	r3, [r7, #7]
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	2b27      	cmp	r3, #39	; 0x27
 8001fce:	d9c1      	bls.n	8001f54 <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 8001fd0:	bf00      	nop
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000148 	.word	0x20000148

08001fe0 <SCH_Add_Task>:

//SCH_Add_Task function
unsigned char SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
    unsigned char Index = 0;
 8001fec:	2300      	movs	r3, #0
 8001fee:	75fb      	strb	r3, [r7, #23]

    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001ff0:	e002      	b.n	8001ff8 <SCH_Add_Task+0x18>
    {
        Index++;
 8001ff2:	7dfb      	ldrb	r3, [r7, #23]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	75fb      	strb	r3, [r7, #23]
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 8001ff8:	7dfa      	ldrb	r2, [r7, #23]
 8001ffa:	4920      	ldr	r1, [pc, #128]	; (800207c <SCH_Add_Task+0x9c>)
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <SCH_Add_Task+0x32>
 800200c:	7dfb      	ldrb	r3, [r7, #23]
 800200e:	2b27      	cmp	r3, #39	; 0x27
 8002010:	d9ef      	bls.n	8001ff2 <SCH_Add_Task+0x12>
    }

    if (Index == SCH_MAX_TASKS)
 8002012:	7dfb      	ldrb	r3, [r7, #23]
 8002014:	2b28      	cmp	r3, #40	; 0x28
 8002016:	d104      	bne.n	8002022 <SCH_Add_Task+0x42>
    {
        Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <SCH_Add_Task+0xa0>)
 800201a:	2201      	movs	r2, #1
 800201c:	701a      	strb	r2, [r3, #0]
        return SCH_MAX_TASKS;
 800201e:	2328      	movs	r3, #40	; 0x28
 8002020:	e027      	b.n	8002072 <SCH_Add_Task+0x92>
    }

    SCH_tasks_G[Index].pTask = pFunction;
 8002022:	7dfa      	ldrb	r2, [r7, #23]
 8002024:	4915      	ldr	r1, [pc, #84]	; (800207c <SCH_Add_Task+0x9c>)
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Delay = DELAY;
 8002034:	7dfa      	ldrb	r2, [r7, #23]
 8002036:	4911      	ldr	r1, [pc, #68]	; (800207c <SCH_Add_Task+0x9c>)
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	3304      	adds	r3, #4
 8002044:	68ba      	ldr	r2, [r7, #8]
 8002046:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Period = PERIOD;
 8002048:	7dfa      	ldrb	r2, [r7, #23]
 800204a:	490c      	ldr	r1, [pc, #48]	; (800207c <SCH_Add_Task+0x9c>)
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	3308      	adds	r3, #8
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].RunMe = 0;
 800205c:	7dfa      	ldrb	r2, [r7, #23]
 800205e:	4907      	ldr	r1, [pc, #28]	; (800207c <SCH_Add_Task+0x9c>)
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	440b      	add	r3, r1
 800206a:	330c      	adds	r3, #12
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]

    return Index;
 8002070:	7dfb      	ldrb	r3, [r7, #23]
}
 8002072:	4618      	mov	r0, r3
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr
 800207c:	20000148 	.word	0x20000148
 8002080:	200000fc 	.word	0x200000fc

08002084 <SCH_Delete_Task>:


//SCH_Delete_Task function
uint8_t SCH_Delete_Task(uint32_t taskID)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
    uint8_t Return_code;

    if (SCH_tasks_G[taskID].pTask == 0)
 800208c:	491f      	ldr	r1, [pc, #124]	; (800210c <SCH_Delete_Task+0x88>)
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d105      	bne.n	80020ac <SCH_Delete_Task+0x28>
    {
        Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <SCH_Delete_Task+0x8c>)
 80020a2:	2202      	movs	r2, #2
 80020a4:	701a      	strb	r2, [r3, #0]
        Return_code = RETURN_ERROR;
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e001      	b.n	80020b0 <SCH_Delete_Task+0x2c>
    }
    else
    {
        Return_code = RETURN_NORMAL;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
    }

    SCH_tasks_G[taskID].pTask = 0x0000;
 80020b0:	4916      	ldr	r1, [pc, #88]	; (800210c <SCH_Delete_Task+0x88>)
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].Delay = 0;
 80020c2:	4912      	ldr	r1, [pc, #72]	; (800210c <SCH_Delete_Task+0x88>)
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	4613      	mov	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	4413      	add	r3, r2
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	440b      	add	r3, r1
 80020d0:	3304      	adds	r3, #4
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].Period = 0;
 80020d6:	490d      	ldr	r1, [pc, #52]	; (800210c <SCH_Delete_Task+0x88>)
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4613      	mov	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	4413      	add	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	440b      	add	r3, r1
 80020e4:	3308      	adds	r3, #8
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].RunMe = 0;
 80020ea:	4908      	ldr	r1, [pc, #32]	; (800210c <SCH_Delete_Task+0x88>)
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	330c      	adds	r3, #12
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]

    return Return_code;
 80020fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000148 	.word	0x20000148
 8002110:	200000fc 	.word	0x200000fc

08002114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800211a:	4b15      	ldr	r3, [pc, #84]	; (8002170 <HAL_MspInit+0x5c>)
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	4a14      	ldr	r2, [pc, #80]	; (8002170 <HAL_MspInit+0x5c>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6193      	str	r3, [r2, #24]
 8002126:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_MspInit+0x5c>)
 8002128:	699b      	ldr	r3, [r3, #24]
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <HAL_MspInit+0x5c>)
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <HAL_MspInit+0x5c>)
 8002138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213c:	61d3      	str	r3, [r2, #28]
 800213e:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <HAL_MspInit+0x5c>)
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_MspInit+0x60>)
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	4a04      	ldr	r2, [pc, #16]	; (8002174 <HAL_MspInit+0x60>)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002166:	bf00      	nop
 8002168:	3714      	adds	r7, #20
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000
 8002174:	40010000 	.word	0x40010000

08002178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002188:	d113      	bne.n	80021b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <HAL_TIM_Base_MspInit+0x44>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	4a0b      	ldr	r2, [pc, #44]	; (80021bc <HAL_TIM_Base_MspInit+0x44>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	61d3      	str	r3, [r2, #28]
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_TIM_Base_MspInit+0x44>)
 8002198:	69db      	ldr	r3, [r3, #28]
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	201c      	movs	r0, #28
 80021a8:	f000 f9a1 	bl	80024ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021ac:	201c      	movs	r0, #28
 80021ae:	f000 f9ba 	bl	8002526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3710      	adds	r7, #16
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40021000 	.word	0x40021000

080021c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <NMI_Handler+0x4>

080021c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ca:	e7fe      	b.n	80021ca <HardFault_Handler+0x4>

080021cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d0:	e7fe      	b.n	80021d0 <MemManage_Handler+0x4>

080021d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021d6:	e7fe      	b.n	80021d6 <BusFault_Handler+0x4>

080021d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021dc:	e7fe      	b.n	80021dc <UsageFault_Handler+0x4>

080021de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021de:	b480      	push	{r7}
 80021e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc80      	pop	{r7}
 80021e8:	4770      	bx	lr

080021ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr

080021f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021f6:	b480      	push	{r7}
 80021f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021fa:	bf00      	nop
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002206:	f000 f87f 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
	...

08002210 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <TIM2_IRQHandler+0x10>)
 8002216:	f000 ffdb 	bl	80031d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000100 	.word	0x20000100

08002224 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	bc80      	pop	{r7}
 800222e:	4770      	bx	lr

08002230 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002230:	f7ff fff8 	bl	8002224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002234:	480b      	ldr	r0, [pc, #44]	; (8002264 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002236:	490c      	ldr	r1, [pc, #48]	; (8002268 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002238:	4a0c      	ldr	r2, [pc, #48]	; (800226c <LoopFillZerobss+0x16>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800223c:	e002      	b.n	8002244 <LoopCopyDataInit>

0800223e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002242:	3304      	adds	r3, #4

08002244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002248:	d3f9      	bcc.n	800223e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224a:	4a09      	ldr	r2, [pc, #36]	; (8002270 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800224c:	4c09      	ldr	r4, [pc, #36]	; (8002274 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002250:	e001      	b.n	8002256 <LoopFillZerobss>

08002252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002254:	3204      	adds	r2, #4

08002256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002258:	d3fb      	bcc.n	8002252 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800225a:	f001 faf9 	bl	8003850 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800225e:	f7ff fc87 	bl	8001b70 <main>
  bx lr
 8002262:	4770      	bx	lr
  ldr r0, =_sdata
 8002264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002268:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800226c:	080038ec 	.word	0x080038ec
  ldr r2, =_sbss
 8002270:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002274:	2000046c 	.word	0x2000046c

08002278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002278:	e7fe      	b.n	8002278 <ADC1_2_IRQHandler>
	...

0800227c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	; (80022a4 <HAL_Init+0x28>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_Init+0x28>)
 8002286:	f043 0310 	orr.w	r3, r3, #16
 800228a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228c:	2003      	movs	r0, #3
 800228e:	f000 f923 	bl	80024d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002292:	200f      	movs	r0, #15
 8002294:	f000 f808 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002298:	f7ff ff3c 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b12      	ldr	r3, [pc, #72]	; (80022fc <HAL_InitTick+0x54>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_InitTick+0x58>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 f93b 	bl	8002542 <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295
 80022e4:	f000 f903 	bl	80024ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <HAL_InitTick+0x5c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000074 	.word	0x20000074
 8002300:	2000007c 	.word	0x2000007c
 8002304:	20000078 	.word	0x20000078

08002308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b05      	ldr	r3, [pc, #20]	; (8002324 <HAL_IncTick+0x1c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_IncTick+0x20>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a03      	ldr	r2, [pc, #12]	; (8002328 <HAL_IncTick+0x20>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr
 8002324:	2000007c 	.word	0x2000007c
 8002328:	20000468 	.word	0x20000468

0800232c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return uwTick;
 8002330:	4b02      	ldr	r3, [pc, #8]	; (800233c <HAL_GetTick+0x10>)
 8002332:	681b      	ldr	r3, [r3, #0]
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000468 	.word	0x20000468

08002340 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f003 0307 	and.w	r3, r3, #7
 800234e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002356:	68ba      	ldr	r2, [r7, #8]
 8002358:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800235c:	4013      	ands	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002368:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800236c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002372:	4a04      	ldr	r2, [pc, #16]	; (8002384 <__NVIC_SetPriorityGrouping+0x44>)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	60d3      	str	r3, [r2, #12]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800238c:	4b04      	ldr	r3, [pc, #16]	; (80023a0 <__NVIC_GetPriorityGrouping+0x18>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0a1b      	lsrs	r3, r3, #8
 8002392:	f003 0307 	and.w	r3, r3, #7
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000ed00 	.word	0xe000ed00

080023a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	db0b      	blt.n	80023ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	f003 021f 	and.w	r2, r3, #31
 80023bc:	4906      	ldr	r1, [pc, #24]	; (80023d8 <__NVIC_EnableIRQ+0x34>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	2001      	movs	r0, #1
 80023c6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	db0a      	blt.n	8002406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	b2da      	uxtb	r2, r3
 80023f4:	490c      	ldr	r1, [pc, #48]	; (8002428 <__NVIC_SetPriority+0x4c>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	0112      	lsls	r2, r2, #4
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	440b      	add	r3, r1
 8002400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002404:	e00a      	b.n	800241c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4908      	ldr	r1, [pc, #32]	; (800242c <__NVIC_SetPriority+0x50>)
 800240c:	79fb      	ldrb	r3, [r7, #7]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	3b04      	subs	r3, #4
 8002414:	0112      	lsls	r2, r2, #4
 8002416:	b2d2      	uxtb	r2, r2
 8002418:	440b      	add	r3, r1
 800241a:	761a      	strb	r2, [r3, #24]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	bc80      	pop	{r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	f1c3 0307 	rsb	r3, r3, #7
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf28      	it	cs
 800244e:	2304      	movcs	r3, #4
 8002450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3304      	adds	r3, #4
 8002456:	2b06      	cmp	r3, #6
 8002458:	d902      	bls.n	8002460 <NVIC_EncodePriority+0x30>
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	3b03      	subs	r3, #3
 800245e:	e000      	b.n	8002462 <NVIC_EncodePriority+0x32>
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002464:	f04f 32ff 	mov.w	r2, #4294967295
 8002468:	69bb      	ldr	r3, [r7, #24]
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43da      	mvns	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	401a      	ands	r2, r3
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002478:	f04f 31ff 	mov.w	r1, #4294967295
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	fa01 f303 	lsl.w	r3, r1, r3
 8002482:	43d9      	mvns	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	4313      	orrs	r3, r2
         );
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	3b01      	subs	r3, #1
 80024a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024a4:	d301      	bcc.n	80024aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024a6:	2301      	movs	r3, #1
 80024a8:	e00f      	b.n	80024ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024aa:	4a0a      	ldr	r2, [pc, #40]	; (80024d4 <SysTick_Config+0x40>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024b2:	210f      	movs	r1, #15
 80024b4:	f04f 30ff 	mov.w	r0, #4294967295
 80024b8:	f7ff ff90 	bl	80023dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <SysTick_Config+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024c2:	4b04      	ldr	r3, [pc, #16]	; (80024d4 <SysTick_Config+0x40>)
 80024c4:	2207      	movs	r2, #7
 80024c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	e000e010 	.word	0xe000e010

080024d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f7ff ff2d 	bl	8002340 <__NVIC_SetPriorityGrouping>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}

080024ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b086      	sub	sp, #24
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	4603      	mov	r3, r0
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
 80024fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002500:	f7ff ff42 	bl	8002388 <__NVIC_GetPriorityGrouping>
 8002504:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	68b9      	ldr	r1, [r7, #8]
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f7ff ff90 	bl	8002430 <NVIC_EncodePriority>
 8002510:	4602      	mov	r2, r0
 8002512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff ff5f 	bl	80023dc <__NVIC_SetPriority>
}
 800251e:	bf00      	nop
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff35 	bl	80023a4 <__NVIC_EnableIRQ>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f7ff ffa2 	bl	8002494 <SysTick_Config>
 8002550:	4603      	mov	r3, r0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800255c:	b480      	push	{r7}
 800255e:	b08b      	sub	sp, #44	; 0x2c
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002566:	2300      	movs	r3, #0
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800256a:	2300      	movs	r3, #0
 800256c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800256e:	e148      	b.n	8002802 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002570:	2201      	movs	r2, #1
 8002572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	429a      	cmp	r2, r3
 800258a:	f040 8137 	bne.w	80027fc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	4aa3      	ldr	r2, [pc, #652]	; (8002820 <HAL_GPIO_Init+0x2c4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d05e      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 8002598:	4aa1      	ldr	r2, [pc, #644]	; (8002820 <HAL_GPIO_Init+0x2c4>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d875      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 800259e:	4aa1      	ldr	r2, [pc, #644]	; (8002824 <HAL_GPIO_Init+0x2c8>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d058      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025a4:	4a9f      	ldr	r2, [pc, #636]	; (8002824 <HAL_GPIO_Init+0x2c8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d86f      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025aa:	4a9f      	ldr	r2, [pc, #636]	; (8002828 <HAL_GPIO_Init+0x2cc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d052      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025b0:	4a9d      	ldr	r2, [pc, #628]	; (8002828 <HAL_GPIO_Init+0x2cc>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d869      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025b6:	4a9d      	ldr	r2, [pc, #628]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d04c      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025bc:	4a9b      	ldr	r2, [pc, #620]	; (800282c <HAL_GPIO_Init+0x2d0>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d863      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025c2:	4a9b      	ldr	r2, [pc, #620]	; (8002830 <HAL_GPIO_Init+0x2d4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d046      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
 80025c8:	4a99      	ldr	r2, [pc, #612]	; (8002830 <HAL_GPIO_Init+0x2d4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d85d      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025ce:	2b12      	cmp	r3, #18
 80025d0:	d82a      	bhi.n	8002628 <HAL_GPIO_Init+0xcc>
 80025d2:	2b12      	cmp	r3, #18
 80025d4:	d859      	bhi.n	800268a <HAL_GPIO_Init+0x12e>
 80025d6:	a201      	add	r2, pc, #4	; (adr r2, 80025dc <HAL_GPIO_Init+0x80>)
 80025d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025dc:	08002657 	.word	0x08002657
 80025e0:	08002631 	.word	0x08002631
 80025e4:	08002643 	.word	0x08002643
 80025e8:	08002685 	.word	0x08002685
 80025ec:	0800268b 	.word	0x0800268b
 80025f0:	0800268b 	.word	0x0800268b
 80025f4:	0800268b 	.word	0x0800268b
 80025f8:	0800268b 	.word	0x0800268b
 80025fc:	0800268b 	.word	0x0800268b
 8002600:	0800268b 	.word	0x0800268b
 8002604:	0800268b 	.word	0x0800268b
 8002608:	0800268b 	.word	0x0800268b
 800260c:	0800268b 	.word	0x0800268b
 8002610:	0800268b 	.word	0x0800268b
 8002614:	0800268b 	.word	0x0800268b
 8002618:	0800268b 	.word	0x0800268b
 800261c:	0800268b 	.word	0x0800268b
 8002620:	08002639 	.word	0x08002639
 8002624:	0800264d 	.word	0x0800264d
 8002628:	4a82      	ldr	r2, [pc, #520]	; (8002834 <HAL_GPIO_Init+0x2d8>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800262e:	e02c      	b.n	800268a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	623b      	str	r3, [r7, #32]
          break;
 8002636:	e029      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	3304      	adds	r3, #4
 800263e:	623b      	str	r3, [r7, #32]
          break;
 8002640:	e024      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	3308      	adds	r3, #8
 8002648:	623b      	str	r3, [r7, #32]
          break;
 800264a:	e01f      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	330c      	adds	r3, #12
 8002652:	623b      	str	r3, [r7, #32]
          break;
 8002654:	e01a      	b.n	800268c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d102      	bne.n	8002664 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800265e:	2304      	movs	r3, #4
 8002660:	623b      	str	r3, [r7, #32]
          break;
 8002662:	e013      	b.n	800268c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d105      	bne.n	8002678 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800266c:	2308      	movs	r3, #8
 800266e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	611a      	str	r2, [r3, #16]
          break;
 8002676:	e009      	b.n	800268c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002678:	2308      	movs	r3, #8
 800267a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69fa      	ldr	r2, [r7, #28]
 8002680:	615a      	str	r2, [r3, #20]
          break;
 8002682:	e003      	b.n	800268c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002684:	2300      	movs	r3, #0
 8002686:	623b      	str	r3, [r7, #32]
          break;
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x130>
          break;
 800268a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	2bff      	cmp	r3, #255	; 0xff
 8002690:	d801      	bhi.n	8002696 <HAL_GPIO_Init+0x13a>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	e001      	b.n	800269a <HAL_GPIO_Init+0x13e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3304      	adds	r3, #4
 800269a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2bff      	cmp	r3, #255	; 0xff
 80026a0:	d802      	bhi.n	80026a8 <HAL_GPIO_Init+0x14c>
 80026a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	e002      	b.n	80026ae <HAL_GPIO_Init+0x152>
 80026a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026aa:	3b08      	subs	r3, #8
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	210f      	movs	r1, #15
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	fa01 f303 	lsl.w	r3, r1, r3
 80026bc:	43db      	mvns	r3, r3
 80026be:	401a      	ands	r2, r3
 80026c0:	6a39      	ldr	r1, [r7, #32]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	fa01 f303 	lsl.w	r3, r1, r3
 80026c8:	431a      	orrs	r2, r3
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8090 	beq.w	80027fc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026dc:	4b56      	ldr	r3, [pc, #344]	; (8002838 <HAL_GPIO_Init+0x2dc>)
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	4a55      	ldr	r2, [pc, #340]	; (8002838 <HAL_GPIO_Init+0x2dc>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6193      	str	r3, [r2, #24]
 80026e8:	4b53      	ldr	r3, [pc, #332]	; (8002838 <HAL_GPIO_Init+0x2dc>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026f4:	4a51      	ldr	r2, [pc, #324]	; (800283c <HAL_GPIO_Init+0x2e0>)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	089b      	lsrs	r3, r3, #2
 80026fa:	3302      	adds	r3, #2
 80026fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002700:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	f003 0303 	and.w	r3, r3, #3
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	220f      	movs	r2, #15
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4013      	ands	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a49      	ldr	r2, [pc, #292]	; (8002840 <HAL_GPIO_Init+0x2e4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d00d      	beq.n	800273c <HAL_GPIO_Init+0x1e0>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a48      	ldr	r2, [pc, #288]	; (8002844 <HAL_GPIO_Init+0x2e8>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <HAL_GPIO_Init+0x1dc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a47      	ldr	r2, [pc, #284]	; (8002848 <HAL_GPIO_Init+0x2ec>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d101      	bne.n	8002734 <HAL_GPIO_Init+0x1d8>
 8002730:	2302      	movs	r3, #2
 8002732:	e004      	b.n	800273e <HAL_GPIO_Init+0x1e2>
 8002734:	2303      	movs	r3, #3
 8002736:	e002      	b.n	800273e <HAL_GPIO_Init+0x1e2>
 8002738:	2301      	movs	r3, #1
 800273a:	e000      	b.n	800273e <HAL_GPIO_Init+0x1e2>
 800273c:	2300      	movs	r3, #0
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	f002 0203 	and.w	r2, r2, #3
 8002744:	0092      	lsls	r2, r2, #2
 8002746:	4093      	lsls	r3, r2
 8002748:	68fa      	ldr	r2, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800274e:	493b      	ldr	r1, [pc, #236]	; (800283c <HAL_GPIO_Init+0x2e0>)
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	089b      	lsrs	r3, r3, #2
 8002754:	3302      	adds	r3, #2
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d006      	beq.n	8002776 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002768:	4b38      	ldr	r3, [pc, #224]	; (800284c <HAL_GPIO_Init+0x2f0>)
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	4937      	ldr	r1, [pc, #220]	; (800284c <HAL_GPIO_Init+0x2f0>)
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4313      	orrs	r3, r2
 8002772:	608b      	str	r3, [r1, #8]
 8002774:	e006      	b.n	8002784 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002776:	4b35      	ldr	r3, [pc, #212]	; (800284c <HAL_GPIO_Init+0x2f0>)
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	43db      	mvns	r3, r3
 800277e:	4933      	ldr	r1, [pc, #204]	; (800284c <HAL_GPIO_Init+0x2f0>)
 8002780:	4013      	ands	r3, r2
 8002782:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d006      	beq.n	800279e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002790:	4b2e      	ldr	r3, [pc, #184]	; (800284c <HAL_GPIO_Init+0x2f0>)
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	492d      	ldr	r1, [pc, #180]	; (800284c <HAL_GPIO_Init+0x2f0>)
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	60cb      	str	r3, [r1, #12]
 800279c:	e006      	b.n	80027ac <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800279e:	4b2b      	ldr	r3, [pc, #172]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	43db      	mvns	r3, r3
 80027a6:	4929      	ldr	r1, [pc, #164]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80027b8:	4b24      	ldr	r3, [pc, #144]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4923      	ldr	r1, [pc, #140]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
 80027c4:	e006      	b.n	80027d4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027c6:	4b21      	ldr	r3, [pc, #132]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	491f      	ldr	r1, [pc, #124]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80027e0:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4919      	ldr	r1, [pc, #100]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	600b      	str	r3, [r1, #0]
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	4915      	ldr	r1, [pc, #84]	; (800284c <HAL_GPIO_Init+0x2f0>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	3301      	adds	r3, #1
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	fa22 f303 	lsr.w	r3, r2, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	f47f aeaf 	bne.w	8002570 <HAL_GPIO_Init+0x14>
  }
}
 8002812:	bf00      	nop
 8002814:	bf00      	nop
 8002816:	372c      	adds	r7, #44	; 0x2c
 8002818:	46bd      	mov	sp, r7
 800281a:	bc80      	pop	{r7}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	10320000 	.word	0x10320000
 8002824:	10310000 	.word	0x10310000
 8002828:	10220000 	.word	0x10220000
 800282c:	10210000 	.word	0x10210000
 8002830:	10120000 	.word	0x10120000
 8002834:	10110000 	.word	0x10110000
 8002838:	40021000 	.word	0x40021000
 800283c:	40010000 	.word	0x40010000
 8002840:	40010800 	.word	0x40010800
 8002844:	40010c00 	.word	0x40010c00
 8002848:	40011000 	.word	0x40011000
 800284c:	40010400 	.word	0x40010400

08002850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e001      	b.n	8002872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	bc80      	pop	{r7}
 800287c:	4770      	bx	lr

0800287e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
 8002886:	460b      	mov	r3, r1
 8002888:	807b      	strh	r3, [r7, #2]
 800288a:	4613      	mov	r3, r2
 800288c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800288e:	787b      	ldrb	r3, [r7, #1]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002894:	887a      	ldrh	r2, [r7, #2]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800289a:	e003      	b.n	80028a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800289c:	887b      	ldrh	r3, [r7, #2]
 800289e:	041a      	lsls	r2, r3, #16
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	611a      	str	r2, [r3, #16]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr

080028ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b085      	sub	sp, #20
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80028c0:	887a      	ldrh	r2, [r7, #2]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	041a      	lsls	r2, r3, #16
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	43d9      	mvns	r1, r3
 80028cc:	887b      	ldrh	r3, [r7, #2]
 80028ce:	400b      	ands	r3, r1
 80028d0:	431a      	orrs	r2, r3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	611a      	str	r2, [r3, #16]
}
 80028d6:	bf00      	nop
 80028d8:	3714      	adds	r7, #20
 80028da:	46bd      	mov	sp, r7
 80028dc:	bc80      	pop	{r7}
 80028de:	4770      	bx	lr

080028e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e26c      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8087 	beq.w	8002a0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002900:	4b92      	ldr	r3, [pc, #584]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f003 030c 	and.w	r3, r3, #12
 8002908:	2b04      	cmp	r3, #4
 800290a:	d00c      	beq.n	8002926 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800290c:	4b8f      	ldr	r3, [pc, #572]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b08      	cmp	r3, #8
 8002916:	d112      	bne.n	800293e <HAL_RCC_OscConfig+0x5e>
 8002918:	4b8c      	ldr	r3, [pc, #560]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002924:	d10b      	bne.n	800293e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002926:	4b89      	ldr	r3, [pc, #548]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d06c      	beq.n	8002a0c <HAL_RCC_OscConfig+0x12c>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d168      	bne.n	8002a0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e246      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x76>
 8002948:	4b80      	ldr	r3, [pc, #512]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a7f      	ldr	r2, [pc, #508]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 800294e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	e02e      	b.n	80029b4 <HAL_RCC_OscConfig+0xd4>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x98>
 800295e:	4b7b      	ldr	r3, [pc, #492]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a7a      	ldr	r2, [pc, #488]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b78      	ldr	r3, [pc, #480]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a77      	ldr	r2, [pc, #476]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002970:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e01d      	b.n	80029b4 <HAL_RCC_OscConfig+0xd4>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002980:	d10c      	bne.n	800299c <HAL_RCC_OscConfig+0xbc>
 8002982:	4b72      	ldr	r3, [pc, #456]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a71      	ldr	r2, [pc, #452]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800298c:	6013      	str	r3, [r2, #0]
 800298e:	4b6f      	ldr	r3, [pc, #444]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a6e      	ldr	r2, [pc, #440]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002998:	6013      	str	r3, [r2, #0]
 800299a:	e00b      	b.n	80029b4 <HAL_RCC_OscConfig+0xd4>
 800299c:	4b6b      	ldr	r3, [pc, #428]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a6a      	ldr	r2, [pc, #424]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 80029a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4b68      	ldr	r3, [pc, #416]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a67      	ldr	r2, [pc, #412]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 80029ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d013      	beq.n	80029e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029bc:	f7ff fcb6 	bl	800232c <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029c4:	f7ff fcb2 	bl	800232c <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b64      	cmp	r3, #100	; 0x64
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e1fa      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029d6:	4b5d      	ldr	r3, [pc, #372]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0xe4>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff fca2 	bl	800232c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029ec:	f7ff fc9e 	bl	800232c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e1e6      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029fe:	4b53      	ldr	r3, [pc, #332]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x10c>
 8002a0a:	e000      	b.n	8002a0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d063      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a1a:	4b4c      	ldr	r3, [pc, #304]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002a26:	4b49      	ldr	r3, [pc, #292]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b08      	cmp	r3, #8
 8002a30:	d11c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x18c>
 8002a32:	4b46      	ldr	r3, [pc, #280]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d116      	bne.n	8002a6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a3e:	4b43      	ldr	r3, [pc, #268]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d005      	beq.n	8002a56 <HAL_RCC_OscConfig+0x176>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d001      	beq.n	8002a56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e1ba      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a56:	4b3d      	ldr	r3, [pc, #244]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4939      	ldr	r1, [pc, #228]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6a:	e03a      	b.n	8002ae2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d020      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a74:	4b36      	ldr	r3, [pc, #216]	; (8002b50 <HAL_RCC_OscConfig+0x270>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7ff fc57 	bl	800232c <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a82:	f7ff fc53 	bl	800232c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e19b      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a94:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002aa0:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	00db      	lsls	r3, r3, #3
 8002aae:	4927      	ldr	r1, [pc, #156]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	600b      	str	r3, [r1, #0]
 8002ab4:	e015      	b.n	8002ae2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ab6:	4b26      	ldr	r3, [pc, #152]	; (8002b50 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002abc:	f7ff fc36 	bl	800232c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac4:	f7ff fc32 	bl	800232c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e17a      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ad6:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d03a      	beq.n	8002b64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d019      	beq.n	8002b2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afc:	f7ff fc16 	bl	800232c <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b04:	f7ff fc12 	bl	800232c <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e15a      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b16:	4b0d      	ldr	r3, [pc, #52]	; (8002b4c <HAL_RCC_OscConfig+0x26c>)
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0f0      	beq.n	8002b04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002b22:	2001      	movs	r0, #1
 8002b24:	f000 fa9a 	bl	800305c <RCC_Delay>
 8002b28:	e01c      	b.n	8002b64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_RCC_OscConfig+0x274>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b30:	f7ff fbfc 	bl	800232c <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b36:	e00f      	b.n	8002b58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b38:	f7ff fbf8 	bl	800232c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d908      	bls.n	8002b58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e140      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	42420000 	.word	0x42420000
 8002b54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	4b9e      	ldr	r3, [pc, #632]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1e9      	bne.n	8002b38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 80a6 	beq.w	8002cbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b76:	4b97      	ldr	r3, [pc, #604]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10d      	bne.n	8002b9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	4b94      	ldr	r3, [pc, #592]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	4a93      	ldr	r2, [pc, #588]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b8c:	61d3      	str	r3, [r2, #28]
 8002b8e:	4b91      	ldr	r3, [pc, #580]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b9e:	4b8e      	ldr	r3, [pc, #568]	; (8002dd8 <HAL_RCC_OscConfig+0x4f8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d118      	bne.n	8002bdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002baa:	4b8b      	ldr	r3, [pc, #556]	; (8002dd8 <HAL_RCC_OscConfig+0x4f8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a8a      	ldr	r2, [pc, #552]	; (8002dd8 <HAL_RCC_OscConfig+0x4f8>)
 8002bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bb6:	f7ff fbb9 	bl	800232c <HAL_GetTick>
 8002bba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bbe:	f7ff fbb5 	bl	800232c <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b64      	cmp	r3, #100	; 0x64
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e0fd      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd0:	4b81      	ldr	r3, [pc, #516]	; (8002dd8 <HAL_RCC_OscConfig+0x4f8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0f0      	beq.n	8002bbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d106      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x312>
 8002be4:	4b7b      	ldr	r3, [pc, #492]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	4a7a      	ldr	r2, [pc, #488]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bea:	f043 0301 	orr.w	r3, r3, #1
 8002bee:	6213      	str	r3, [r2, #32]
 8002bf0:	e02d      	b.n	8002c4e <HAL_RCC_OscConfig+0x36e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10c      	bne.n	8002c14 <HAL_RCC_OscConfig+0x334>
 8002bfa:	4b76      	ldr	r3, [pc, #472]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002bfc:	6a1b      	ldr	r3, [r3, #32]
 8002bfe:	4a75      	ldr	r2, [pc, #468]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c00:	f023 0301 	bic.w	r3, r3, #1
 8002c04:	6213      	str	r3, [r2, #32]
 8002c06:	4b73      	ldr	r3, [pc, #460]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4a72      	ldr	r2, [pc, #456]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c0c:	f023 0304 	bic.w	r3, r3, #4
 8002c10:	6213      	str	r3, [r2, #32]
 8002c12:	e01c      	b.n	8002c4e <HAL_RCC_OscConfig+0x36e>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d10c      	bne.n	8002c36 <HAL_RCC_OscConfig+0x356>
 8002c1c:	4b6d      	ldr	r3, [pc, #436]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c1e:	6a1b      	ldr	r3, [r3, #32]
 8002c20:	4a6c      	ldr	r2, [pc, #432]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	6213      	str	r3, [r2, #32]
 8002c28:	4b6a      	ldr	r3, [pc, #424]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	4a69      	ldr	r2, [pc, #420]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6213      	str	r3, [r2, #32]
 8002c34:	e00b      	b.n	8002c4e <HAL_RCC_OscConfig+0x36e>
 8002c36:	4b67      	ldr	r3, [pc, #412]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	4a66      	ldr	r2, [pc, #408]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6213      	str	r3, [r2, #32]
 8002c42:	4b64      	ldr	r3, [pc, #400]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a63      	ldr	r2, [pc, #396]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d015      	beq.n	8002c82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c56:	f7ff fb69 	bl	800232c <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7ff fb65 	bl	800232c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0ab      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	4b57      	ldr	r3, [pc, #348]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ee      	beq.n	8002c5e <HAL_RCC_OscConfig+0x37e>
 8002c80:	e014      	b.n	8002cac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7ff fb53 	bl	800232c <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7ff fb4f 	bl	800232c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e095      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca0:	4b4c      	ldr	r3, [pc, #304]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002ca2:	6a1b      	ldr	r3, [r3, #32]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ee      	bne.n	8002c8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d105      	bne.n	8002cbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb2:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4a47      	ldr	r2, [pc, #284]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8081 	beq.w	8002dca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cc8:	4b42      	ldr	r3, [pc, #264]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d061      	beq.n	8002d98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d146      	bne.n	8002d6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cdc:	4b3f      	ldr	r3, [pc, #252]	; (8002ddc <HAL_RCC_OscConfig+0x4fc>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7ff fb23 	bl	800232c <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cea:	f7ff fb1f 	bl	800232c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e067      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cfc:	4b35      	ldr	r3, [pc, #212]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a1b      	ldr	r3, [r3, #32]
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d108      	bne.n	8002d24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d12:	4b30      	ldr	r3, [pc, #192]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	492d      	ldr	r1, [pc, #180]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d24:	4b2b      	ldr	r3, [pc, #172]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a19      	ldr	r1, [r3, #32]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	430b      	orrs	r3, r1
 8002d36:	4927      	ldr	r1, [pc, #156]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d3c:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_OscConfig+0x4fc>)
 8002d3e:	2201      	movs	r2, #1
 8002d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d42:	f7ff faf3 	bl	800232c <HAL_GetTick>
 8002d46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d48:	e008      	b.n	8002d5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d4a:	f7ff faef 	bl	800232c <HAL_GetTick>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	1ad3      	subs	r3, r2, r3
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d901      	bls.n	8002d5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e037      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d0f0      	beq.n	8002d4a <HAL_RCC_OscConfig+0x46a>
 8002d68:	e02f      	b.n	8002dca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d6a:	4b1c      	ldr	r3, [pc, #112]	; (8002ddc <HAL_RCC_OscConfig+0x4fc>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d70:	f7ff fadc 	bl	800232c <HAL_GetTick>
 8002d74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d76:	e008      	b.n	8002d8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d78:	f7ff fad8 	bl	800232c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e020      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d8a:	4b12      	ldr	r3, [pc, #72]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1f0      	bne.n	8002d78 <HAL_RCC_OscConfig+0x498>
 8002d96:	e018      	b.n	8002dca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d101      	bne.n	8002da4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e013      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002da4:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <HAL_RCC_OscConfig+0x4f4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d106      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e000      	b.n	8002dcc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	42420060 	.word	0x42420060

08002de0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d101      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0d0      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d910      	bls.n	8002e24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e02:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 0207 	bic.w	r2, r3, #7
 8002e0a:	4965      	ldr	r1, [pc, #404]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e12:	4b63      	ldr	r3, [pc, #396]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b8      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0302 	and.w	r3, r3, #2
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e3c:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	4a58      	ldr	r2, [pc, #352]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002e46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0308 	and.w	r3, r3, #8
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e54:	4b53      	ldr	r3, [pc, #332]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	4a52      	ldr	r2, [pc, #328]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002e5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e60:	4b50      	ldr	r3, [pc, #320]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	494d      	ldr	r1, [pc, #308]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d040      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e86:	4b47      	ldr	r3, [pc, #284]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d115      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e07f      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d107      	bne.n	8002eae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e9e:	4b41      	ldr	r3, [pc, #260]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e073      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eae:	4b3d      	ldr	r3, [pc, #244]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e06b      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ebe:	4b39      	ldr	r3, [pc, #228]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f023 0203 	bic.w	r2, r3, #3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	4936      	ldr	r1, [pc, #216]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ed0:	f7ff fa2c 	bl	800232c <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed6:	e00a      	b.n	8002eee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f7ff fa28 	bl	800232c <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eea:	2303      	movs	r3, #3
 8002eec:	e053      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eee:	4b2d      	ldr	r3, [pc, #180]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f003 020c 	and.w	r2, r3, #12
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d1eb      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f00:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d210      	bcs.n	8002f30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f023 0207 	bic.w	r2, r3, #7
 8002f16:	4922      	ldr	r1, [pc, #136]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f1e:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCC_ClockConfig+0x1c0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d001      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e032      	b.n	8002f96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0304 	and.w	r3, r3, #4
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	4916      	ldr	r1, [pc, #88]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0308 	and.w	r3, r3, #8
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d009      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f5a:	4b12      	ldr	r3, [pc, #72]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	00db      	lsls	r3, r3, #3
 8002f68:	490e      	ldr	r1, [pc, #56]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f6e:	f000 f821 	bl	8002fb4 <HAL_RCC_GetSysClockFreq>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b0b      	ldr	r3, [pc, #44]	; (8002fa4 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	091b      	lsrs	r3, r3, #4
 8002f7a:	f003 030f 	and.w	r3, r3, #15
 8002f7e:	490a      	ldr	r1, [pc, #40]	; (8002fa8 <HAL_RCC_ClockConfig+0x1c8>)
 8002f80:	5ccb      	ldrb	r3, [r1, r3]
 8002f82:	fa22 f303 	lsr.w	r3, r2, r3
 8002f86:	4a09      	ldr	r2, [pc, #36]	; (8002fac <HAL_RCC_ClockConfig+0x1cc>)
 8002f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff f98a 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40022000 	.word	0x40022000
 8002fa4:	40021000 	.word	0x40021000
 8002fa8:	080038c0 	.word	0x080038c0
 8002fac:	20000074 	.word	0x20000074
 8002fb0:	20000078 	.word	0x20000078

08002fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b087      	sub	sp, #28
 8002fb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002fce:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <HAL_RCC_GetSysClockFreq+0x94>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 030c 	and.w	r3, r3, #12
 8002fda:	2b04      	cmp	r3, #4
 8002fdc:	d002      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x30>
 8002fde:	2b08      	cmp	r3, #8
 8002fe0:	d003      	beq.n	8002fea <HAL_RCC_GetSysClockFreq+0x36>
 8002fe2:	e027      	b.n	8003034 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fe4:	4b19      	ldr	r3, [pc, #100]	; (800304c <HAL_RCC_GetSysClockFreq+0x98>)
 8002fe6:	613b      	str	r3, [r7, #16]
      break;
 8002fe8:	e027      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	0c9b      	lsrs	r3, r3, #18
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002ff4:	5cd3      	ldrb	r3, [r2, r3]
 8002ff6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d010      	beq.n	8003024 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <HAL_RCC_GetSysClockFreq+0x94>)
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	0c5b      	lsrs	r3, r3, #17
 8003008:	f003 0301 	and.w	r3, r3, #1
 800300c:	4a11      	ldr	r2, [pc, #68]	; (8003054 <HAL_RCC_GetSysClockFreq+0xa0>)
 800300e:	5cd3      	ldrb	r3, [r2, r3]
 8003010:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a0d      	ldr	r2, [pc, #52]	; (800304c <HAL_RCC_GetSysClockFreq+0x98>)
 8003016:	fb02 f203 	mul.w	r2, r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	e004      	b.n	800302e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a0c      	ldr	r2, [pc, #48]	; (8003058 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003028:	fb02 f303 	mul.w	r3, r2, r3
 800302c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	613b      	str	r3, [r7, #16]
      break;
 8003032:	e002      	b.n	800303a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b05      	ldr	r3, [pc, #20]	; (800304c <HAL_RCC_GetSysClockFreq+0x98>)
 8003036:	613b      	str	r3, [r7, #16]
      break;
 8003038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800303a:	693b      	ldr	r3, [r7, #16]
}
 800303c:	4618      	mov	r0, r3
 800303e:	371c      	adds	r7, #28
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	007a1200 	.word	0x007a1200
 8003050:	080038d0 	.word	0x080038d0
 8003054:	080038e0 	.word	0x080038e0
 8003058:	003d0900 	.word	0x003d0900

0800305c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800305c:	b480      	push	{r7}
 800305e:	b085      	sub	sp, #20
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003064:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <RCC_Delay+0x34>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a0a      	ldr	r2, [pc, #40]	; (8003094 <RCC_Delay+0x38>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	0a5b      	lsrs	r3, r3, #9
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003078:	bf00      	nop
  }
  while (Delay --);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	1e5a      	subs	r2, r3, #1
 800307e:	60fa      	str	r2, [r7, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1f9      	bne.n	8003078 <RCC_Delay+0x1c>
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr
 8003090:	20000074 	.word	0x20000074
 8003094:	10624dd3 	.word	0x10624dd3

08003098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e041      	b.n	800312e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d106      	bne.n	80030c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff f85a 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2202      	movs	r2, #2
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	3304      	adds	r3, #4
 80030d4:	4619      	mov	r1, r3
 80030d6:	4610      	mov	r0, r2
 80030d8:	f000 fa56 	bl	8003588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
	...

08003138 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b01      	cmp	r3, #1
 800314a:	d001      	beq.n	8003150 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e035      	b.n	80031bc <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a16      	ldr	r2, [pc, #88]	; (80031c8 <HAL_TIM_Base_Start_IT+0x90>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d009      	beq.n	8003186 <HAL_TIM_Base_Start_IT+0x4e>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800317a:	d004      	beq.n	8003186 <HAL_TIM_Base_Start_IT+0x4e>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a12      	ldr	r2, [pc, #72]	; (80031cc <HAL_TIM_Base_Start_IT+0x94>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d111      	bne.n	80031aa <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2b06      	cmp	r3, #6
 8003196:	d010      	beq.n	80031ba <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a8:	e007      	b.n	80031ba <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031ba:	2300      	movs	r3, #0
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr
 80031c6:	bf00      	nop
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40000400 	.word	0x40000400

080031d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d020      	beq.n	8003234 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d01b      	beq.n	8003234 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f06f 0202 	mvn.w	r2, #2
 8003204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f998 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8003220:	e005      	b.n	800322e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f98b 	bl	800353e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f99a 	bl	8003562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 0304 	and.w	r3, r3, #4
 800323a:	2b00      	cmp	r3, #0
 800323c:	d020      	beq.n	8003280 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	2b00      	cmp	r3, #0
 8003246:	d01b      	beq.n	8003280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f06f 0204 	mvn.w	r2, #4
 8003250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2202      	movs	r2, #2
 8003256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003262:	2b00      	cmp	r3, #0
 8003264:	d003      	beq.n	800326e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f972 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 800326c:	e005      	b.n	800327a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f965 	bl	800353e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f974 	bl	8003562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d020      	beq.n	80032cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01b      	beq.n	80032cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0208 	mvn.w	r2, #8
 800329c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2204      	movs	r2, #4
 80032a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f94c 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 80032b8:	e005      	b.n	80032c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f93f 	bl	800353e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f94e 	bl	8003562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0310 	and.w	r3, r3, #16
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d020      	beq.n	8003318 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01b      	beq.n	8003318 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0210 	mvn.w	r2, #16
 80032e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2208      	movs	r2, #8
 80032ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f000 f926 	bl	8003550 <HAL_TIM_IC_CaptureCallback>
 8003304:	e005      	b.n	8003312 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f919 	bl	800353e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f928 	bl	8003562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	f003 0301 	and.w	r3, r3, #1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00c      	beq.n	800333c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0201 	mvn.w	r2, #1
 8003334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f7fe fd62 	bl	8001e00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00c      	beq.n	8003360 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 fa6f 	bl	800383e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00c      	beq.n	8003384 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003370:	2b00      	cmp	r3, #0
 8003372:	d007      	beq.n	8003384 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800337c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f8f8 	bl	8003574 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00c      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0320 	and.w	r3, r3, #32
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0220 	mvn.w	r2, #32
 80033a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fa42 	bl	800382c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033ba:	2300      	movs	r3, #0
 80033bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_TIM_ConfigClockSource+0x1c>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e0b4      	b.n	8003536 <HAL_TIM_ConfigClockSource+0x186>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2201      	movs	r2, #1
 80033d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2202      	movs	r2, #2
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003404:	d03e      	beq.n	8003484 <HAL_TIM_ConfigClockSource+0xd4>
 8003406:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800340a:	f200 8087 	bhi.w	800351c <HAL_TIM_ConfigClockSource+0x16c>
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	f000 8086 	beq.w	8003522 <HAL_TIM_ConfigClockSource+0x172>
 8003416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341a:	d87f      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 800341c:	2b70      	cmp	r3, #112	; 0x70
 800341e:	d01a      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0xa6>
 8003420:	2b70      	cmp	r3, #112	; 0x70
 8003422:	d87b      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 8003424:	2b60      	cmp	r3, #96	; 0x60
 8003426:	d050      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0x11a>
 8003428:	2b60      	cmp	r3, #96	; 0x60
 800342a:	d877      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 800342c:	2b50      	cmp	r3, #80	; 0x50
 800342e:	d03c      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0xfa>
 8003430:	2b50      	cmp	r3, #80	; 0x50
 8003432:	d873      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 8003434:	2b40      	cmp	r3, #64	; 0x40
 8003436:	d058      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x13a>
 8003438:	2b40      	cmp	r3, #64	; 0x40
 800343a:	d86f      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b30      	cmp	r3, #48	; 0x30
 800343e:	d064      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x15a>
 8003440:	2b30      	cmp	r3, #48	; 0x30
 8003442:	d86b      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b20      	cmp	r3, #32
 8003446:	d060      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x15a>
 8003448:	2b20      	cmp	r3, #32
 800344a:	d867      	bhi.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b00      	cmp	r3, #0
 800344e:	d05c      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x15a>
 8003450:	2b10      	cmp	r3, #16
 8003452:	d05a      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x15a>
 8003454:	e062      	b.n	800351c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6899      	ldr	r1, [r3, #8]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	f000 f96a 	bl	800373e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003478:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68ba      	ldr	r2, [r7, #8]
 8003480:	609a      	str	r2, [r3, #8]
      break;
 8003482:	e04f      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	6899      	ldr	r1, [r3, #8]
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685a      	ldr	r2, [r3, #4]
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f000 f953 	bl	800373e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034a6:	609a      	str	r2, [r3, #8]
      break;
 80034a8:	e03c      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6818      	ldr	r0, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f000 f8ca 	bl	8003650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2150      	movs	r1, #80	; 0x50
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f921 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 80034c8:	e02c      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 f8e8 	bl	80036ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2160      	movs	r1, #96	; 0x60
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 f911 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 80034e8:	e01c      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 f8aa 	bl	8003650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2140      	movs	r1, #64	; 0x40
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f901 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 8003508:	e00c      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4619      	mov	r1, r3
 8003514:	4610      	mov	r0, r2
 8003516:	f000 f8f8 	bl	800370a <TIM_ITRx_SetConfig>
      break;
 800351a:	e003      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	73fb      	strb	r3, [r7, #15]
      break;
 8003520:	e000      	b.n	8003524 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003522:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003546:	bf00      	nop
 8003548:	370c      	adds	r7, #12
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	bc80      	pop	{r7}
 8003560:	4770      	bx	lr

08003562 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003562:	b480      	push	{r7}
 8003564:	b083      	sub	sp, #12
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr

08003574 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr
	...

08003588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a2b      	ldr	r2, [pc, #172]	; (8003648 <TIM_Base_SetConfig+0xc0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d007      	beq.n	80035b0 <TIM_Base_SetConfig+0x28>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a6:	d003      	beq.n	80035b0 <TIM_Base_SetConfig+0x28>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a28      	ldr	r2, [pc, #160]	; (800364c <TIM_Base_SetConfig+0xc4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d108      	bne.n	80035c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	4313      	orrs	r3, r2
 80035c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a20      	ldr	r2, [pc, #128]	; (8003648 <TIM_Base_SetConfig+0xc0>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d007      	beq.n	80035da <TIM_Base_SetConfig+0x52>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d0:	d003      	beq.n	80035da <TIM_Base_SetConfig+0x52>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a1d      	ldr	r2, [pc, #116]	; (800364c <TIM_Base_SetConfig+0xc4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d108      	bne.n	80035ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68fa      	ldr	r2, [r7, #12]
 80035fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a0d      	ldr	r2, [pc, #52]	; (8003648 <TIM_Base_SetConfig+0xc0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d103      	bne.n	8003620 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f023 0201 	bic.w	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	611a      	str	r2, [r3, #16]
  }
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bc80      	pop	{r7}
 8003646:	4770      	bx	lr
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40000400 	.word	0x40000400

08003650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003650:	b480      	push	{r7}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	f023 0201 	bic.w	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800367a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	f023 030a 	bic.w	r3, r3, #10
 800368c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4313      	orrs	r3, r2
 8003694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	697a      	ldr	r2, [r7, #20]
 80036a0:	621a      	str	r2, [r3, #32]
}
 80036a2:	bf00      	nop
 80036a4:	371c      	adds	r7, #28
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bc80      	pop	{r7}
 80036aa:	4770      	bx	lr

080036ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b087      	sub	sp, #28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	f023 0210 	bic.w	r2, r3, #16
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	699b      	ldr	r3, [r3, #24]
 80036ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	031b      	lsls	r3, r3, #12
 80036dc:	693a      	ldr	r2, [r7, #16]
 80036de:	4313      	orrs	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	693a      	ldr	r2, [r7, #16]
 80036f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	621a      	str	r2, [r3, #32]
}
 8003700:	bf00      	nop
 8003702:	371c      	adds	r7, #28
 8003704:	46bd      	mov	sp, r7
 8003706:	bc80      	pop	{r7}
 8003708:	4770      	bx	lr

0800370a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800370a:	b480      	push	{r7}
 800370c:	b085      	sub	sp, #20
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003722:	683a      	ldr	r2, [r7, #0]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4313      	orrs	r3, r2
 8003728:	f043 0307 	orr.w	r3, r3, #7
 800372c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	609a      	str	r2, [r3, #8]
}
 8003734:	bf00      	nop
 8003736:	3714      	adds	r7, #20
 8003738:	46bd      	mov	sp, r7
 800373a:	bc80      	pop	{r7}
 800373c:	4770      	bx	lr

0800373e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800373e:	b480      	push	{r7}
 8003740:	b087      	sub	sp, #28
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003758:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	021a      	lsls	r2, r3, #8
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	431a      	orrs	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4313      	orrs	r3, r2
 8003766:	697a      	ldr	r2, [r7, #20]
 8003768:	4313      	orrs	r3, r2
 800376a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	609a      	str	r2, [r3, #8]
}
 8003772:	bf00      	nop
 8003774:	371c      	adds	r7, #28
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr

0800377c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003790:	2302      	movs	r3, #2
 8003792:	e041      	b.n	8003818 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2202      	movs	r2, #2
 80037a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a14      	ldr	r2, [pc, #80]	; (8003824 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d009      	beq.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e0:	d004      	beq.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a10      	ldr	r2, [pc, #64]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d10c      	bne.n	8003806 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	40012c00 	.word	0x40012c00
 8003828:	40000400 	.word	0x40000400

0800382c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800383e:	b480      	push	{r7}
 8003840:	b083      	sub	sp, #12
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <__libc_init_array>:
 8003850:	b570      	push	{r4, r5, r6, lr}
 8003852:	2600      	movs	r6, #0
 8003854:	4d0c      	ldr	r5, [pc, #48]	; (8003888 <__libc_init_array+0x38>)
 8003856:	4c0d      	ldr	r4, [pc, #52]	; (800388c <__libc_init_array+0x3c>)
 8003858:	1b64      	subs	r4, r4, r5
 800385a:	10a4      	asrs	r4, r4, #2
 800385c:	42a6      	cmp	r6, r4
 800385e:	d109      	bne.n	8003874 <__libc_init_array+0x24>
 8003860:	f000 f822 	bl	80038a8 <_init>
 8003864:	2600      	movs	r6, #0
 8003866:	4d0a      	ldr	r5, [pc, #40]	; (8003890 <__libc_init_array+0x40>)
 8003868:	4c0a      	ldr	r4, [pc, #40]	; (8003894 <__libc_init_array+0x44>)
 800386a:	1b64      	subs	r4, r4, r5
 800386c:	10a4      	asrs	r4, r4, #2
 800386e:	42a6      	cmp	r6, r4
 8003870:	d105      	bne.n	800387e <__libc_init_array+0x2e>
 8003872:	bd70      	pop	{r4, r5, r6, pc}
 8003874:	f855 3b04 	ldr.w	r3, [r5], #4
 8003878:	4798      	blx	r3
 800387a:	3601      	adds	r6, #1
 800387c:	e7ee      	b.n	800385c <__libc_init_array+0xc>
 800387e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003882:	4798      	blx	r3
 8003884:	3601      	adds	r6, #1
 8003886:	e7f2      	b.n	800386e <__libc_init_array+0x1e>
 8003888:	080038e4 	.word	0x080038e4
 800388c:	080038e4 	.word	0x080038e4
 8003890:	080038e4 	.word	0x080038e4
 8003894:	080038e8 	.word	0x080038e8

08003898 <memset>:
 8003898:	4603      	mov	r3, r0
 800389a:	4402      	add	r2, r0
 800389c:	4293      	cmp	r3, r2
 800389e:	d100      	bne.n	80038a2 <memset+0xa>
 80038a0:	4770      	bx	lr
 80038a2:	f803 1b01 	strb.w	r1, [r3], #1
 80038a6:	e7f9      	b.n	800389c <memset+0x4>

080038a8 <_init>:
 80038a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038aa:	bf00      	nop
 80038ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ae:	bc08      	pop	{r3}
 80038b0:	469e      	mov	lr, r3
 80038b2:	4770      	bx	lr

080038b4 <_fini>:
 80038b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038b6:	bf00      	nop
 80038b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ba:	bc08      	pop	{r3}
 80038bc:	469e      	mov	lr, r3
 80038be:	4770      	bx	lr
