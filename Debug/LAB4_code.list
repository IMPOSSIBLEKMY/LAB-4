
LAB4_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038a8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080039b4  080039b4  000139b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039d8  080039d8  00020088  2**0
                  CONTENTS
  4 .ARM          00000000  080039d8  080039d8  00020088  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039d8  080039d8  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039d8  080039d8  000139d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039dc  080039dc  000139dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080039e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e4  20000088  08003a68  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  08003a68  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f9  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b57  00000000  00000000  000298aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  0002b408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000980  00000000  00000000  0002be80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c46  00000000  00000000  0002c800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bdfb  00000000  00000000  00043446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082814  00000000  00000000  0004f241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1a55  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  000d1aa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	0800399c 	.word	0x0800399c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	0800399c 	.word	0x0800399c

0800014c <display7SEGFinal>:

int EN_horizontal = 0;
int EN_vertical = 0;

void display7SEGFinal()
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	display7SEGFinalhorizontal();
 8000150:	f000 fc80 	bl	8000a54 <display7SEGFinalhorizontal>

	display7SEGFinalvertical();
 8000154:	f000 fbf2 	bl	800093c <display7SEGFinalvertical>
}
 8000158:	bf00      	nop
 800015a:	bd80      	pop	{r7, pc}

0800015c <display7SEGvertical>:

void display7SEGvertical(int num)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	2b09      	cmp	r3, #9
 8000168:	f200 81b2 	bhi.w	80004d0 <display7SEGvertical+0x374>
 800016c:	a201      	add	r2, pc, #4	; (adr r2, 8000174 <display7SEGvertical+0x18>)
 800016e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000172:	bf00      	nop
 8000174:	0800019d 	.word	0x0800019d
 8000178:	080001ef 	.word	0x080001ef
 800017c:	08000241 	.word	0x08000241
 8000180:	08000293 	.word	0x08000293
 8000184:	080002e5 	.word	0x080002e5
 8000188:	08000337 	.word	0x08000337
 800018c:	08000389 	.word	0x08000389
 8000190:	080003db 	.word	0x080003db
 8000194:	0800042d 	.word	0x0800042d
 8000198:	0800047f 	.word	0x0800047f
	switch(num)
	{
	    case 0:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2140      	movs	r1, #64	; 0x40
 80001a0:	48cd      	ldr	r0, [pc, #820]	; (80004d8 <display7SEGvertical+0x37c>)
 80001a2:	f002 fbe6 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80001a6:	2200      	movs	r2, #0
 80001a8:	2180      	movs	r1, #128	; 0x80
 80001aa:	48cb      	ldr	r0, [pc, #812]	; (80004d8 <display7SEGvertical+0x37c>)
 80001ac:	f002 fbe1 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001b6:	48c8      	ldr	r0, [pc, #800]	; (80004d8 <display7SEGvertical+0x37c>)
 80001b8:	f002 fbdb 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001c2:	48c5      	ldr	r0, [pc, #788]	; (80004d8 <display7SEGvertical+0x37c>)
 80001c4:	f002 fbd5 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80001ce:	48c2      	ldr	r0, [pc, #776]	; (80004d8 <display7SEGvertical+0x37c>)
 80001d0:	f002 fbcf 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80001d4:	2200      	movs	r2, #0
 80001d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001da:	48bf      	ldr	r0, [pc, #764]	; (80004d8 <display7SEGvertical+0x37c>)
 80001dc:	f002 fbc9 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 80001e0:	2201      	movs	r2, #1
 80001e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001e6:	48bc      	ldr	r0, [pc, #752]	; (80004d8 <display7SEGvertical+0x37c>)
 80001e8:	f002 fbc3 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 80001ec:	e170      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 1:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80001ee:	2201      	movs	r2, #1
 80001f0:	2140      	movs	r1, #64	; 0x40
 80001f2:	48b9      	ldr	r0, [pc, #740]	; (80004d8 <display7SEGvertical+0x37c>)
 80001f4:	f002 fbbd 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	2180      	movs	r1, #128	; 0x80
 80001fc:	48b6      	ldr	r0, [pc, #728]	; (80004d8 <display7SEGvertical+0x37c>)
 80001fe:	f002 fbb8 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000208:	48b3      	ldr	r0, [pc, #716]	; (80004d8 <display7SEGvertical+0x37c>)
 800020a:	f002 fbb2 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 800020e:	2201      	movs	r2, #1
 8000210:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000214:	48b0      	ldr	r0, [pc, #704]	; (80004d8 <display7SEGvertical+0x37c>)
 8000216:	f002 fbac 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 800021a:	2201      	movs	r2, #1
 800021c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000220:	48ad      	ldr	r0, [pc, #692]	; (80004d8 <display7SEGvertical+0x37c>)
 8000222:	f002 fba6 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000226:	2201      	movs	r2, #1
 8000228:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800022c:	48aa      	ldr	r0, [pc, #680]	; (80004d8 <display7SEGvertical+0x37c>)
 800022e:	f002 fba0 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 8000232:	2201      	movs	r2, #1
 8000234:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000238:	48a7      	ldr	r0, [pc, #668]	; (80004d8 <display7SEGvertical+0x37c>)
 800023a:	f002 fb9a 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 800023e:	e147      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 2:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	48a4      	ldr	r0, [pc, #656]	; (80004d8 <display7SEGvertical+0x37c>)
 8000246:	f002 fb94 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	2180      	movs	r1, #128	; 0x80
 800024e:	48a2      	ldr	r0, [pc, #648]	; (80004d8 <display7SEGvertical+0x37c>)
 8000250:	f002 fb8f 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_SET);
 8000254:	2201      	movs	r2, #1
 8000256:	f44f 7180 	mov.w	r1, #256	; 0x100
 800025a:	489f      	ldr	r0, [pc, #636]	; (80004d8 <display7SEGvertical+0x37c>)
 800025c:	f002 fb89 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000266:	489c      	ldr	r0, [pc, #624]	; (80004d8 <display7SEGvertical+0x37c>)
 8000268:	f002 fb83 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000272:	4899      	ldr	r0, [pc, #612]	; (80004d8 <display7SEGvertical+0x37c>)
 8000274:	f002 fb7d 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000278:	2201      	movs	r2, #1
 800027a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800027e:	4896      	ldr	r0, [pc, #600]	; (80004d8 <display7SEGvertical+0x37c>)
 8000280:	f002 fb77 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800028a:	4893      	ldr	r0, [pc, #588]	; (80004d8 <display7SEGvertical+0x37c>)
 800028c:	f002 fb71 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 8000290:	e11e      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 3:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000292:	2200      	movs	r2, #0
 8000294:	2140      	movs	r1, #64	; 0x40
 8000296:	4890      	ldr	r0, [pc, #576]	; (80004d8 <display7SEGvertical+0x37c>)
 8000298:	f002 fb6b 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 800029c:	2200      	movs	r2, #0
 800029e:	2180      	movs	r1, #128	; 0x80
 80002a0:	488d      	ldr	r0, [pc, #564]	; (80004d8 <display7SEGvertical+0x37c>)
 80002a2:	f002 fb66 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002ac:	488a      	ldr	r0, [pc, #552]	; (80004d8 <display7SEGvertical+0x37c>)
 80002ae:	f002 fb60 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b8:	4887      	ldr	r0, [pc, #540]	; (80004d8 <display7SEGvertical+0x37c>)
 80002ba:	f002 fb5a 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002c4:	4884      	ldr	r0, [pc, #528]	; (80004d8 <display7SEGvertical+0x37c>)
 80002c6:	f002 fb54 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002d0:	4881      	ldr	r0, [pc, #516]	; (80004d8 <display7SEGvertical+0x37c>)
 80002d2:	f002 fb4e 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002dc:	487e      	ldr	r0, [pc, #504]	; (80004d8 <display7SEGvertical+0x37c>)
 80002de:	f002 fb48 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 80002e2:	e0f5      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 4:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	2140      	movs	r1, #64	; 0x40
 80002e8:	487b      	ldr	r0, [pc, #492]	; (80004d8 <display7SEGvertical+0x37c>)
 80002ea:	f002 fb42 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80002ee:	2200      	movs	r2, #0
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	4879      	ldr	r0, [pc, #484]	; (80004d8 <display7SEGvertical+0x37c>)
 80002f4:	f002 fb3d 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002fe:	4876      	ldr	r0, [pc, #472]	; (80004d8 <display7SEGvertical+0x37c>)
 8000300:	f002 fb37 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 8000304:	2201      	movs	r2, #1
 8000306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800030a:	4873      	ldr	r0, [pc, #460]	; (80004d8 <display7SEGvertical+0x37c>)
 800030c:	f002 fb31 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000310:	2201      	movs	r2, #1
 8000312:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000316:	4870      	ldr	r0, [pc, #448]	; (80004d8 <display7SEGvertical+0x37c>)
 8000318:	f002 fb2b 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800031c:	2200      	movs	r2, #0
 800031e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000322:	486d      	ldr	r0, [pc, #436]	; (80004d8 <display7SEGvertical+0x37c>)
 8000324:	f002 fb25 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800032e:	486a      	ldr	r0, [pc, #424]	; (80004d8 <display7SEGvertical+0x37c>)
 8000330:	f002 fb1f 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 8000334:	e0cc      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 5:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000336:	2200      	movs	r2, #0
 8000338:	2140      	movs	r1, #64	; 0x40
 800033a:	4867      	ldr	r0, [pc, #412]	; (80004d8 <display7SEGvertical+0x37c>)
 800033c:	f002 fb19 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000340:	2201      	movs	r2, #1
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	4864      	ldr	r0, [pc, #400]	; (80004d8 <display7SEGvertical+0x37c>)
 8000346:	f002 fb14 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800034a:	2200      	movs	r2, #0
 800034c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000350:	4861      	ldr	r0, [pc, #388]	; (80004d8 <display7SEGvertical+0x37c>)
 8000352:	f002 fb0e 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 8000356:	2200      	movs	r2, #0
 8000358:	f44f 7100 	mov.w	r1, #512	; 0x200
 800035c:	485e      	ldr	r0, [pc, #376]	; (80004d8 <display7SEGvertical+0x37c>)
 800035e:	f002 fb08 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000362:	2201      	movs	r2, #1
 8000364:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000368:	485b      	ldr	r0, [pc, #364]	; (80004d8 <display7SEGvertical+0x37c>)
 800036a:	f002 fb02 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000374:	4858      	ldr	r0, [pc, #352]	; (80004d8 <display7SEGvertical+0x37c>)
 8000376:	f002 fafc 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000380:	4855      	ldr	r0, [pc, #340]	; (80004d8 <display7SEGvertical+0x37c>)
 8000382:	f002 faf6 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 8000386:	e0a3      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 6:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 8000388:	2200      	movs	r2, #0
 800038a:	2140      	movs	r1, #64	; 0x40
 800038c:	4852      	ldr	r0, [pc, #328]	; (80004d8 <display7SEGvertical+0x37c>)
 800038e:	f002 faf0 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_SET);
 8000392:	2201      	movs	r2, #1
 8000394:	2180      	movs	r1, #128	; 0x80
 8000396:	4850      	ldr	r0, [pc, #320]	; (80004d8 <display7SEGvertical+0x37c>)
 8000398:	f002 faeb 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a2:	484d      	ldr	r0, [pc, #308]	; (80004d8 <display7SEGvertical+0x37c>)
 80003a4:	f002 fae5 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003ae:	484a      	ldr	r0, [pc, #296]	; (80004d8 <display7SEGvertical+0x37c>)
 80003b0:	f002 fadf 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003ba:	4847      	ldr	r0, [pc, #284]	; (80004d8 <display7SEGvertical+0x37c>)
 80003bc:	f002 fad9 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003c6:	4844      	ldr	r0, [pc, #272]	; (80004d8 <display7SEGvertical+0x37c>)
 80003c8:	f002 fad3 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80003d2:	4841      	ldr	r0, [pc, #260]	; (80004d8 <display7SEGvertical+0x37c>)
 80003d4:	f002 facd 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 80003d8:	e07a      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 7:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 80003da:	2200      	movs	r2, #0
 80003dc:	2140      	movs	r1, #64	; 0x40
 80003de:	483e      	ldr	r0, [pc, #248]	; (80004d8 <display7SEGvertical+0x37c>)
 80003e0:	f002 fac7 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 80003e4:	2200      	movs	r2, #0
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	483b      	ldr	r0, [pc, #236]	; (80004d8 <display7SEGvertical+0x37c>)
 80003ea:	f002 fac2 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 80003ee:	2200      	movs	r2, #0
 80003f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003f4:	4838      	ldr	r0, [pc, #224]	; (80004d8 <display7SEGvertical+0x37c>)
 80003f6:	f002 fabc 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_SET);
 80003fa:	2201      	movs	r2, #1
 80003fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000400:	4835      	ldr	r0, [pc, #212]	; (80004d8 <display7SEGvertical+0x37c>)
 8000402:	f002 fab6 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 8000406:	2201      	movs	r2, #1
 8000408:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800040c:	4832      	ldr	r0, [pc, #200]	; (80004d8 <display7SEGvertical+0x37c>)
 800040e:	f002 fab0 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_SET);
 8000412:	2201      	movs	r2, #1
 8000414:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000418:	482f      	ldr	r0, [pc, #188]	; (80004d8 <display7SEGvertical+0x37c>)
 800041a:	f002 faaa 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_SET);
 800041e:	2201      	movs	r2, #1
 8000420:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000424:	482c      	ldr	r0, [pc, #176]	; (80004d8 <display7SEGvertical+0x37c>)
 8000426:	f002 faa4 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 800042a:	e051      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 8:
	    {
	    	HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800042c:	2200      	movs	r2, #0
 800042e:	2140      	movs	r1, #64	; 0x40
 8000430:	4829      	ldr	r0, [pc, #164]	; (80004d8 <display7SEGvertical+0x37c>)
 8000432:	f002 fa9e 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000436:	2200      	movs	r2, #0
 8000438:	2180      	movs	r1, #128	; 0x80
 800043a:	4827      	ldr	r0, [pc, #156]	; (80004d8 <display7SEGvertical+0x37c>)
 800043c:	f002 fa99 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000446:	4824      	ldr	r0, [pc, #144]	; (80004d8 <display7SEGvertical+0x37c>)
 8000448:	f002 fa93 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800044c:	2200      	movs	r2, #0
 800044e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000452:	4821      	ldr	r0, [pc, #132]	; (80004d8 <display7SEGvertical+0x37c>)
 8000454:	f002 fa8d 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_RESET);
 8000458:	2200      	movs	r2, #0
 800045a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800045e:	481e      	ldr	r0, [pc, #120]	; (80004d8 <display7SEGvertical+0x37c>)
 8000460:	f002 fa87 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800046a:	481b      	ldr	r0, [pc, #108]	; (80004d8 <display7SEGvertical+0x37c>)
 800046c:	f002 fa81 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000476:	4818      	ldr	r0, [pc, #96]	; (80004d8 <display7SEGvertical+0x37c>)
 8000478:	f002 fa7b 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 800047c:	e028      	b.n	80004d0 <display7SEGvertical+0x374>
	    }
	    case 9:
	    {
	        HAL_GPIO_WritePin(a2_GPIO_Port, a2_Pin, GPIO_PIN_RESET);
 800047e:	2200      	movs	r2, #0
 8000480:	2140      	movs	r1, #64	; 0x40
 8000482:	4815      	ldr	r0, [pc, #84]	; (80004d8 <display7SEGvertical+0x37c>)
 8000484:	f002 fa75 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b2_GPIO_Port, b2_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2180      	movs	r1, #128	; 0x80
 800048c:	4812      	ldr	r0, [pc, #72]	; (80004d8 <display7SEGvertical+0x37c>)
 800048e:	f002 fa70 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c2_GPIO_Port, c2_Pin, GPIO_PIN_RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000498:	480f      	ldr	r0, [pc, #60]	; (80004d8 <display7SEGvertical+0x37c>)
 800049a:	f002 fa6a 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d2_GPIO_Port, d2_Pin, GPIO_PIN_RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004a4:	480c      	ldr	r0, [pc, #48]	; (80004d8 <display7SEGvertical+0x37c>)
 80004a6:	f002 fa64 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e2_GPIO_Port, e2_Pin, GPIO_PIN_SET);
 80004aa:	2201      	movs	r2, #1
 80004ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004b0:	4809      	ldr	r0, [pc, #36]	; (80004d8 <display7SEGvertical+0x37c>)
 80004b2:	f002 fa5e 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f2_GPIO_Port, f2_Pin, GPIO_PIN_RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004bc:	4806      	ldr	r0, [pc, #24]	; (80004d8 <display7SEGvertical+0x37c>)
 80004be:	f002 fa58 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g2_GPIO_Port, g2_Pin, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80004c8:	4803      	ldr	r0, [pc, #12]	; (80004d8 <display7SEGvertical+0x37c>)
 80004ca:	f002 fa52 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 80004ce:	bf00      	nop
	    }
	}

}
 80004d0:	bf00      	nop
 80004d2:	3708      	adds	r7, #8
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	40010c00 	.word	0x40010c00

080004dc <display7SEGhorizontal>:

void display7SEGhorizontal(int num)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b09      	cmp	r3, #9
 80004e8:	f200 81b2 	bhi.w	8000850 <display7SEGhorizontal+0x374>
 80004ec:	a201      	add	r2, pc, #4	; (adr r2, 80004f4 <display7SEGhorizontal+0x18>)
 80004ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004f2:	bf00      	nop
 80004f4:	0800051d 	.word	0x0800051d
 80004f8:	0800056f 	.word	0x0800056f
 80004fc:	080005c1 	.word	0x080005c1
 8000500:	08000613 	.word	0x08000613
 8000504:	08000665 	.word	0x08000665
 8000508:	080006b7 	.word	0x080006b7
 800050c:	08000709 	.word	0x08000709
 8000510:	0800075b 	.word	0x0800075b
 8000514:	080007ad 	.word	0x080007ad
 8000518:	080007ff 	.word	0x080007ff
	switch(num)
	{
	    case 0:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	48cd      	ldr	r0, [pc, #820]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000522:	f002 fa26 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	48cb      	ldr	r0, [pc, #812]	; (8000858 <display7SEGhorizontal+0x37c>)
 800052c:	f002 fa21 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000536:	48c8      	ldr	r0, [pc, #800]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000538:	f002 fa1b 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000542:	48c5      	ldr	r0, [pc, #788]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000544:	f002 fa15 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800054e:	48c2      	ldr	r0, [pc, #776]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000550:	f002 fa0f 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800055a:	48bf      	ldr	r0, [pc, #764]	; (8000858 <display7SEGhorizontal+0x37c>)
 800055c:	f002 fa09 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000566:	48bc      	ldr	r0, [pc, #752]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000568:	f002 fa03 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 800056c:	e170      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 1:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 800056e:	2201      	movs	r2, #1
 8000570:	2140      	movs	r1, #64	; 0x40
 8000572:	48b9      	ldr	r0, [pc, #740]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000574:	f002 f9fd 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	2180      	movs	r1, #128	; 0x80
 800057c:	48b6      	ldr	r0, [pc, #728]	; (8000858 <display7SEGhorizontal+0x37c>)
 800057e:	f002 f9f8 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000588:	48b3      	ldr	r0, [pc, #716]	; (8000858 <display7SEGhorizontal+0x37c>)
 800058a:	f002 f9f2 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	48b0      	ldr	r0, [pc, #704]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000596:	f002 f9ec 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005a0:	48ad      	ldr	r0, [pc, #692]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005a2:	f002 f9e6 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ac:	48aa      	ldr	r0, [pc, #680]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005ae:	f002 f9e0 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005b8:	48a7      	ldr	r0, [pc, #668]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005ba:	f002 f9da 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 80005be:	e147      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 2:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2140      	movs	r1, #64	; 0x40
 80005c4:	48a4      	ldr	r0, [pc, #656]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005c6:	f002 f9d4 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2180      	movs	r1, #128	; 0x80
 80005ce:	48a2      	ldr	r0, [pc, #648]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005d0:	f002 f9cf 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_SET);
 80005d4:	2201      	movs	r2, #1
 80005d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005da:	489f      	ldr	r0, [pc, #636]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005dc:	f002 f9c9 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80005e0:	2200      	movs	r2, #0
 80005e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e6:	489c      	ldr	r0, [pc, #624]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005e8:	f002 f9c3 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f2:	4899      	ldr	r0, [pc, #612]	; (8000858 <display7SEGhorizontal+0x37c>)
 80005f4:	f002 f9bd 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005fe:	4896      	ldr	r0, [pc, #600]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000600:	f002 f9b7 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060a:	4893      	ldr	r0, [pc, #588]	; (8000858 <display7SEGhorizontal+0x37c>)
 800060c:	f002 f9b1 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 8000610:	e11e      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 3:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4890      	ldr	r0, [pc, #576]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000618:	f002 f9ab 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800061c:	2200      	movs	r2, #0
 800061e:	2180      	movs	r1, #128	; 0x80
 8000620:	488d      	ldr	r0, [pc, #564]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000622:	f002 f9a6 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	f44f 7180 	mov.w	r1, #256	; 0x100
 800062c:	488a      	ldr	r0, [pc, #552]	; (8000858 <display7SEGhorizontal+0x37c>)
 800062e:	f002 f9a0 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000638:	4887      	ldr	r0, [pc, #540]	; (8000858 <display7SEGhorizontal+0x37c>)
 800063a:	f002 f99a 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800063e:	2201      	movs	r2, #1
 8000640:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000644:	4884      	ldr	r0, [pc, #528]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000646:	f002 f994 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000650:	4881      	ldr	r0, [pc, #516]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000652:	f002 f98e 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800065c:	487e      	ldr	r0, [pc, #504]	; (8000858 <display7SEGhorizontal+0x37c>)
 800065e:	f002 f988 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 8000662:	e0f5      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 4:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	2140      	movs	r1, #64	; 0x40
 8000668:	487b      	ldr	r0, [pc, #492]	; (8000858 <display7SEGhorizontal+0x37c>)
 800066a:	f002 f982 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2180      	movs	r1, #128	; 0x80
 8000672:	4879      	ldr	r0, [pc, #484]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000674:	f002 f97d 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	4876      	ldr	r0, [pc, #472]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000680:	f002 f977 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 8000684:	2201      	movs	r2, #1
 8000686:	f44f 7100 	mov.w	r1, #512	; 0x200
 800068a:	4873      	ldr	r0, [pc, #460]	; (8000858 <display7SEGhorizontal+0x37c>)
 800068c:	f002 f971 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000696:	4870      	ldr	r0, [pc, #448]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000698:	f002 f96b 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 800069c:	2200      	movs	r2, #0
 800069e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a2:	486d      	ldr	r0, [pc, #436]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006a4:	f002 f965 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ae:	486a      	ldr	r0, [pc, #424]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006b0:	f002 f95f 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 80006b4:	e0cc      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 5:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80006b6:	2200      	movs	r2, #0
 80006b8:	2140      	movs	r1, #64	; 0x40
 80006ba:	4867      	ldr	r0, [pc, #412]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006bc:	f002 f959 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	4864      	ldr	r0, [pc, #400]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006c6:	f002 f954 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006d0:	4861      	ldr	r0, [pc, #388]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006d2:	f002 f94e 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006dc:	485e      	ldr	r0, [pc, #376]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006de:	f002 f948 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e8:	485b      	ldr	r0, [pc, #364]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006ea:	f002 f942 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006f4:	4858      	ldr	r0, [pc, #352]	; (8000858 <display7SEGhorizontal+0x37c>)
 80006f6:	f002 f93c 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000700:	4855      	ldr	r0, [pc, #340]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000702:	f002 f936 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 8000706:	e0a3      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 6:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2140      	movs	r1, #64	; 0x40
 800070c:	4852      	ldr	r0, [pc, #328]	; (8000858 <display7SEGhorizontal+0x37c>)
 800070e:	f002 f930 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	4850      	ldr	r0, [pc, #320]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000718:	f002 f92b 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	484d      	ldr	r0, [pc, #308]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000724:	f002 f925 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	484a      	ldr	r0, [pc, #296]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000730:	f002 f91f 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	4847      	ldr	r0, [pc, #284]	; (8000858 <display7SEGhorizontal+0x37c>)
 800073c:	f002 f919 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	4844      	ldr	r0, [pc, #272]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000748:	f002 f913 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000752:	4841      	ldr	r0, [pc, #260]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000754:	f002 f90d 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 8000758:	e07a      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 7:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	2140      	movs	r1, #64	; 0x40
 800075e:	483e      	ldr	r0, [pc, #248]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000760:	f002 f907 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	483b      	ldr	r0, [pc, #236]	; (8000858 <display7SEGhorizontal+0x37c>)
 800076a:	f002 f902 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4838      	ldr	r0, [pc, #224]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000776:	f002 f8fc 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_SET);
 800077a:	2201      	movs	r2, #1
 800077c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000780:	4835      	ldr	r0, [pc, #212]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000782:	f002 f8f6 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800078c:	4832      	ldr	r0, [pc, #200]	; (8000858 <display7SEGhorizontal+0x37c>)
 800078e:	f002 f8f0 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_SET);
 8000792:	2201      	movs	r2, #1
 8000794:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000798:	482f      	ldr	r0, [pc, #188]	; (8000858 <display7SEGhorizontal+0x37c>)
 800079a:	f002 f8ea 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007a4:	482c      	ldr	r0, [pc, #176]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007a6:	f002 f8e4 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 80007aa:	e051      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 8:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	2140      	movs	r1, #64	; 0x40
 80007b0:	4829      	ldr	r0, [pc, #164]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007b2:	f002 f8de 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	4827      	ldr	r0, [pc, #156]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007bc:	f002 f8d9 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007c6:	4824      	ldr	r0, [pc, #144]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007c8:	f002 f8d3 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d2:	4821      	ldr	r0, [pc, #132]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007d4:	f002 f8cd 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_RESET);
 80007d8:	2200      	movs	r2, #0
 80007da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007de:	481e      	ldr	r0, [pc, #120]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007e0:	f002 f8c7 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007ea:	481b      	ldr	r0, [pc, #108]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007ec:	f002 f8c1 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f6:	4818      	ldr	r0, [pc, #96]	; (8000858 <display7SEGhorizontal+0x37c>)
 80007f8:	f002 f8bb 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 80007fc:	e028      	b.n	8000850 <display7SEGhorizontal+0x374>
	    }
	    case 9:
	    {
	        HAL_GPIO_WritePin(a1_GPIO_Port, a1_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2140      	movs	r1, #64	; 0x40
 8000802:	4815      	ldr	r0, [pc, #84]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000804:	f002 f8b5 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(b1_GPIO_Port, b1_Pin, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	4812      	ldr	r0, [pc, #72]	; (8000858 <display7SEGhorizontal+0x37c>)
 800080e:	f002 f8b0 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(c1_GPIO_Port, c1_Pin, GPIO_PIN_RESET);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000818:	480f      	ldr	r0, [pc, #60]	; (8000858 <display7SEGhorizontal+0x37c>)
 800081a:	f002 f8aa 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(d1_GPIO_Port, d1_Pin, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000824:	480c      	ldr	r0, [pc, #48]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000826:	f002 f8a4 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(e1_GPIO_Port, e1_Pin, GPIO_PIN_SET);
 800082a:	2201      	movs	r2, #1
 800082c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000830:	4809      	ldr	r0, [pc, #36]	; (8000858 <display7SEGhorizontal+0x37c>)
 8000832:	f002 f89e 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(f1_GPIO_Port, f1_Pin, GPIO_PIN_RESET);
 8000836:	2200      	movs	r2, #0
 8000838:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800083c:	4806      	ldr	r0, [pc, #24]	; (8000858 <display7SEGhorizontal+0x37c>)
 800083e:	f002 f898 	bl	8002972 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(g1_GPIO_Port, g1_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <display7SEGhorizontal+0x37c>)
 800084a:	f002 f892 	bl	8002972 <HAL_GPIO_WritePin>
	        break;
 800084e:	bf00      	nop
	    }
	}
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40010800 	.word	0x40010800

0800085c <display7SEGBuffervertical>:

void display7SEGBuffervertical(int num)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
	switch(num)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d003      	beq.n	8000872 <display7SEGBuffervertical+0x16>
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d012      	beq.n	8000896 <display7SEGBuffervertical+0x3a>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
        display7SEGvertical(buffer_7SEG_vertical[num]);
		break;
	}
	}
}
 8000870:	e023      	b.n	80008ba <display7SEGBuffervertical+0x5e>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	2110      	movs	r1, #16
 8000876:	4813      	ldr	r0, [pc, #76]	; (80008c4 <display7SEGBuffervertical+0x68>)
 8000878:	f002 f87b 	bl	8002972 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 800087c:	2201      	movs	r2, #1
 800087e:	2120      	movs	r1, #32
 8000880:	4810      	ldr	r0, [pc, #64]	; (80008c4 <display7SEGBuffervertical+0x68>)
 8000882:	f002 f876 	bl	8002972 <HAL_GPIO_WritePin>
        display7SEGvertical(buffer_7SEG_vertical[num]);
 8000886:	4a10      	ldr	r2, [pc, #64]	; (80008c8 <display7SEGBuffervertical+0x6c>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff fc64 	bl	800015c <display7SEGvertical>
		break;
 8000894:	e011      	b.n	80008ba <display7SEGBuffervertical+0x5e>
        HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2110      	movs	r1, #16
 800089a:	480a      	ldr	r0, [pc, #40]	; (80008c4 <display7SEGBuffervertical+0x68>)
 800089c:	f002 f869 	bl	8002972 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	4807      	ldr	r0, [pc, #28]	; (80008c4 <display7SEGBuffervertical+0x68>)
 80008a6:	f002 f864 	bl	8002972 <HAL_GPIO_WritePin>
        display7SEGvertical(buffer_7SEG_vertical[num]);
 80008aa:	4a07      	ldr	r2, [pc, #28]	; (80008c8 <display7SEGBuffervertical+0x6c>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff fc52 	bl	800015c <display7SEGvertical>
		break;
 80008b8:	bf00      	nop
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40010c00 	.word	0x40010c00
 80008c8:	200000a4 	.word	0x200000a4

080008cc <display7SEGBufferhorizontal>:

void display7SEGBufferhorizontal(int num)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	switch(num)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d003      	beq.n	80008e2 <display7SEGBufferhorizontal+0x16>
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d012      	beq.n	8000906 <display7SEGBufferhorizontal+0x3a>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
		break;
	}
	}
}
 80008e0:	e023      	b.n	800092a <display7SEGBufferhorizontal+0x5e>
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2102      	movs	r1, #2
 80008e6:	4813      	ldr	r0, [pc, #76]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 80008e8:	f002 f843 	bl	8002972 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2104      	movs	r1, #4
 80008f0:	4810      	ldr	r0, [pc, #64]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 80008f2:	f002 f83e 	bl	8002972 <HAL_GPIO_WritePin>
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
 80008f6:	4a10      	ldr	r2, [pc, #64]	; (8000938 <display7SEGBufferhorizontal+0x6c>)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff fdec 	bl	80004dc <display7SEGhorizontal>
		break;
 8000904:	e011      	b.n	800092a <display7SEGBufferhorizontal+0x5e>
        HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000906:	2201      	movs	r2, #1
 8000908:	2102      	movs	r1, #2
 800090a:	480a      	ldr	r0, [pc, #40]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 800090c:	f002 f831 	bl	8002972 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	2104      	movs	r1, #4
 8000914:	4807      	ldr	r0, [pc, #28]	; (8000934 <display7SEGBufferhorizontal+0x68>)
 8000916:	f002 f82c 	bl	8002972 <HAL_GPIO_WritePin>
        display7SEGhorizontal(buffer_7SEG_horizontal[num]);
 800091a:	4a07      	ldr	r2, [pc, #28]	; (8000938 <display7SEGBufferhorizontal+0x6c>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fdda 	bl	80004dc <display7SEGhorizontal>
		break;
 8000928:	bf00      	nop
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010c00 	.word	0x40010c00
 8000938:	200000ac 	.word	0x200000ac

0800093c <display7SEGFinalvertical>:

void display7SEGFinalvertical()
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	switch(status_vertical)
 8000940:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <display7SEGFinalvertical+0x100>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	2b03      	cmp	r3, #3
 8000946:	d046      	beq.n	80009d6 <display7SEGFinalvertical+0x9a>
 8000948:	2b03      	cmp	r3, #3
 800094a:	dc64      	bgt.n	8000a16 <display7SEGFinalvertical+0xda>
 800094c:	2b01      	cmp	r3, #1
 800094e:	d002      	beq.n	8000956 <display7SEGFinalvertical+0x1a>
 8000950:	2b02      	cmp	r3, #2
 8000952:	d020      	beq.n	8000996 <display7SEGFinalvertical+0x5a>
 8000954:	e05f      	b.n	8000a16 <display7SEGFinalvertical+0xda>
	{
	case AUTO_RED:
	{
		buffer_7SEG_vertical[0] = (red_yellow_green_auto_time_vertical[0] - vertical_counter) / 10;
 8000956:	4b3a      	ldr	r3, [pc, #232]	; (8000a40 <display7SEGFinalvertical+0x104>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <display7SEGFinalvertical+0x108>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	1ad3      	subs	r3, r2, r3
 8000960:	4a39      	ldr	r2, [pc, #228]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 8000962:	fb82 1203 	smull	r1, r2, r2, r3
 8000966:	1092      	asrs	r2, r2, #2
 8000968:	17db      	asrs	r3, r3, #31
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	4a37      	ldr	r2, [pc, #220]	; (8000a4c <display7SEGFinalvertical+0x110>)
 800096e:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = (red_yellow_green_auto_time_vertical[0] - vertical_counter) % 10;
 8000970:	4b33      	ldr	r3, [pc, #204]	; (8000a40 <display7SEGFinalvertical+0x104>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4b33      	ldr	r3, [pc, #204]	; (8000a44 <display7SEGFinalvertical+0x108>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	1ad1      	subs	r1, r2, r3
 800097a:	4b33      	ldr	r3, [pc, #204]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 800097c:	fb83 2301 	smull	r2, r3, r3, r1
 8000980:	109a      	asrs	r2, r3, #2
 8000982:	17cb      	asrs	r3, r1, #31
 8000984:	1ad2      	subs	r2, r2, r3
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	1aca      	subs	r2, r1, r3
 8000990:	4b2e      	ldr	r3, [pc, #184]	; (8000a4c <display7SEGFinalvertical+0x110>)
 8000992:	605a      	str	r2, [r3, #4]
		break;
 8000994:	e03f      	b.n	8000a16 <display7SEGFinalvertical+0xda>
	}
	case AUTO_YELLOW:
	{
		buffer_7SEG_vertical[0] = (red_yellow_green_auto_time_vertical[1] - vertical_counter) / 10;
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <display7SEGFinalvertical+0x104>)
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <display7SEGFinalvertical+0x108>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	4a29      	ldr	r2, [pc, #164]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 80009a2:	fb82 1203 	smull	r1, r2, r2, r3
 80009a6:	1092      	asrs	r2, r2, #2
 80009a8:	17db      	asrs	r3, r3, #31
 80009aa:	1ad3      	subs	r3, r2, r3
 80009ac:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <display7SEGFinalvertical+0x110>)
 80009ae:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = (red_yellow_green_auto_time_vertical[1] - vertical_counter) % 10;
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <display7SEGFinalvertical+0x104>)
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	4b23      	ldr	r3, [pc, #140]	; (8000a44 <display7SEGFinalvertical+0x108>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	1ad1      	subs	r1, r2, r3
 80009ba:	4b23      	ldr	r3, [pc, #140]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 80009bc:	fb83 2301 	smull	r2, r3, r3, r1
 80009c0:	109a      	asrs	r2, r3, #2
 80009c2:	17cb      	asrs	r3, r1, #31
 80009c4:	1ad2      	subs	r2, r2, r3
 80009c6:	4613      	mov	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	4413      	add	r3, r2
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	1aca      	subs	r2, r1, r3
 80009d0:	4b1e      	ldr	r3, [pc, #120]	; (8000a4c <display7SEGFinalvertical+0x110>)
 80009d2:	605a      	str	r2, [r3, #4]
		break;
 80009d4:	e01f      	b.n	8000a16 <display7SEGFinalvertical+0xda>
	}
	case AUTO_GREEN:
	{
		buffer_7SEG_vertical[0] = (red_yellow_green_auto_time_vertical[2] - vertical_counter) / 10;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <display7SEGFinalvertical+0x104>)
 80009d8:	689a      	ldr	r2, [r3, #8]
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <display7SEGFinalvertical+0x108>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	1ad3      	subs	r3, r2, r3
 80009e0:	4a19      	ldr	r2, [pc, #100]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 80009e2:	fb82 1203 	smull	r1, r2, r2, r3
 80009e6:	1092      	asrs	r2, r2, #2
 80009e8:	17db      	asrs	r3, r3, #31
 80009ea:	1ad3      	subs	r3, r2, r3
 80009ec:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <display7SEGFinalvertical+0x110>)
 80009ee:	6013      	str	r3, [r2, #0]
		buffer_7SEG_vertical[1] = (red_yellow_green_auto_time_vertical[2] - vertical_counter) % 10;
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <display7SEGFinalvertical+0x104>)
 80009f2:	689a      	ldr	r2, [r3, #8]
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <display7SEGFinalvertical+0x108>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	1ad1      	subs	r1, r2, r3
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <display7SEGFinalvertical+0x10c>)
 80009fc:	fb83 2301 	smull	r2, r3, r3, r1
 8000a00:	109a      	asrs	r2, r3, #2
 8000a02:	17cb      	asrs	r3, r1, #31
 8000a04:	1ad2      	subs	r2, r2, r3
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	1aca      	subs	r2, r1, r3
 8000a10:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <display7SEGFinalvertical+0x110>)
 8000a12:	605a      	str	r2, [r3, #4]
		break;
 8000a14:	bf00      	nop
	}
	}

	if(EN_vertical > 1)
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <display7SEGFinalvertical+0x114>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	dd02      	ble.n	8000a24 <display7SEGFinalvertical+0xe8>
	{
		EN_vertical = 0;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <display7SEGFinalvertical+0x114>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
	}

	display7SEGBuffervertical(EN_vertical);
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <display7SEGFinalvertical+0x114>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff17 	bl	800085c <display7SEGBuffervertical>

	EN_vertical++;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <display7SEGFinalvertical+0x114>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	3301      	adds	r3, #1
 8000a34:	4a06      	ldr	r2, [pc, #24]	; (8000a50 <display7SEGFinalvertical+0x114>)
 8000a36:	6013      	str	r3, [r2, #0]

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20000074 	.word	0x20000074
 8000a40:	20000050 	.word	0x20000050
 8000a44:	2000006c 	.word	0x2000006c
 8000a48:	66666667 	.word	0x66666667
 8000a4c:	200000a4 	.word	0x200000a4
 8000a50:	200000b8 	.word	0x200000b8

08000a54 <display7SEGFinalhorizontal>:

void display7SEGFinalhorizontal()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 8000a58:	4b75      	ldr	r3, [pc, #468]	; (8000c30 <display7SEGFinalhorizontal+0x1dc>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	3b01      	subs	r3, #1
 8000a5e:	2b06      	cmp	r3, #6
 8000a60:	f200 80d2 	bhi.w	8000c08 <display7SEGFinalhorizontal+0x1b4>
 8000a64:	a201      	add	r2, pc, #4	; (adr r2, 8000a6c <display7SEGFinalhorizontal+0x18>)
 8000a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6a:	bf00      	nop
 8000a6c:	08000a89 	.word	0x08000a89
 8000a70:	08000ac9 	.word	0x08000ac9
 8000a74:	08000b09 	.word	0x08000b09
 8000a78:	08000c09 	.word	0x08000c09
 8000a7c:	08000b49 	.word	0x08000b49
 8000a80:	08000b89 	.word	0x08000b89
 8000a84:	08000bc9 	.word	0x08000bc9
	{
	case AUTO_RED:
	{
		buffer_7SEG_horizontal[0] = (red_yellow_green_auto_time_horizontal[0] - horizontal_counter) / 10;
 8000a88:	4b6a      	ldr	r3, [pc, #424]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	4b6a      	ldr	r3, [pc, #424]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	1ad3      	subs	r3, r2, r3
 8000a92:	4a6a      	ldr	r2, [pc, #424]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000a94:	fb82 1203 	smull	r1, r2, r2, r3
 8000a98:	1092      	asrs	r2, r2, #2
 8000a9a:	17db      	asrs	r3, r3, #31
 8000a9c:	1ad3      	subs	r3, r2, r3
 8000a9e:	4a68      	ldr	r2, [pc, #416]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000aa0:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = (red_yellow_green_auto_time_horizontal[0] - horizontal_counter) % 10;
 8000aa2:	4b64      	ldr	r3, [pc, #400]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4b64      	ldr	r3, [pc, #400]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	1ad1      	subs	r1, r2, r3
 8000aac:	4b63      	ldr	r3, [pc, #396]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000aae:	fb83 2301 	smull	r2, r3, r3, r1
 8000ab2:	109a      	asrs	r2, r3, #2
 8000ab4:	17cb      	asrs	r3, r1, #31
 8000ab6:	1ad2      	subs	r2, r2, r3
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1aca      	subs	r2, r1, r3
 8000ac2:	4b5f      	ldr	r3, [pc, #380]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000ac4:	605a      	str	r2, [r3, #4]
		break;
 8000ac6:	e09f      	b.n	8000c08 <display7SEGFinalhorizontal+0x1b4>
	}
	case AUTO_YELLOW:
	{
		buffer_7SEG_horizontal[0] = (red_yellow_green_auto_time_horizontal[1] - horizontal_counter) / 10;
 8000ac8:	4b5a      	ldr	r3, [pc, #360]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000aca:	685a      	ldr	r2, [r3, #4]
 8000acc:	4b5a      	ldr	r3, [pc, #360]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	4a5a      	ldr	r2, [pc, #360]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000ad4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ad8:	1092      	asrs	r2, r2, #2
 8000ada:	17db      	asrs	r3, r3, #31
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	4a58      	ldr	r2, [pc, #352]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000ae0:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = (red_yellow_green_auto_time_horizontal[1] - horizontal_counter) % 10;
 8000ae2:	4b54      	ldr	r3, [pc, #336]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000ae4:	685a      	ldr	r2, [r3, #4]
 8000ae6:	4b54      	ldr	r3, [pc, #336]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	1ad1      	subs	r1, r2, r3
 8000aec:	4b53      	ldr	r3, [pc, #332]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000aee:	fb83 2301 	smull	r2, r3, r3, r1
 8000af2:	109a      	asrs	r2, r3, #2
 8000af4:	17cb      	asrs	r3, r1, #31
 8000af6:	1ad2      	subs	r2, r2, r3
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	005b      	lsls	r3, r3, #1
 8000b00:	1aca      	subs	r2, r1, r3
 8000b02:	4b4f      	ldr	r3, [pc, #316]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b04:	605a      	str	r2, [r3, #4]
		break;
 8000b06:	e07f      	b.n	8000c08 <display7SEGFinalhorizontal+0x1b4>
	}
	case AUTO_GREEN:
	{
		buffer_7SEG_horizontal[0] = (red_yellow_green_auto_time_horizontal[2] - horizontal_counter) / 10;
 8000b08:	4b4a      	ldr	r3, [pc, #296]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000b0a:	689a      	ldr	r2, [r3, #8]
 8000b0c:	4b4a      	ldr	r3, [pc, #296]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	1ad3      	subs	r3, r2, r3
 8000b12:	4a4a      	ldr	r2, [pc, #296]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000b14:	fb82 1203 	smull	r1, r2, r2, r3
 8000b18:	1092      	asrs	r2, r2, #2
 8000b1a:	17db      	asrs	r3, r3, #31
 8000b1c:	1ad3      	subs	r3, r2, r3
 8000b1e:	4a48      	ldr	r2, [pc, #288]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b20:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = (red_yellow_green_auto_time_horizontal[2] - horizontal_counter) % 10;
 8000b22:	4b44      	ldr	r3, [pc, #272]	; (8000c34 <display7SEGFinalhorizontal+0x1e0>)
 8000b24:	689a      	ldr	r2, [r3, #8]
 8000b26:	4b44      	ldr	r3, [pc, #272]	; (8000c38 <display7SEGFinalhorizontal+0x1e4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	1ad1      	subs	r1, r2, r3
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000b2e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b32:	109a      	asrs	r2, r3, #2
 8000b34:	17cb      	asrs	r3, r1, #31
 8000b36:	1ad2      	subs	r2, r2, r3
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	1aca      	subs	r2, r1, r3
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b44:	605a      	str	r2, [r3, #4]
		break;
 8000b46:	e05f      	b.n	8000c08 <display7SEGFinalhorizontal+0x1b4>
	}
	case MANUAL_RED:
	{
		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[0] / 10;
 8000b48:	4b3e      	ldr	r3, [pc, #248]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a3b      	ldr	r2, [pc, #236]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000b4e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b52:	1092      	asrs	r2, r2, #2
 8000b54:	17db      	asrs	r3, r3, #31
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	4a39      	ldr	r2, [pc, #228]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b5a:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[0] % 10;
 8000b5c:	4b39      	ldr	r3, [pc, #228]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000b5e:	6819      	ldr	r1, [r3, #0]
 8000b60:	4b36      	ldr	r3, [pc, #216]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000b62:	fb83 2301 	smull	r2, r3, r3, r1
 8000b66:	109a      	asrs	r2, r3, #2
 8000b68:	17cb      	asrs	r3, r1, #31
 8000b6a:	1ad2      	subs	r2, r2, r3
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	4413      	add	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	1aca      	subs	r2, r1, r3
 8000b76:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b78:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 8000b7a:	4b33      	ldr	r3, [pc, #204]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 2;
 8000b80:	4b31      	ldr	r3, [pc, #196]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000b82:	2202      	movs	r2, #2
 8000b84:	605a      	str	r2, [r3, #4]
		break;
 8000b86:	e03f      	b.n	8000c08 <display7SEGFinalhorizontal+0x1b4>
	}
	case MANUAL_YELLOW:
	{
		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[1] / 10;
 8000b88:	4b2e      	ldr	r3, [pc, #184]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	4a2b      	ldr	r2, [pc, #172]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000b8e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b92:	1092      	asrs	r2, r2, #2
 8000b94:	17db      	asrs	r3, r3, #31
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	4a29      	ldr	r2, [pc, #164]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000b9a:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[1] % 10;
 8000b9c:	4b29      	ldr	r3, [pc, #164]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000b9e:	6859      	ldr	r1, [r3, #4]
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000ba2:	fb83 2301 	smull	r2, r3, r3, r1
 8000ba6:	109a      	asrs	r2, r3, #2
 8000ba8:	17cb      	asrs	r3, r1, #31
 8000baa:	1ad2      	subs	r2, r2, r3
 8000bac:	4613      	mov	r3, r2
 8000bae:	009b      	lsls	r3, r3, #2
 8000bb0:	4413      	add	r3, r2
 8000bb2:	005b      	lsls	r3, r3, #1
 8000bb4:	1aca      	subs	r2, r1, r3
 8000bb6:	4b22      	ldr	r3, [pc, #136]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000bb8:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 8000bba:	4b23      	ldr	r3, [pc, #140]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 3;
 8000bc0:	4b21      	ldr	r3, [pc, #132]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000bc2:	2203      	movs	r2, #3
 8000bc4:	605a      	str	r2, [r3, #4]
		break;
 8000bc6:	e01f      	b.n	8000c08 <display7SEGFinalhorizontal+0x1b4>
	}
	case MANUAL_GREEN:
	{
		buffer_7SEG_horizontal[0] = red_yellow_green_manual_time[2] / 10;
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000bce:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd2:	1092      	asrs	r2, r2, #2
 8000bd4:	17db      	asrs	r3, r3, #31
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000bda:	6013      	str	r3, [r2, #0]
		buffer_7SEG_horizontal[1] = red_yellow_green_manual_time[2] % 10;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <display7SEGFinalhorizontal+0x1f0>)
 8000bde:	6899      	ldr	r1, [r3, #8]
 8000be0:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <display7SEGFinalhorizontal+0x1e8>)
 8000be2:	fb83 2301 	smull	r2, r3, r3, r1
 8000be6:	109a      	asrs	r2, r3, #2
 8000be8:	17cb      	asrs	r3, r1, #31
 8000bea:	1ad2      	subs	r2, r2, r3
 8000bec:	4613      	mov	r3, r2
 8000bee:	009b      	lsls	r3, r3, #2
 8000bf0:	4413      	add	r3, r2
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	1aca      	subs	r2, r1, r3
 8000bf6:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <display7SEGFinalhorizontal+0x1ec>)
 8000bf8:	605a      	str	r2, [r3, #4]

		buffer_7SEG_vertical[0] = 0;
 8000bfa:	4b13      	ldr	r3, [pc, #76]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
		buffer_7SEG_vertical[1] = 4;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <display7SEGFinalhorizontal+0x1f4>)
 8000c02:	2204      	movs	r2, #4
 8000c04:	605a      	str	r2, [r3, #4]
		break;
 8000c06:	bf00      	nop
	}
	}

	if(EN_horizontal > 1)
 8000c08:	4b10      	ldr	r3, [pc, #64]	; (8000c4c <display7SEGFinalhorizontal+0x1f8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	dd02      	ble.n	8000c16 <display7SEGFinalhorizontal+0x1c2>
	{
		EN_horizontal = 0;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	; (8000c4c <display7SEGFinalhorizontal+0x1f8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
	}

	display7SEGBufferhorizontal(EN_horizontal);
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <display7SEGFinalhorizontal+0x1f8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff fe56 	bl	80008cc <display7SEGBufferhorizontal>

	EN_horizontal++;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <display7SEGFinalhorizontal+0x1f8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	3301      	adds	r3, #1
 8000c26:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <display7SEGFinalhorizontal+0x1f8>)
 8000c28:	6013      	str	r3, [r2, #0]
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000070 	.word	0x20000070
 8000c34:	2000005c 	.word	0x2000005c
 8000c38:	20000068 	.word	0x20000068
 8000c3c:	66666667 	.word	0x66666667
 8000c40:	200000ac 	.word	0x200000ac
 8000c44:	200000cc 	.word	0x200000cc
 8000c48:	200000a4 	.word	0x200000a4
 8000c4c:	200000b4 	.word	0x200000b4

08000c50 <isButton1Pressed>:
int button2_flag = 0;
int button3_flag = 0;
int button4_flag = 0;

int isButton1Pressed()
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <isButton1Pressed+0x20>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	d104      	bne.n	8000c66 <isButton1Pressed+0x16>
	{
		button1_flag = 0;
 8000c5c:	4b04      	ldr	r3, [pc, #16]	; (8000c70 <isButton1Pressed+0x20>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
		return 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <isButton1Pressed+0x18>
	}

	return 0;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	200000bc 	.word	0x200000bc

08000c74 <isButton2Pressed>:

int isButton2Pressed()
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <isButton2Pressed+0x20>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d104      	bne.n	8000c8a <isButton2Pressed+0x16>
	{
		button2_flag = 0;
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <isButton2Pressed+0x20>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
		return 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e000      	b.n	8000c8c <isButton2Pressed+0x18>
	}

	return 0;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	200000c0 	.word	0x200000c0

08000c98 <isButton3Pressed>:

int isButton3Pressed()
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <isButton3Pressed+0x20>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d104      	bne.n	8000cae <isButton3Pressed+0x16>
	{
		button3_flag = 0;
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <isButton3Pressed+0x20>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
		return 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <isButton3Pressed+0x18>
	}

	return 0;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr
 8000cb8:	200000c4 	.word	0x200000c4

08000cbc <isButton4Pressed>:

int isButton4Pressed()
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
	if(button4_flag == 1)
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <isButton4Pressed+0x20>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d104      	bne.n	8000cd2 <isButton4Pressed+0x16>
	{
		button4_flag = 0;
 8000cc8:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <isButton4Pressed+0x20>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
		return 1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <isButton4Pressed+0x18>
	}

	return 0;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	200000c8 	.word	0x200000c8

08000ce0 <getButton1>:

void getButton1()
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
	int i = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000cea:	4a39      	ldr	r2, [pc, #228]	; (8000dd0 <getButton1+0xf0>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cf2:	4938      	ldr	r1, [pc, #224]	; (8000dd4 <getButton1+0xf4>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000cfa:	4a37      	ldr	r2, [pc, #220]	; (8000dd8 <getButton1+0xf8>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d02:	4933      	ldr	r1, [pc, #204]	; (8000dd0 <getButton1+0xf0>)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button1_GPIO_Port, button1_Pin);
 8000d0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d0e:	4833      	ldr	r0, [pc, #204]	; (8000ddc <getButton1+0xfc>)
 8000d10:	f001 fe18 	bl	8002944 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	4619      	mov	r1, r3
 8000d18:	4a2f      	ldr	r2, [pc, #188]	; (8000dd8 <getButton1+0xf8>)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000d20:	4a2c      	ldr	r2, [pc, #176]	; (8000dd4 <getButton1+0xf4>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d28:	4929      	ldr	r1, [pc, #164]	; (8000dd0 <getButton1+0xf0>)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d149      	bne.n	8000dc8 <getButton1+0xe8>
 8000d34:	4a26      	ldr	r2, [pc, #152]	; (8000dd0 <getButton1+0xf0>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d3c:	4926      	ldr	r1, [pc, #152]	; (8000dd8 <getButton1+0xf8>)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d13f      	bne.n	8000dc8 <getButton1+0xe8>
	{
		if(keyReg3[i] != keyReg2[i])
 8000d48:	4a25      	ldr	r2, [pc, #148]	; (8000de0 <getButton1+0x100>)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d50:	4921      	ldr	r1, [pc, #132]	; (8000dd8 <getButton1+0xf8>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d017      	beq.n	8000d8c <getButton1+0xac>
		{
			keyReg3[i] = keyReg2[i];
 8000d5c:	4a1e      	ldr	r2, [pc, #120]	; (8000dd8 <getButton1+0xf8>)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d64:	491e      	ldr	r1, [pc, #120]	; (8000de0 <getButton1+0x100>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000d6c:	4a1a      	ldr	r2, [pc, #104]	; (8000dd8 <getButton1+0xf8>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d127      	bne.n	8000dc8 <getButton1+0xe8>
			{
				button1_flag = 1;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <getButton1+0x104>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 300;
 8000d7e:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <getButton1+0x108>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000d86:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
				}
			}
		}
	}
}
 8000d8a:	e01d      	b.n	8000dc8 <getButton1+0xe8>
			if(keyReg2[i] == PRESSED_STATE)
 8000d8c:	4a12      	ldr	r2, [pc, #72]	; (8000dd8 <getButton1+0xf8>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d117      	bne.n	8000dc8 <getButton1+0xe8>
				TimerForKeyPress[i]--;
 8000d98:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <getButton1+0x108>)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da0:	1e5a      	subs	r2, r3, #1
 8000da2:	4911      	ldr	r1, [pc, #68]	; (8000de8 <getButton1+0x108>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000daa:	4a0f      	ldr	r2, [pc, #60]	; (8000de8 <getButton1+0x108>)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d108      	bne.n	8000dc8 <getButton1+0xe8>
					button1_flag = 1;
 8000db6:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <getButton1+0x104>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 300;
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <getButton1+0x108>)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8000dc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000010 	.word	0x20000010
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	20000020 	.word	0x20000020
 8000ddc:	40010800 	.word	0x40010800
 8000de0:	20000030 	.word	0x20000030
 8000de4:	200000bc 	.word	0x200000bc
 8000de8:	20000040 	.word	0x20000040

08000dec <getButton2>:

void getButton2()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
	int i = 1;
 8000df2:	2301      	movs	r3, #1
 8000df4:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000df6:	4a38      	ldr	r2, [pc, #224]	; (8000ed8 <getButton2+0xec>)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000dfe:	4937      	ldr	r1, [pc, #220]	; (8000edc <getButton2+0xf0>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000e06:	4a36      	ldr	r2, [pc, #216]	; (8000ee0 <getButton2+0xf4>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e0e:	4932      	ldr	r1, [pc, #200]	; (8000ed8 <getButton2+0xec>)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button2_GPIO_Port, button2_Pin);
 8000e16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e1a:	4832      	ldr	r0, [pc, #200]	; (8000ee4 <getButton2+0xf8>)
 8000e1c:	f001 fd92 	bl	8002944 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	4619      	mov	r1, r3
 8000e24:	4a2e      	ldr	r2, [pc, #184]	; (8000ee0 <getButton2+0xf4>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000e2c:	4a2b      	ldr	r2, [pc, #172]	; (8000edc <getButton2+0xf0>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e34:	4928      	ldr	r1, [pc, #160]	; (8000ed8 <getButton2+0xec>)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d147      	bne.n	8000ed0 <getButton2+0xe4>
 8000e40:	4a25      	ldr	r2, [pc, #148]	; (8000ed8 <getButton2+0xec>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e48:	4925      	ldr	r1, [pc, #148]	; (8000ee0 <getButton2+0xf4>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d13d      	bne.n	8000ed0 <getButton2+0xe4>
	{
		if(keyReg3[i] != keyReg2[i])
 8000e54:	4a24      	ldr	r2, [pc, #144]	; (8000ee8 <getButton2+0xfc>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e5c:	4920      	ldr	r1, [pc, #128]	; (8000ee0 <getButton2+0xf4>)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d016      	beq.n	8000e96 <getButton2+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 8000e68:	4a1d      	ldr	r2, [pc, #116]	; (8000ee0 <getButton2+0xf4>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e70:	491d      	ldr	r1, [pc, #116]	; (8000ee8 <getButton2+0xfc>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000e78:	4a19      	ldr	r2, [pc, #100]	; (8000ee0 <getButton2+0xf4>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d125      	bne.n	8000ed0 <getButton2+0xe4>
			{
				button2_flag = 1;
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <getButton2+0x100>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 50;
 8000e8a:	4a19      	ldr	r2, [pc, #100]	; (8000ef0 <getButton2+0x104>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2132      	movs	r1, #50	; 0x32
 8000e90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 50;
				}
			}
		}
	}
}
 8000e94:	e01c      	b.n	8000ed0 <getButton2+0xe4>
			if(keyReg2[i] == PRESSED_STATE)
 8000e96:	4a12      	ldr	r2, [pc, #72]	; (8000ee0 <getButton2+0xf4>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d116      	bne.n	8000ed0 <getButton2+0xe4>
				TimerForKeyPress[i]--;
 8000ea2:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <getButton2+0x104>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eaa:	1e5a      	subs	r2, r3, #1
 8000eac:	4910      	ldr	r1, [pc, #64]	; (8000ef0 <getButton2+0x104>)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000eb4:	4a0e      	ldr	r2, [pc, #56]	; (8000ef0 <getButton2+0x104>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d107      	bne.n	8000ed0 <getButton2+0xe4>
					button2_flag = 1;
 8000ec0:	4b0a      	ldr	r3, [pc, #40]	; (8000eec <getButton2+0x100>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 50;
 8000ec6:	4a0a      	ldr	r2, [pc, #40]	; (8000ef0 <getButton2+0x104>)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2132      	movs	r1, #50	; 0x32
 8000ecc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000010 	.word	0x20000010
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000020 	.word	0x20000020
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	20000030 	.word	0x20000030
 8000eec:	200000c0 	.word	0x200000c0
 8000ef0:	20000040 	.word	0x20000040

08000ef4 <getButton3>:

void getButton3()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	int i = 2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8000efe:	4a38      	ldr	r2, [pc, #224]	; (8000fe0 <getButton3+0xec>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f06:	4937      	ldr	r1, [pc, #220]	; (8000fe4 <getButton3+0xf0>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8000f0e:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <getButton3+0xf4>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f16:	4932      	ldr	r1, [pc, #200]	; (8000fe0 <getButton3+0xec>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button3_GPIO_Port, button3_Pin);
 8000f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f22:	4832      	ldr	r0, [pc, #200]	; (8000fec <getButton3+0xf8>)
 8000f24:	f001 fd0e 	bl	8002944 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4a2e      	ldr	r2, [pc, #184]	; (8000fe8 <getButton3+0xf4>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 8000f34:	4a2b      	ldr	r2, [pc, #172]	; (8000fe4 <getButton3+0xf0>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f3c:	4928      	ldr	r1, [pc, #160]	; (8000fe0 <getButton3+0xec>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d147      	bne.n	8000fd8 <getButton3+0xe4>
 8000f48:	4a25      	ldr	r2, [pc, #148]	; (8000fe0 <getButton3+0xec>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f50:	4925      	ldr	r1, [pc, #148]	; (8000fe8 <getButton3+0xf4>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	d13d      	bne.n	8000fd8 <getButton3+0xe4>
	{
		if(keyReg3[i] != keyReg2[i])
 8000f5c:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <getButton3+0xfc>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f64:	4920      	ldr	r1, [pc, #128]	; (8000fe8 <getButton3+0xf4>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d016      	beq.n	8000f9e <getButton3+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 8000f70:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <getButton3+0xf4>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f78:	491d      	ldr	r1, [pc, #116]	; (8000ff0 <getButton3+0xfc>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8000f80:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <getButton3+0xf4>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d125      	bne.n	8000fd8 <getButton3+0xe4>
			{
				button3_flag = 1;
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <getButton3+0x100>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 50;
 8000f92:	4a19      	ldr	r2, [pc, #100]	; (8000ff8 <getButton3+0x104>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2132      	movs	r1, #50	; 0x32
 8000f98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 50;
				}
			}
		}
	}
}
 8000f9c:	e01c      	b.n	8000fd8 <getButton3+0xe4>
			if(keyReg2[i] == PRESSED_STATE)
 8000f9e:	4a12      	ldr	r2, [pc, #72]	; (8000fe8 <getButton3+0xf4>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d116      	bne.n	8000fd8 <getButton3+0xe4>
				TimerForKeyPress[i]--;
 8000faa:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <getButton3+0x104>)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb2:	1e5a      	subs	r2, r3, #1
 8000fb4:	4910      	ldr	r1, [pc, #64]	; (8000ff8 <getButton3+0x104>)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <getButton3+0x104>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d107      	bne.n	8000fd8 <getButton3+0xe4>
					button3_flag = 1;
 8000fc8:	4b0a      	ldr	r3, [pc, #40]	; (8000ff4 <getButton3+0x100>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 50;
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <getButton3+0x104>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2132      	movs	r1, #50	; 0x32
 8000fd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000010 	.word	0x20000010
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	20000020 	.word	0x20000020
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	20000030 	.word	0x20000030
 8000ff4:	200000c4 	.word	0x200000c4
 8000ff8:	20000040 	.word	0x20000040

08000ffc <getButton4>:

void getButton4()
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
	int i = 3;
 8001002:	2303      	movs	r3, #3
 8001004:	607b      	str	r3, [r7, #4]
	keyReg0[i] = keyReg1[i];
 8001006:	4a39      	ldr	r2, [pc, #228]	; (80010ec <getButton4+0xf0>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800100e:	4938      	ldr	r1, [pc, #224]	; (80010f0 <getButton4+0xf4>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg1[i] = keyReg2[i];
 8001016:	4a37      	ldr	r2, [pc, #220]	; (80010f4 <getButton4+0xf8>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800101e:	4933      	ldr	r1, [pc, #204]	; (80010ec <getButton4+0xf0>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	keyReg2[i] = HAL_GPIO_ReadPin(button4_GPIO_Port, button4_Pin);
 8001026:	2101      	movs	r1, #1
 8001028:	4833      	ldr	r0, [pc, #204]	; (80010f8 <getButton4+0xfc>)
 800102a:	f001 fc8b 	bl	8002944 <HAL_GPIO_ReadPin>
 800102e:	4603      	mov	r3, r0
 8001030:	4619      	mov	r1, r3
 8001032:	4a30      	ldr	r2, [pc, #192]	; (80010f4 <getButton4+0xf8>)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	if((keyReg0[i] == keyReg1[i]) && (keyReg1[i] == keyReg2[i]))
 800103a:	4a2d      	ldr	r2, [pc, #180]	; (80010f0 <getButton4+0xf4>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001042:	492a      	ldr	r1, [pc, #168]	; (80010ec <getButton4+0xf0>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800104a:	429a      	cmp	r2, r3
 800104c:	d149      	bne.n	80010e2 <getButton4+0xe6>
 800104e:	4a27      	ldr	r2, [pc, #156]	; (80010ec <getButton4+0xf0>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001056:	4927      	ldr	r1, [pc, #156]	; (80010f4 <getButton4+0xf8>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800105e:	429a      	cmp	r2, r3
 8001060:	d13f      	bne.n	80010e2 <getButton4+0xe6>
	{
		if(keyReg3[i] != keyReg2[i])
 8001062:	4a26      	ldr	r2, [pc, #152]	; (80010fc <getButton4+0x100>)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800106a:	4922      	ldr	r1, [pc, #136]	; (80010f4 <getButton4+0xf8>)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001072:	429a      	cmp	r2, r3
 8001074:	d017      	beq.n	80010a6 <getButton4+0xaa>
		{
			keyReg3[i] = keyReg2[i];
 8001076:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <getButton4+0xf8>)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800107e:	491f      	ldr	r1, [pc, #124]	; (80010fc <getButton4+0x100>)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(keyReg2[i] == PRESSED_STATE)
 8001086:	4a1b      	ldr	r2, [pc, #108]	; (80010f4 <getButton4+0xf8>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d127      	bne.n	80010e2 <getButton4+0xe6>
			{
				button4_flag = 1;
 8001092:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <getButton4+0x104>)
 8001094:	2201      	movs	r2, #1
 8001096:	601a      	str	r2, [r3, #0]
				TimerForKeyPress[i] = 300;
 8001098:	4a1a      	ldr	r2, [pc, #104]	; (8001104 <getButton4+0x108>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80010a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					TimerForKeyPress[i] = 300;
				}
			}
		}
	}
}
 80010a4:	e01d      	b.n	80010e2 <getButton4+0xe6>
			if(keyReg2[i] == PRESSED_STATE)
 80010a6:	4a13      	ldr	r2, [pc, #76]	; (80010f4 <getButton4+0xf8>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d117      	bne.n	80010e2 <getButton4+0xe6>
				TimerForKeyPress[i]--;
 80010b2:	4a14      	ldr	r2, [pc, #80]	; (8001104 <getButton4+0x108>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ba:	1e5a      	subs	r2, r3, #1
 80010bc:	4911      	ldr	r1, [pc, #68]	; (8001104 <getButton4+0x108>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if(TimerForKeyPress[i] == 0)
 80010c4:	4a0f      	ldr	r2, [pc, #60]	; (8001104 <getButton4+0x108>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d108      	bne.n	80010e2 <getButton4+0xe6>
					button4_flag = 1;
 80010d0:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <getButton4+0x104>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]
					TimerForKeyPress[i] = 300;
 80010d6:	4a0b      	ldr	r2, [pc, #44]	; (8001104 <getButton4+0x108>)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80010de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	20000010 	.word	0x20000010
 80010f0:	20000000 	.word	0x20000000
 80010f4:	20000020 	.word	0x20000020
 80010f8:	40010c00 	.word	0x40010c00
 80010fc:	20000030 	.word	0x20000030
 8001100:	200000c8 	.word	0x200000c8
 8001104:	20000040 	.word	0x20000040

08001108 <fsm_automatic>:

int status_horizontal = AUTO_RED;
int status_vertical = AUTO_GREEN;

void fsm_automatic()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
	fsm_auto_horizontal();
 800110c:	f000 f804 	bl	8001118 <fsm_auto_horizontal>

	fsm_auto_vertical();
 8001110:	f000 f884 	bl	800121c <fsm_auto_vertical>
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <fsm_auto_horizontal>:

void fsm_auto_horizontal()
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 800111c:	4b3b      	ldr	r3, [pc, #236]	; (800120c <fsm_auto_horizontal+0xf4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b03      	cmp	r3, #3
 8001122:	d048      	beq.n	80011b6 <fsm_auto_horizontal+0x9e>
 8001124:	2b03      	cmp	r3, #3
 8001126:	dc67      	bgt.n	80011f8 <fsm_auto_horizontal+0xe0>
 8001128:	2b01      	cmp	r3, #1
 800112a:	d002      	beq.n	8001132 <fsm_auto_horizontal+0x1a>
 800112c:	2b02      	cmp	r3, #2
 800112e:	d021      	beq.n	8001174 <fsm_auto_horizontal+0x5c>
		}

		break;
	}
	default:
		break;
 8001130:	e062      	b.n	80011f8 <fsm_auto_horizontal+0xe0>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 8001132:	2201      	movs	r2, #1
 8001134:	2104      	movs	r1, #4
 8001136:	4836      	ldr	r0, [pc, #216]	; (8001210 <fsm_auto_horizontal+0xf8>)
 8001138:	f001 fc1b 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	2108      	movs	r1, #8
 8001140:	4833      	ldr	r0, [pc, #204]	; (8001210 <fsm_auto_horizontal+0xf8>)
 8001142:	f001 fc16 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	2110      	movs	r1, #16
 800114a:	4831      	ldr	r0, [pc, #196]	; (8001210 <fsm_auto_horizontal+0xf8>)
 800114c:	f001 fc11 	bl	8002972 <HAL_GPIO_WritePin>
		horizontal_counter++;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <fsm_auto_horizontal+0xfc>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	4a2f      	ldr	r2, [pc, #188]	; (8001214 <fsm_auto_horizontal+0xfc>)
 8001158:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_horizontal[0] == horizontal_counter)
 800115a:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <fsm_auto_horizontal+0x100>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <fsm_auto_horizontal+0xfc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	429a      	cmp	r2, r3
 8001164:	d14a      	bne.n	80011fc <fsm_auto_horizontal+0xe4>
			horizontal_counter = 0;
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <fsm_auto_horizontal+0xfc>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_GREEN;
 800116c:	4b27      	ldr	r3, [pc, #156]	; (800120c <fsm_auto_horizontal+0xf4>)
 800116e:	2203      	movs	r2, #3
 8001170:	601a      	str	r2, [r3, #0]
		break;
 8001172:	e043      	b.n	80011fc <fsm_auto_horizontal+0xe4>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001174:	2200      	movs	r2, #0
 8001176:	2104      	movs	r1, #4
 8001178:	4825      	ldr	r0, [pc, #148]	; (8001210 <fsm_auto_horizontal+0xf8>)
 800117a:	f001 fbfa 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 800117e:	2201      	movs	r2, #1
 8001180:	2108      	movs	r1, #8
 8001182:	4823      	ldr	r0, [pc, #140]	; (8001210 <fsm_auto_horizontal+0xf8>)
 8001184:	f001 fbf5 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001188:	2200      	movs	r2, #0
 800118a:	2110      	movs	r1, #16
 800118c:	4820      	ldr	r0, [pc, #128]	; (8001210 <fsm_auto_horizontal+0xf8>)
 800118e:	f001 fbf0 	bl	8002972 <HAL_GPIO_WritePin>
		horizontal_counter++;
 8001192:	4b20      	ldr	r3, [pc, #128]	; (8001214 <fsm_auto_horizontal+0xfc>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	3301      	adds	r3, #1
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <fsm_auto_horizontal+0xfc>)
 800119a:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_horizontal[1] == horizontal_counter)
 800119c:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <fsm_auto_horizontal+0x100>)
 800119e:	685a      	ldr	r2, [r3, #4]
 80011a0:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d12b      	bne.n	8001200 <fsm_auto_horizontal+0xe8>
			horizontal_counter = 0;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <fsm_auto_horizontal+0xf4>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	601a      	str	r2, [r3, #0]
		break;
 80011b4:	e024      	b.n	8001200 <fsm_auto_horizontal+0xe8>
		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2104      	movs	r1, #4
 80011ba:	4815      	ldr	r0, [pc, #84]	; (8001210 <fsm_auto_horizontal+0xf8>)
 80011bc:	f001 fbd9 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2108      	movs	r1, #8
 80011c4:	4812      	ldr	r0, [pc, #72]	; (8001210 <fsm_auto_horizontal+0xf8>)
 80011c6:	f001 fbd4 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 80011ca:	2201      	movs	r2, #1
 80011cc:	2110      	movs	r1, #16
 80011ce:	4810      	ldr	r0, [pc, #64]	; (8001210 <fsm_auto_horizontal+0xf8>)
 80011d0:	f001 fbcf 	bl	8002972 <HAL_GPIO_WritePin>
		horizontal_counter++;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011dc:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_horizontal[2] == horizontal_counter)
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <fsm_auto_horizontal+0x100>)
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d10c      	bne.n	8001204 <fsm_auto_horizontal+0xec>
			horizontal_counter = 0;
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <fsm_auto_horizontal+0xfc>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_YELLOW;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <fsm_auto_horizontal+0xf4>)
 80011f2:	2202      	movs	r2, #2
 80011f4:	601a      	str	r2, [r3, #0]
		break;
 80011f6:	e005      	b.n	8001204 <fsm_auto_horizontal+0xec>
		break;
 80011f8:	bf00      	nop
 80011fa:	e004      	b.n	8001206 <fsm_auto_horizontal+0xee>
		break;
 80011fc:	bf00      	nop
 80011fe:	e002      	b.n	8001206 <fsm_auto_horizontal+0xee>
		break;
 8001200:	bf00      	nop
 8001202:	e000      	b.n	8001206 <fsm_auto_horizontal+0xee>
		break;
 8001204:	bf00      	nop
	}

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000070 	.word	0x20000070
 8001210:	40010800 	.word	0x40010800
 8001214:	20000068 	.word	0x20000068
 8001218:	2000005c 	.word	0x2000005c

0800121c <fsm_auto_vertical>:

void fsm_auto_vertical()
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

	switch(status_vertical)
 8001220:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <fsm_auto_vertical+0x104>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d04e      	beq.n	80012c6 <fsm_auto_vertical+0xaa>
 8001228:	2b03      	cmp	r3, #3
 800122a:	dc70      	bgt.n	800130e <fsm_auto_vertical+0xf2>
 800122c:	2b01      	cmp	r3, #1
 800122e:	d002      	beq.n	8001236 <fsm_auto_vertical+0x1a>
 8001230:	2b02      	cmp	r3, #2
 8001232:	d024      	beq.n	800127e <fsm_auto_vertical+0x62>
		}

		break;
	}
	default:
		break;
 8001234:	e06b      	b.n	800130e <fsm_auto_vertical+0xf2>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800123c:	4839      	ldr	r0, [pc, #228]	; (8001324 <fsm_auto_vertical+0x108>)
 800123e:	f001 fb98 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001248:	4836      	ldr	r0, [pc, #216]	; (8001324 <fsm_auto_vertical+0x108>)
 800124a:	f001 fb92 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001254:	4833      	ldr	r0, [pc, #204]	; (8001324 <fsm_auto_vertical+0x108>)
 8001256:	f001 fb8c 	bl	8002972 <HAL_GPIO_WritePin>
		vertical_counter++;
 800125a:	4b33      	ldr	r3, [pc, #204]	; (8001328 <fsm_auto_vertical+0x10c>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	3301      	adds	r3, #1
 8001260:	4a31      	ldr	r2, [pc, #196]	; (8001328 <fsm_auto_vertical+0x10c>)
 8001262:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_vertical[0] == vertical_counter)
 8001264:	4b31      	ldr	r3, [pc, #196]	; (800132c <fsm_auto_vertical+0x110>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b2f      	ldr	r3, [pc, #188]	; (8001328 <fsm_auto_vertical+0x10c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d150      	bne.n	8001312 <fsm_auto_vertical+0xf6>
			vertical_counter = 0;
 8001270:	4b2d      	ldr	r3, [pc, #180]	; (8001328 <fsm_auto_vertical+0x10c>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001276:	4b2a      	ldr	r3, [pc, #168]	; (8001320 <fsm_auto_vertical+0x104>)
 8001278:	2203      	movs	r2, #3
 800127a:	601a      	str	r2, [r3, #0]
		break;
 800127c:	e049      	b.n	8001312 <fsm_auto_vertical+0xf6>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001284:	4827      	ldr	r0, [pc, #156]	; (8001324 <fsm_auto_vertical+0x108>)
 8001286:	f001 fb74 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 800128a:	2201      	movs	r2, #1
 800128c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001290:	4824      	ldr	r0, [pc, #144]	; (8001324 <fsm_auto_vertical+0x108>)
 8001292:	f001 fb6e 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800129c:	4821      	ldr	r0, [pc, #132]	; (8001324 <fsm_auto_vertical+0x108>)
 800129e:	f001 fb68 	bl	8002972 <HAL_GPIO_WritePin>
		vertical_counter++;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012aa:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_vertical[1] == vertical_counter)
 80012ac:	4b1f      	ldr	r3, [pc, #124]	; (800132c <fsm_auto_vertical+0x110>)
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d12e      	bne.n	8001316 <fsm_auto_vertical+0xfa>
			vertical_counter = 0;
 80012b8:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_RED;
 80012be:	4b18      	ldr	r3, [pc, #96]	; (8001320 <fsm_auto_vertical+0x104>)
 80012c0:	2201      	movs	r2, #1
 80012c2:	601a      	str	r2, [r3, #0]
		break;
 80012c4:	e027      	b.n	8001316 <fsm_auto_vertical+0xfa>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 80012c6:	2200      	movs	r2, #0
 80012c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012cc:	4815      	ldr	r0, [pc, #84]	; (8001324 <fsm_auto_vertical+0x108>)
 80012ce:	f001 fb50 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80012d2:	2200      	movs	r2, #0
 80012d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d8:	4812      	ldr	r0, [pc, #72]	; (8001324 <fsm_auto_vertical+0x108>)
 80012da:	f001 fb4a 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e4:	480f      	ldr	r0, [pc, #60]	; (8001324 <fsm_auto_vertical+0x108>)
 80012e6:	f001 fb44 	bl	8002972 <HAL_GPIO_WritePin>
		vertical_counter++;
 80012ea:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012f2:	6013      	str	r3, [r2, #0]
		if(red_yellow_green_auto_time_vertical[2] == vertical_counter)
 80012f4:	4b0d      	ldr	r3, [pc, #52]	; (800132c <fsm_auto_vertical+0x110>)
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <fsm_auto_vertical+0x10c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d10c      	bne.n	800131a <fsm_auto_vertical+0xfe>
			vertical_counter = 0;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <fsm_auto_vertical+0x10c>)
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_YELLOW;
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <fsm_auto_vertical+0x104>)
 8001308:	2202      	movs	r2, #2
 800130a:	601a      	str	r2, [r3, #0]
		break;
 800130c:	e005      	b.n	800131a <fsm_auto_vertical+0xfe>
		break;
 800130e:	bf00      	nop
 8001310:	e004      	b.n	800131c <fsm_auto_vertical+0x100>
		break;
 8001312:	bf00      	nop
 8001314:	e002      	b.n	800131c <fsm_auto_vertical+0x100>
		break;
 8001316:	bf00      	nop
 8001318:	e000      	b.n	800131c <fsm_auto_vertical+0x100>
		break;
 800131a:	bf00      	nop
	}

}
 800131c:	bf00      	nop
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000074 	.word	0x20000074
 8001324:	40010c00 	.word	0x40010c00
 8001328:	2000006c 	.word	0x2000006c
 800132c:	20000050 	.word	0x20000050

08001330 <fsm_manual>:
int check_button3_green = 0;

int auto_count = 20;

void fsm_manual()
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
	switch(status_horizontal)
 8001336:	4b9a      	ldr	r3, [pc, #616]	; (80015a0 <fsm_manual+0x270>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3b01      	subs	r3, #1
 800133c:	2b06      	cmp	r3, #6
 800133e:	f200 846c 	bhi.w	8001c1a <fsm_manual+0x8ea>
 8001342:	a201      	add	r2, pc, #4	; (adr r2, 8001348 <fsm_manual+0x18>)
 8001344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001348:	08001365 	.word	0x08001365
 800134c:	080013d9 	.word	0x080013d9
 8001350:	0800144b 	.word	0x0800144b
 8001354:	08001c1b 	.word	0x08001c1b
 8001358:	080014bd 	.word	0x080014bd
 800135c:	0800165d 	.word	0x0800165d
 8001360:	08001875 	.word	0x08001875
	{
	case AUTO_RED:
	{
		if(isButton1Pressed() == 1)
 8001364:	f7ff fc74 	bl	8000c50 <isButton1Pressed>
 8001368:	4603      	mov	r3, r0
 800136a:	2b01      	cmp	r3, #1
 800136c:	f040 8450 	bne.w	8001c10 <fsm_manual+0x8e0>
		{
			for(int i = 0; i < 3; i++)
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	e00a      	b.n	800138c <fsm_manual+0x5c>
			{
				red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 8001376:	4a8b      	ldr	r2, [pc, #556]	; (80015a4 <fsm_manual+0x274>)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800137e:	498a      	ldr	r1, [pc, #552]	; (80015a8 <fsm_manual+0x278>)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	3301      	adds	r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b02      	cmp	r3, #2
 8001390:	ddf1      	ble.n	8001376 <fsm_manual+0x46>
			}

			check_sync_red = 0;
 8001392:	4b86      	ldr	r3, [pc, #536]	; (80015ac <fsm_manual+0x27c>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
			check_sync_yellow = 0;
 8001398:	4b85      	ldr	r3, [pc, #532]	; (80015b0 <fsm_manual+0x280>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
			check_sync_green = 0;
 800139e:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <fsm_manual+0x284>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

			check_button2_red = 0;
 80013a4:	4b84      	ldr	r3, [pc, #528]	; (80015b8 <fsm_manual+0x288>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
			check_button2_yellow = 0;
 80013aa:	4b84      	ldr	r3, [pc, #528]	; (80015bc <fsm_manual+0x28c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
			check_button2_green = 0;
 80013b0:	4b83      	ldr	r3, [pc, #524]	; (80015c0 <fsm_manual+0x290>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]

			check_button3_red = 0;
 80013b6:	4b83      	ldr	r3, [pc, #524]	; (80015c4 <fsm_manual+0x294>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
			check_button3_yellow = 0;
 80013bc:	4b82      	ldr	r3, [pc, #520]	; (80015c8 <fsm_manual+0x298>)
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
			check_button3_green = 0;
 80013c2:	4b82      	ldr	r3, [pc, #520]	; (80015cc <fsm_manual+0x29c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

			status_horizontal = MANUAL_RED;
 80013c8:	4b75      	ldr	r3, [pc, #468]	; (80015a0 <fsm_manual+0x270>)
 80013ca:	2205      	movs	r2, #5
 80013cc:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_RED;
 80013ce:	4b80      	ldr	r3, [pc, #512]	; (80015d0 <fsm_manual+0x2a0>)
 80013d0:	2205      	movs	r2, #5
 80013d2:	601a      	str	r2, [r3, #0]
		}
		break;
 80013d4:	f000 bc1c 	b.w	8001c10 <fsm_manual+0x8e0>
	}
	case AUTO_YELLOW:
	{
		if(isButton1Pressed() == 1)
 80013d8:	f7ff fc3a 	bl	8000c50 <isButton1Pressed>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	f040 8418 	bne.w	8001c14 <fsm_manual+0x8e4>
		{
			for(int i = 0; i < 3; i++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	e00a      	b.n	8001400 <fsm_manual+0xd0>
			{
				red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 80013ea:	4a6e      	ldr	r2, [pc, #440]	; (80015a4 <fsm_manual+0x274>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013f2:	496d      	ldr	r1, [pc, #436]	; (80015a8 <fsm_manual+0x278>)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++)
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	3301      	adds	r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2b02      	cmp	r3, #2
 8001404:	ddf1      	ble.n	80013ea <fsm_manual+0xba>
			}

			check_sync_red = 0;
 8001406:	4b69      	ldr	r3, [pc, #420]	; (80015ac <fsm_manual+0x27c>)
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
			check_sync_yellow = 0;
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <fsm_manual+0x280>)
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
			check_sync_green = 0;
 8001412:	4b68      	ldr	r3, [pc, #416]	; (80015b4 <fsm_manual+0x284>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

			check_button2_red = 0;
 8001418:	4b67      	ldr	r3, [pc, #412]	; (80015b8 <fsm_manual+0x288>)
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
			check_button2_yellow = 0;
 800141e:	4b67      	ldr	r3, [pc, #412]	; (80015bc <fsm_manual+0x28c>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
			check_button2_green = 0;
 8001424:	4b66      	ldr	r3, [pc, #408]	; (80015c0 <fsm_manual+0x290>)
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]

			check_button3_red = 0;
 800142a:	4b66      	ldr	r3, [pc, #408]	; (80015c4 <fsm_manual+0x294>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
			check_button3_yellow = 0;
 8001430:	4b65      	ldr	r3, [pc, #404]	; (80015c8 <fsm_manual+0x298>)
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
			check_button3_green = 0;
 8001436:	4b65      	ldr	r3, [pc, #404]	; (80015cc <fsm_manual+0x29c>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

			status_horizontal = MANUAL_RED;
 800143c:	4b58      	ldr	r3, [pc, #352]	; (80015a0 <fsm_manual+0x270>)
 800143e:	2205      	movs	r2, #5
 8001440:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_RED;
 8001442:	4b63      	ldr	r3, [pc, #396]	; (80015d0 <fsm_manual+0x2a0>)
 8001444:	2205      	movs	r2, #5
 8001446:	601a      	str	r2, [r3, #0]
		}
		break;
 8001448:	e3e4      	b.n	8001c14 <fsm_manual+0x8e4>
	}
	case AUTO_GREEN:
	{
		if(isButton1Pressed() == 1)
 800144a:	f7ff fc01 	bl	8000c50 <isButton1Pressed>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	f040 83e1 	bne.w	8001c18 <fsm_manual+0x8e8>
		{
			for(int i = 0; i < 3; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	e00a      	b.n	8001472 <fsm_manual+0x142>
			{
				red_yellow_green_manual_time[i] = red_yellow_green_auto_time_horizontal[i];
 800145c:	4a51      	ldr	r2, [pc, #324]	; (80015a4 <fsm_manual+0x274>)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001464:	4950      	ldr	r1, [pc, #320]	; (80015a8 <fsm_manual+0x278>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0; i < 3; i++)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3301      	adds	r3, #1
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b02      	cmp	r3, #2
 8001476:	ddf1      	ble.n	800145c <fsm_manual+0x12c>
			}

			check_sync_red = 0;
 8001478:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <fsm_manual+0x27c>)
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
			check_sync_yellow = 0;
 800147e:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <fsm_manual+0x280>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
			check_sync_green = 0;
 8001484:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <fsm_manual+0x284>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]

			check_button2_red = 0;
 800148a:	4b4b      	ldr	r3, [pc, #300]	; (80015b8 <fsm_manual+0x288>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
			check_button2_yellow = 0;
 8001490:	4b4a      	ldr	r3, [pc, #296]	; (80015bc <fsm_manual+0x28c>)
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
			check_button2_green = 0;
 8001496:	4b4a      	ldr	r3, [pc, #296]	; (80015c0 <fsm_manual+0x290>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

			check_button3_red = 0;
 800149c:	4b49      	ldr	r3, [pc, #292]	; (80015c4 <fsm_manual+0x294>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
			check_button3_yellow = 0;
 80014a2:	4b49      	ldr	r3, [pc, #292]	; (80015c8 <fsm_manual+0x298>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
			check_button3_green = 0;
 80014a8:	4b48      	ldr	r3, [pc, #288]	; (80015cc <fsm_manual+0x29c>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

			status_horizontal = MANUAL_RED;
 80014ae:	4b3c      	ldr	r3, [pc, #240]	; (80015a0 <fsm_manual+0x270>)
 80014b0:	2205      	movs	r2, #5
 80014b2:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_RED;
 80014b4:	4b46      	ldr	r3, [pc, #280]	; (80015d0 <fsm_manual+0x2a0>)
 80014b6:	2205      	movs	r2, #5
 80014b8:	601a      	str	r2, [r3, #0]
		}
		break;
 80014ba:	e3ad      	b.n	8001c18 <fsm_manual+0x8e8>
	}
	case MANUAL_RED:
	{

		if(check_sync_red == 0)
 80014bc:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <fsm_manual+0x27c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d10d      	bne.n	80014e0 <fsm_manual+0x1b0>
		{
			check_sync_red = 1;
 80014c4:	4b39      	ldr	r3, [pc, #228]	; (80015ac <fsm_manual+0x27c>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, red1_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	2104      	movs	r1, #4
 80014ce:	4841      	ldr	r0, [pc, #260]	; (80015d4 <fsm_manual+0x2a4>)
 80014d0:	f001 fa4f 	bl	8002972 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, red2_Pin, GPIO_PIN_SET);
 80014d4:	2201      	movs	r2, #1
 80014d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014da:	483f      	ldr	r0, [pc, #252]	; (80015d8 <fsm_manual+0x2a8>)
 80014dc:	f001 fa49 	bl	8002972 <HAL_GPIO_WritePin>
		}

		HAL_GPIO_TogglePin(red1_GPIO_Port, red1_Pin);
 80014e0:	2104      	movs	r1, #4
 80014e2:	483c      	ldr	r0, [pc, #240]	; (80015d4 <fsm_manual+0x2a4>)
 80014e4:	f001 fa5d 	bl	80029a2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(red2_GPIO_Port, red2_Pin);
 80014e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ec:	483a      	ldr	r0, [pc, #232]	; (80015d8 <fsm_manual+0x2a8>)
 80014ee:	f001 fa58 	bl	80029a2 <HAL_GPIO_TogglePin>

		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2108      	movs	r1, #8
 80014f6:	4837      	ldr	r0, [pc, #220]	; (80015d4 <fsm_manual+0x2a4>)
 80014f8:	f001 fa3b 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80014fc:	2200      	movs	r2, #0
 80014fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001502:	4835      	ldr	r0, [pc, #212]	; (80015d8 <fsm_manual+0x2a8>)
 8001504:	f001 fa35 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2110      	movs	r1, #16
 800150c:	4831      	ldr	r0, [pc, #196]	; (80015d4 <fsm_manual+0x2a4>)
 800150e:	f001 fa30 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001518:	482f      	ldr	r0, [pc, #188]	; (80015d8 <fsm_manual+0x2a8>)
 800151a:	f001 fa2a 	bl	8002972 <HAL_GPIO_WritePin>

		if(isButton1Pressed() == 1)
 800151e:	f7ff fb97 	bl	8000c50 <isButton1Pressed>
 8001522:	4603      	mov	r3, r0
 8001524:	2b01      	cmp	r3, #1
 8001526:	d108      	bne.n	800153a <fsm_manual+0x20a>
		{
			status_horizontal = MANUAL_YELLOW;
 8001528:	4b1d      	ldr	r3, [pc, #116]	; (80015a0 <fsm_manual+0x270>)
 800152a:	2206      	movs	r2, #6
 800152c:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_YELLOW;
 800152e:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <fsm_manual+0x2a0>)
 8001530:	2206      	movs	r2, #6
 8001532:	601a      	str	r2, [r3, #0]

			auto_count = 20;
 8001534:	4b29      	ldr	r3, [pc, #164]	; (80015dc <fsm_manual+0x2ac>)
 8001536:	2214      	movs	r2, #20
 8001538:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1)
 800153a:	f7ff fb9b 	bl	8000c74 <isButton2Pressed>
 800153e:	4603      	mov	r3, r0
 8001540:	2b01      	cmp	r3, #1
 8001542:	d116      	bne.n	8001572 <fsm_manual+0x242>
		{
			check_button2_red = 1;
 8001544:	4b1c      	ldr	r3, [pc, #112]	; (80015b8 <fsm_manual+0x288>)
 8001546:	2201      	movs	r2, #1
 8001548:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[0] <= 99 && red_yellow_green_manual_time[0] >= 1)
 800154a:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <fsm_manual+0x278>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b63      	cmp	r3, #99	; 0x63
 8001550:	dc09      	bgt.n	8001566 <fsm_manual+0x236>
 8001552:	4b15      	ldr	r3, [pc, #84]	; (80015a8 <fsm_manual+0x278>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	dd05      	ble.n	8001566 <fsm_manual+0x236>
			{
				red_yellow_green_manual_time[0]++;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <fsm_manual+0x278>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	4a11      	ldr	r2, [pc, #68]	; (80015a8 <fsm_manual+0x278>)
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	e002      	b.n	800156c <fsm_manual+0x23c>
			}
			else
			{
				red_yellow_green_manual_time[0] = 1;
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <fsm_manual+0x278>)
 8001568:	2201      	movs	r2, #1
 800156a:	601a      	str	r2, [r3, #0]
			}

			auto_count = 20;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <fsm_manual+0x2ac>)
 800156e:	2214      	movs	r2, #20
 8001570:	601a      	str	r2, [r3, #0]
		}

		if(isButton3Pressed() == 1)
 8001572:	f7ff fb91 	bl	8000c98 <isButton3Pressed>
 8001576:	4603      	mov	r3, r0
 8001578:	2b01      	cmp	r3, #1
 800157a:	d137      	bne.n	80015ec <fsm_manual+0x2bc>
		{
			check_button3_red = 1;
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <fsm_manual+0x294>)
 800157e:	2201      	movs	r2, #1
 8001580:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[0] <= 99 && red_yellow_green_manual_time[0] >= 1)
 8001582:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <fsm_manual+0x278>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2b63      	cmp	r3, #99	; 0x63
 8001588:	dc2a      	bgt.n	80015e0 <fsm_manual+0x2b0>
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <fsm_manual+0x278>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	dd26      	ble.n	80015e0 <fsm_manual+0x2b0>
			{
				red_yellow_green_manual_time[0]--;
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <fsm_manual+0x278>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3b01      	subs	r3, #1
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <fsm_manual+0x278>)
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e023      	b.n	80015e6 <fsm_manual+0x2b6>
 800159e:	bf00      	nop
 80015a0:	20000070 	.word	0x20000070
 80015a4:	2000005c 	.word	0x2000005c
 80015a8:	200000cc 	.word	0x200000cc
 80015ac:	200000d8 	.word	0x200000d8
 80015b0:	200000dc 	.word	0x200000dc
 80015b4:	200000e0 	.word	0x200000e0
 80015b8:	200000e4 	.word	0x200000e4
 80015bc:	200000e8 	.word	0x200000e8
 80015c0:	200000ec 	.word	0x200000ec
 80015c4:	200000f0 	.word	0x200000f0
 80015c8:	200000f4 	.word	0x200000f4
 80015cc:	200000f8 	.word	0x200000f8
 80015d0:	20000074 	.word	0x20000074
 80015d4:	40010800 	.word	0x40010800
 80015d8:	40010c00 	.word	0x40010c00
 80015dc:	20000078 	.word	0x20000078
			}
			else
			{
				red_yellow_green_manual_time[0] = 1;
 80015e0:	4b93      	ldr	r3, [pc, #588]	; (8001830 <fsm_manual+0x500>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	601a      	str	r2, [r3, #0]
			}

			auto_count = 20;
 80015e6:	4b93      	ldr	r3, [pc, #588]	; (8001834 <fsm_manual+0x504>)
 80015e8:	2214      	movs	r2, #20
 80015ea:	601a      	str	r2, [r3, #0]
		}

		if(isButton4Pressed() == 1)
 80015ec:	f7ff fb66 	bl	8000cbc <isButton4Pressed>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b01      	cmp	r3, #1
 80015f4:	d113      	bne.n	800161e <fsm_manual+0x2ee>
		{
			EN_horizontal = 0;
 80015f6:	4b90      	ldr	r3, [pc, #576]	; (8001838 <fsm_manual+0x508>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
			EN_vertical = 0;
 80015fc:	4b8f      	ldr	r3, [pc, #572]	; (800183c <fsm_manual+0x50c>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
			horizontal_counter = -1;
 8001602:	4b8f      	ldr	r3, [pc, #572]	; (8001840 <fsm_manual+0x510>)
 8001604:	f04f 32ff 	mov.w	r2, #4294967295
 8001608:	601a      	str	r2, [r3, #0]
			vertical_counter = -1;
 800160a:	4b8e      	ldr	r3, [pc, #568]	; (8001844 <fsm_manual+0x514>)
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 8001612:	4b8d      	ldr	r3, [pc, #564]	; (8001848 <fsm_manual+0x518>)
 8001614:	2201      	movs	r2, #1
 8001616:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001618:	4b8c      	ldr	r3, [pc, #560]	; (800184c <fsm_manual+0x51c>)
 800161a:	2203      	movs	r2, #3
 800161c:	601a      	str	r2, [r3, #0]
		}

		if(auto_count > 0)
 800161e:	4b85      	ldr	r3, [pc, #532]	; (8001834 <fsm_manual+0x504>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	dd05      	ble.n	8001632 <fsm_manual+0x302>
		{
			auto_count--;
 8001626:	4b83      	ldr	r3, [pc, #524]	; (8001834 <fsm_manual+0x504>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3b01      	subs	r3, #1
 800162c:	4a81      	ldr	r2, [pc, #516]	; (8001834 <fsm_manual+0x504>)
 800162e:	6013      	str	r3, [r2, #0]
			vertical_counter = -1;
			status_horizontal = AUTO_RED;
			status_vertical = AUTO_GREEN;
		}

		break;
 8001630:	e2f3      	b.n	8001c1a <fsm_manual+0x8ea>
			EN_horizontal = 0;
 8001632:	4b81      	ldr	r3, [pc, #516]	; (8001838 <fsm_manual+0x508>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
			EN_vertical = 0;
 8001638:	4b80      	ldr	r3, [pc, #512]	; (800183c <fsm_manual+0x50c>)
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
			horizontal_counter = -1;
 800163e:	4b80      	ldr	r3, [pc, #512]	; (8001840 <fsm_manual+0x510>)
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	601a      	str	r2, [r3, #0]
			vertical_counter = -1;
 8001646:	4b7f      	ldr	r3, [pc, #508]	; (8001844 <fsm_manual+0x514>)
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 800164e:	4b7e      	ldr	r3, [pc, #504]	; (8001848 <fsm_manual+0x518>)
 8001650:	2201      	movs	r2, #1
 8001652:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001654:	4b7d      	ldr	r3, [pc, #500]	; (800184c <fsm_manual+0x51c>)
 8001656:	2203      	movs	r2, #3
 8001658:	601a      	str	r2, [r3, #0]
		break;
 800165a:	e2de      	b.n	8001c1a <fsm_manual+0x8ea>
	}
	case MANUAL_YELLOW:
	{

		if(check_sync_yellow == 0)
 800165c:	4b7c      	ldr	r3, [pc, #496]	; (8001850 <fsm_manual+0x520>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10d      	bne.n	8001680 <fsm_manual+0x350>
		{
			check_sync_yellow = 1;
 8001664:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <fsm_manual+0x520>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_SET);
 800166a:	2201      	movs	r2, #1
 800166c:	2108      	movs	r1, #8
 800166e:	4879      	ldr	r0, [pc, #484]	; (8001854 <fsm_manual+0x524>)
 8001670:	f001 f97f 	bl	8002972 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_SET);
 8001674:	2201      	movs	r2, #1
 8001676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800167a:	4877      	ldr	r0, [pc, #476]	; (8001858 <fsm_manual+0x528>)
 800167c:	f001 f979 	bl	8002972 <HAL_GPIO_WritePin>
		}

		HAL_GPIO_TogglePin(yellow1_GPIO_Port, yellow1_Pin);
 8001680:	2108      	movs	r1, #8
 8001682:	4874      	ldr	r0, [pc, #464]	; (8001854 <fsm_manual+0x524>)
 8001684:	f001 f98d 	bl	80029a2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(yellow2_GPIO_Port, yellow2_Pin);
 8001688:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800168c:	4872      	ldr	r0, [pc, #456]	; (8001858 <fsm_manual+0x528>)
 800168e:	f001 f988 	bl	80029a2 <HAL_GPIO_TogglePin>


		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	2104      	movs	r1, #4
 8001696:	486f      	ldr	r0, [pc, #444]	; (8001854 <fsm_manual+0x524>)
 8001698:	f001 f96b 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016a2:	486d      	ldr	r0, [pc, #436]	; (8001858 <fsm_manual+0x528>)
 80016a4:	f001 f965 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_RESET);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2110      	movs	r1, #16
 80016ac:	4869      	ldr	r0, [pc, #420]	; (8001854 <fsm_manual+0x524>)
 80016ae:	f001 f960 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016b8:	4867      	ldr	r0, [pc, #412]	; (8001858 <fsm_manual+0x528>)
 80016ba:	f001 f95a 	bl	8002972 <HAL_GPIO_WritePin>

		if(isButton1Pressed() == 1)
 80016be:	f7ff fac7 	bl	8000c50 <isButton1Pressed>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b01      	cmp	r3, #1
 80016c6:	d108      	bne.n	80016da <fsm_manual+0x3aa>
		{
			status_horizontal = MANUAL_GREEN;
 80016c8:	4b5f      	ldr	r3, [pc, #380]	; (8001848 <fsm_manual+0x518>)
 80016ca:	2207      	movs	r2, #7
 80016cc:	601a      	str	r2, [r3, #0]
			status_vertical = MANUAL_GREEN;
 80016ce:	4b5f      	ldr	r3, [pc, #380]	; (800184c <fsm_manual+0x51c>)
 80016d0:	2207      	movs	r2, #7
 80016d2:	601a      	str	r2, [r3, #0]

			auto_count = 20;
 80016d4:	4b57      	ldr	r3, [pc, #348]	; (8001834 <fsm_manual+0x504>)
 80016d6:	2214      	movs	r2, #20
 80016d8:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1)
 80016da:	f7ff facb 	bl	8000c74 <isButton2Pressed>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d116      	bne.n	8001712 <fsm_manual+0x3e2>
		{
			check_button2_yellow = 1;
 80016e4:	4b5d      	ldr	r3, [pc, #372]	; (800185c <fsm_manual+0x52c>)
 80016e6:	2201      	movs	r2, #1
 80016e8:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[1] <= 99 && red_yellow_green_manual_time[1] >= 1)
 80016ea:	4b51      	ldr	r3, [pc, #324]	; (8001830 <fsm_manual+0x500>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b63      	cmp	r3, #99	; 0x63
 80016f0:	dc09      	bgt.n	8001706 <fsm_manual+0x3d6>
 80016f2:	4b4f      	ldr	r3, [pc, #316]	; (8001830 <fsm_manual+0x500>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	dd05      	ble.n	8001706 <fsm_manual+0x3d6>
			{
				red_yellow_green_manual_time[1]++;
 80016fa:	4b4d      	ldr	r3, [pc, #308]	; (8001830 <fsm_manual+0x500>)
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	3301      	adds	r3, #1
 8001700:	4a4b      	ldr	r2, [pc, #300]	; (8001830 <fsm_manual+0x500>)
 8001702:	6053      	str	r3, [r2, #4]
 8001704:	e002      	b.n	800170c <fsm_manual+0x3dc>
			}
			else
			{
				red_yellow_green_manual_time[1] = 1;
 8001706:	4b4a      	ldr	r3, [pc, #296]	; (8001830 <fsm_manual+0x500>)
 8001708:	2201      	movs	r2, #1
 800170a:	605a      	str	r2, [r3, #4]
			}

			auto_count = 20;
 800170c:	4b49      	ldr	r3, [pc, #292]	; (8001834 <fsm_manual+0x504>)
 800170e:	2214      	movs	r2, #20
 8001710:	601a      	str	r2, [r3, #0]
		}

		if(isButton3Pressed() == 1)
 8001712:	f7ff fac1 	bl	8000c98 <isButton3Pressed>
 8001716:	4603      	mov	r3, r0
 8001718:	2b01      	cmp	r3, #1
 800171a:	d116      	bne.n	800174a <fsm_manual+0x41a>
		{
			check_button3_yellow = 1;
 800171c:	4b50      	ldr	r3, [pc, #320]	; (8001860 <fsm_manual+0x530>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[1] <= 99 && red_yellow_green_manual_time[1] >= 1)
 8001722:	4b43      	ldr	r3, [pc, #268]	; (8001830 <fsm_manual+0x500>)
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b63      	cmp	r3, #99	; 0x63
 8001728:	dc09      	bgt.n	800173e <fsm_manual+0x40e>
 800172a:	4b41      	ldr	r3, [pc, #260]	; (8001830 <fsm_manual+0x500>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	dd05      	ble.n	800173e <fsm_manual+0x40e>
			{
				red_yellow_green_manual_time[1]--;
 8001732:	4b3f      	ldr	r3, [pc, #252]	; (8001830 <fsm_manual+0x500>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	3b01      	subs	r3, #1
 8001738:	4a3d      	ldr	r2, [pc, #244]	; (8001830 <fsm_manual+0x500>)
 800173a:	6053      	str	r3, [r2, #4]
 800173c:	e002      	b.n	8001744 <fsm_manual+0x414>
			}
			else
			{
				red_yellow_green_manual_time[1] = 1;
 800173e:	4b3c      	ldr	r3, [pc, #240]	; (8001830 <fsm_manual+0x500>)
 8001740:	2201      	movs	r2, #1
 8001742:	605a      	str	r2, [r3, #4]
			}

			auto_count = 20;
 8001744:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <fsm_manual+0x504>)
 8001746:	2214      	movs	r2, #20
 8001748:	601a      	str	r2, [r3, #0]
		}

		if(isButton4Pressed() == 1)
 800174a:	f7ff fab7 	bl	8000cbc <isButton4Pressed>
 800174e:	4603      	mov	r3, r0
 8001750:	2b01      	cmp	r3, #1
 8001752:	d14e      	bne.n	80017f2 <fsm_manual+0x4c2>
		{
			if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_yellow == 1 || check_button3_yellow == 1))
 8001754:	4b43      	ldr	r3, [pc, #268]	; (8001864 <fsm_manual+0x534>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	d003      	beq.n	8001764 <fsm_manual+0x434>
 800175c:	4b42      	ldr	r3, [pc, #264]	; (8001868 <fsm_manual+0x538>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d132      	bne.n	80017ca <fsm_manual+0x49a>
 8001764:	4b3d      	ldr	r3, [pc, #244]	; (800185c <fsm_manual+0x52c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d003      	beq.n	8001774 <fsm_manual+0x444>
 800176c:	4b3c      	ldr	r3, [pc, #240]	; (8001860 <fsm_manual+0x530>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d12a      	bne.n	80017ca <fsm_manual+0x49a>
			{
				red_yellow_green_manual_time[2] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[1];
 8001774:	4b2e      	ldr	r3, [pc, #184]	; (8001830 <fsm_manual+0x500>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b2d      	ldr	r3, [pc, #180]	; (8001830 <fsm_manual+0x500>)
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	4a2c      	ldr	r2, [pc, #176]	; (8001830 <fsm_manual+0x500>)
 8001780:	6093      	str	r3, [r2, #8]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001782:	4b2b      	ldr	r3, [pc, #172]	; (8001830 <fsm_manual+0x500>)
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4b2a      	ldr	r3, [pc, #168]	; (8001830 <fsm_manual+0x500>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	429a      	cmp	r2, r3
 800178c:	da1d      	bge.n	80017ca <fsm_manual+0x49a>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 800178e:	4b28      	ldr	r3, [pc, #160]	; (8001830 <fsm_manual+0x500>)
 8001790:	685a      	ldr	r2, [r3, #4]
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <fsm_manual+0x500>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	da17      	bge.n	80017ca <fsm_manual+0x49a>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 800179a:	4b25      	ldr	r3, [pc, #148]	; (8001830 <fsm_manual+0x500>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a33      	ldr	r2, [pc, #204]	; (800186c <fsm_manual+0x53c>)
 80017a0:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 80017a2:	4b23      	ldr	r3, [pc, #140]	; (8001830 <fsm_manual+0x500>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a32      	ldr	r2, [pc, #200]	; (8001870 <fsm_manual+0x540>)
 80017a8:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 80017aa:	4b21      	ldr	r3, [pc, #132]	; (8001830 <fsm_manual+0x500>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4a2f      	ldr	r2, [pc, #188]	; (800186c <fsm_manual+0x53c>)
 80017b0:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 80017b2:	4b1f      	ldr	r3, [pc, #124]	; (8001830 <fsm_manual+0x500>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a2e      	ldr	r2, [pc, #184]	; (8001870 <fsm_manual+0x540>)
 80017b8:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <fsm_manual+0x500>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	4a2b      	ldr	r2, [pc, #172]	; (800186c <fsm_manual+0x53c>)
 80017c0:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <fsm_manual+0x500>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	4a2a      	ldr	r2, [pc, #168]	; (8001870 <fsm_manual+0x540>)
 80017c8:	6093      	str	r3, [r2, #8]
				}

			}

			EN_horizontal = 0;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	; (8001838 <fsm_manual+0x508>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
			EN_vertical = 0;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <fsm_manual+0x50c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
			horizontal_counter = -1;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	; (8001840 <fsm_manual+0x510>)
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	601a      	str	r2, [r3, #0]
			vertical_counter = -1;
 80017de:	4b19      	ldr	r3, [pc, #100]	; (8001844 <fsm_manual+0x514>)
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 80017e6:	4b18      	ldr	r3, [pc, #96]	; (8001848 <fsm_manual+0x518>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 80017ec:	4b17      	ldr	r3, [pc, #92]	; (800184c <fsm_manual+0x51c>)
 80017ee:	2203      	movs	r2, #3
 80017f0:	601a      	str	r2, [r3, #0]
		}

		if(auto_count > 0)
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <fsm_manual+0x504>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	dd05      	ble.n	8001806 <fsm_manual+0x4d6>
		{
			auto_count--;
 80017fa:	4b0e      	ldr	r3, [pc, #56]	; (8001834 <fsm_manual+0x504>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3b01      	subs	r3, #1
 8001800:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <fsm_manual+0x504>)
 8001802:	6013      	str	r3, [r2, #0]
			vertical_counter = -1;
			status_horizontal = AUTO_RED;
			status_vertical = AUTO_GREEN;
		}

		break;
 8001804:	e209      	b.n	8001c1a <fsm_manual+0x8ea>
			EN_horizontal = 0;
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <fsm_manual+0x508>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
			EN_vertical = 0;
 800180c:	4b0b      	ldr	r3, [pc, #44]	; (800183c <fsm_manual+0x50c>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
			horizontal_counter = -1;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <fsm_manual+0x510>)
 8001814:	f04f 32ff 	mov.w	r2, #4294967295
 8001818:	601a      	str	r2, [r3, #0]
			vertical_counter = -1;
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <fsm_manual+0x514>)
 800181c:	f04f 32ff 	mov.w	r2, #4294967295
 8001820:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 8001822:	4b09      	ldr	r3, [pc, #36]	; (8001848 <fsm_manual+0x518>)
 8001824:	2201      	movs	r2, #1
 8001826:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <fsm_manual+0x51c>)
 800182a:	2203      	movs	r2, #3
 800182c:	601a      	str	r2, [r3, #0]
		break;
 800182e:	e1f4      	b.n	8001c1a <fsm_manual+0x8ea>
 8001830:	200000cc 	.word	0x200000cc
 8001834:	20000078 	.word	0x20000078
 8001838:	200000b4 	.word	0x200000b4
 800183c:	200000b8 	.word	0x200000b8
 8001840:	20000068 	.word	0x20000068
 8001844:	2000006c 	.word	0x2000006c
 8001848:	20000070 	.word	0x20000070
 800184c:	20000074 	.word	0x20000074
 8001850:	200000dc 	.word	0x200000dc
 8001854:	40010800 	.word	0x40010800
 8001858:	40010c00 	.word	0x40010c00
 800185c:	200000e8 	.word	0x200000e8
 8001860:	200000f4 	.word	0x200000f4
 8001864:	200000e4 	.word	0x200000e4
 8001868:	200000f0 	.word	0x200000f0
 800186c:	2000005c 	.word	0x2000005c
 8001870:	20000050 	.word	0x20000050
	}
	case MANUAL_GREEN:
	{

		if(check_sync_green == 0)
 8001874:	4b7a      	ldr	r3, [pc, #488]	; (8001a60 <fsm_manual+0x730>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d10d      	bne.n	8001898 <fsm_manual+0x568>
		{
			check_sync_green = 1;
 800187c:	4b78      	ldr	r3, [pc, #480]	; (8001a60 <fsm_manual+0x730>)
 800187e:	2201      	movs	r2, #1
 8001880:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(green1_GPIO_Port, green1_Pin, GPIO_PIN_SET);
 8001882:	2201      	movs	r2, #1
 8001884:	2110      	movs	r1, #16
 8001886:	4877      	ldr	r0, [pc, #476]	; (8001a64 <fsm_manual+0x734>)
 8001888:	f001 f873 	bl	8002972 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(green2_GPIO_Port, green2_Pin, GPIO_PIN_SET);
 800188c:	2201      	movs	r2, #1
 800188e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001892:	4875      	ldr	r0, [pc, #468]	; (8001a68 <fsm_manual+0x738>)
 8001894:	f001 f86d 	bl	8002972 <HAL_GPIO_WritePin>
		}

		HAL_GPIO_TogglePin(green1_GPIO_Port, green1_Pin);
 8001898:	2110      	movs	r1, #16
 800189a:	4872      	ldr	r0, [pc, #456]	; (8001a64 <fsm_manual+0x734>)
 800189c:	f001 f881 	bl	80029a2 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(green2_GPIO_Port, green2_Pin);
 80018a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018a4:	4870      	ldr	r0, [pc, #448]	; (8001a68 <fsm_manual+0x738>)
 80018a6:	f001 f87c 	bl	80029a2 <HAL_GPIO_TogglePin>


		HAL_GPIO_WritePin(red1_GPIO_Port, red1_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2104      	movs	r1, #4
 80018ae:	486d      	ldr	r0, [pc, #436]	; (8001a64 <fsm_manual+0x734>)
 80018b0:	f001 f85f 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(red2_GPIO_Port, red2_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ba:	486b      	ldr	r0, [pc, #428]	; (8001a68 <fsm_manual+0x738>)
 80018bc:	f001 f859 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow1_GPIO_Port, yellow1_Pin, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2108      	movs	r1, #8
 80018c4:	4867      	ldr	r0, [pc, #412]	; (8001a64 <fsm_manual+0x734>)
 80018c6:	f001 f854 	bl	8002972 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yellow2_GPIO_Port, yellow2_Pin, GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018d0:	4865      	ldr	r0, [pc, #404]	; (8001a68 <fsm_manual+0x738>)
 80018d2:	f001 f84e 	bl	8002972 <HAL_GPIO_WritePin>

		if(isButton1Pressed() == 1)
 80018d6:	f7ff f9bb 	bl	8000c50 <isButton1Pressed>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d105      	bne.n	80018ec <fsm_manual+0x5bc>
		{
			status_horizontal = AUTO_RED;
 80018e0:	4b62      	ldr	r3, [pc, #392]	; (8001a6c <fsm_manual+0x73c>)
 80018e2:	2201      	movs	r2, #1
 80018e4:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 80018e6:	4b62      	ldr	r3, [pc, #392]	; (8001a70 <fsm_manual+0x740>)
 80018e8:	2203      	movs	r2, #3
 80018ea:	601a      	str	r2, [r3, #0]
		}

		if(isButton2Pressed() == 1)
 80018ec:	f7ff f9c2 	bl	8000c74 <isButton2Pressed>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d116      	bne.n	8001924 <fsm_manual+0x5f4>
		{
			check_button2_green = 1;
 80018f6:	4b5f      	ldr	r3, [pc, #380]	; (8001a74 <fsm_manual+0x744>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[2] <= 99 && red_yellow_green_manual_time[2] >= 1)
 80018fc:	4b5e      	ldr	r3, [pc, #376]	; (8001a78 <fsm_manual+0x748>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b63      	cmp	r3, #99	; 0x63
 8001902:	dc09      	bgt.n	8001918 <fsm_manual+0x5e8>
 8001904:	4b5c      	ldr	r3, [pc, #368]	; (8001a78 <fsm_manual+0x748>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	dd05      	ble.n	8001918 <fsm_manual+0x5e8>
			{
				red_yellow_green_manual_time[2]++;
 800190c:	4b5a      	ldr	r3, [pc, #360]	; (8001a78 <fsm_manual+0x748>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	3301      	adds	r3, #1
 8001912:	4a59      	ldr	r2, [pc, #356]	; (8001a78 <fsm_manual+0x748>)
 8001914:	6093      	str	r3, [r2, #8]
 8001916:	e002      	b.n	800191e <fsm_manual+0x5ee>
			}
			else
			{
				red_yellow_green_manual_time[2] = 1;
 8001918:	4b57      	ldr	r3, [pc, #348]	; (8001a78 <fsm_manual+0x748>)
 800191a:	2201      	movs	r2, #1
 800191c:	609a      	str	r2, [r3, #8]
			}

			auto_count = 20;
 800191e:	4b57      	ldr	r3, [pc, #348]	; (8001a7c <fsm_manual+0x74c>)
 8001920:	2214      	movs	r2, #20
 8001922:	601a      	str	r2, [r3, #0]
		}

		if(isButton3Pressed() == 1)
 8001924:	f7ff f9b8 	bl	8000c98 <isButton3Pressed>
 8001928:	4603      	mov	r3, r0
 800192a:	2b01      	cmp	r3, #1
 800192c:	d116      	bne.n	800195c <fsm_manual+0x62c>
		{
			check_button3_green = 1;
 800192e:	4b54      	ldr	r3, [pc, #336]	; (8001a80 <fsm_manual+0x750>)
 8001930:	2201      	movs	r2, #1
 8001932:	601a      	str	r2, [r3, #0]

			if(red_yellow_green_manual_time[2] <= 99 && red_yellow_green_manual_time[2] >= 1)
 8001934:	4b50      	ldr	r3, [pc, #320]	; (8001a78 <fsm_manual+0x748>)
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	2b63      	cmp	r3, #99	; 0x63
 800193a:	dc09      	bgt.n	8001950 <fsm_manual+0x620>
 800193c:	4b4e      	ldr	r3, [pc, #312]	; (8001a78 <fsm_manual+0x748>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	dd05      	ble.n	8001950 <fsm_manual+0x620>
			{
				red_yellow_green_manual_time[2]--;
 8001944:	4b4c      	ldr	r3, [pc, #304]	; (8001a78 <fsm_manual+0x748>)
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	3b01      	subs	r3, #1
 800194a:	4a4b      	ldr	r2, [pc, #300]	; (8001a78 <fsm_manual+0x748>)
 800194c:	6093      	str	r3, [r2, #8]
 800194e:	e002      	b.n	8001956 <fsm_manual+0x626>
			}
			else
			{
				red_yellow_green_manual_time[2] = 1;
 8001950:	4b49      	ldr	r3, [pc, #292]	; (8001a78 <fsm_manual+0x748>)
 8001952:	2201      	movs	r2, #1
 8001954:	609a      	str	r2, [r3, #8]
			}

			auto_count = 20;
 8001956:	4b49      	ldr	r3, [pc, #292]	; (8001a7c <fsm_manual+0x74c>)
 8001958:	2214      	movs	r2, #20
 800195a:	601a      	str	r2, [r3, #0]
		}

		if(isButton4Pressed() == 1)
 800195c:	f7ff f9ae 	bl	8000cbc <isButton4Pressed>
 8001960:	4603      	mov	r3, r0
 8001962:	2b01      	cmp	r3, #1
 8001964:	f040 8135 	bne.w	8001bd2 <fsm_manual+0x8a2>
		{
			if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_yellow == 1 || check_button3_yellow == 1))
 8001968:	4b46      	ldr	r3, [pc, #280]	; (8001a84 <fsm_manual+0x754>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d003      	beq.n	8001978 <fsm_manual+0x648>
 8001970:	4b45      	ldr	r3, [pc, #276]	; (8001a88 <fsm_manual+0x758>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d135      	bne.n	80019e4 <fsm_manual+0x6b4>
 8001978:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <fsm_manual+0x75c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d003      	beq.n	8001988 <fsm_manual+0x658>
 8001980:	4b43      	ldr	r3, [pc, #268]	; (8001a90 <fsm_manual+0x760>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b01      	cmp	r3, #1
 8001986:	d12d      	bne.n	80019e4 <fsm_manual+0x6b4>
			{
				red_yellow_green_manual_time[2] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[1];
 8001988:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <fsm_manual+0x748>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <fsm_manual+0x748>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	4a39      	ldr	r2, [pc, #228]	; (8001a78 <fsm_manual+0x748>)
 8001994:	6093      	str	r3, [r2, #8]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001996:	4b38      	ldr	r3, [pc, #224]	; (8001a78 <fsm_manual+0x748>)
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <fsm_manual+0x748>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	f280 80fe 	bge.w	8001ba0 <fsm_manual+0x870>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 80019a4:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <fsm_manual+0x748>)
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4b33      	ldr	r3, [pc, #204]	; (8001a78 <fsm_manual+0x748>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f280 80f7 	bge.w	8001ba0 <fsm_manual+0x870>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 80019b2:	4b31      	ldr	r3, [pc, #196]	; (8001a78 <fsm_manual+0x748>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a37      	ldr	r2, [pc, #220]	; (8001a94 <fsm_manual+0x764>)
 80019b8:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 80019ba:	4b2f      	ldr	r3, [pc, #188]	; (8001a78 <fsm_manual+0x748>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a36      	ldr	r2, [pc, #216]	; (8001a98 <fsm_manual+0x768>)
 80019c0:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <fsm_manual+0x748>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	4a33      	ldr	r2, [pc, #204]	; (8001a94 <fsm_manual+0x764>)
 80019c8:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <fsm_manual+0x748>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	4a32      	ldr	r2, [pc, #200]	; (8001a98 <fsm_manual+0x768>)
 80019d0:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 80019d2:	4b29      	ldr	r3, [pc, #164]	; (8001a78 <fsm_manual+0x748>)
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	4a2f      	ldr	r2, [pc, #188]	; (8001a94 <fsm_manual+0x764>)
 80019d8:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 80019da:	4b27      	ldr	r3, [pc, #156]	; (8001a78 <fsm_manual+0x748>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4a2e      	ldr	r2, [pc, #184]	; (8001a98 <fsm_manual+0x768>)
 80019e0:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 80019e2:	e0dd      	b.n	8001ba0 <fsm_manual+0x870>
				}

			}
			else if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_green == 1 || check_button3_green == 1))
 80019e4:	4b27      	ldr	r3, [pc, #156]	; (8001a84 <fsm_manual+0x754>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d003      	beq.n	80019f4 <fsm_manual+0x6c4>
 80019ec:	4b26      	ldr	r3, [pc, #152]	; (8001a88 <fsm_manual+0x758>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d153      	bne.n	8001a9c <fsm_manual+0x76c>
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <fsm_manual+0x744>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d003      	beq.n	8001a04 <fsm_manual+0x6d4>
 80019fc:	4b20      	ldr	r3, [pc, #128]	; (8001a80 <fsm_manual+0x750>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d14b      	bne.n	8001a9c <fsm_manual+0x76c>
			{
				red_yellow_green_manual_time[1] = red_yellow_green_manual_time[0] - red_yellow_green_manual_time[2];
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <fsm_manual+0x748>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4b1b      	ldr	r3, [pc, #108]	; (8001a78 <fsm_manual+0x748>)
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	4a1a      	ldr	r2, [pc, #104]	; (8001a78 <fsm_manual+0x748>)
 8001a10:	6053      	str	r3, [r2, #4]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <fsm_manual+0x748>)
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <fsm_manual+0x748>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	f280 80c2 	bge.w	8001ba4 <fsm_manual+0x874>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <fsm_manual+0x748>)
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <fsm_manual+0x748>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	f280 80bb 	bge.w	8001ba4 <fsm_manual+0x874>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001a2e:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <fsm_manual+0x748>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a18      	ldr	r2, [pc, #96]	; (8001a94 <fsm_manual+0x764>)
 8001a34:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <fsm_manual+0x748>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a17      	ldr	r2, [pc, #92]	; (8001a98 <fsm_manual+0x768>)
 8001a3c:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <fsm_manual+0x748>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <fsm_manual+0x764>)
 8001a44:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <fsm_manual+0x748>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4a13      	ldr	r2, [pc, #76]	; (8001a98 <fsm_manual+0x768>)
 8001a4c:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001a4e:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <fsm_manual+0x748>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <fsm_manual+0x764>)
 8001a54:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <fsm_manual+0x748>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <fsm_manual+0x768>)
 8001a5c:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001a5e:	e0a1      	b.n	8001ba4 <fsm_manual+0x874>
 8001a60:	200000e0 	.word	0x200000e0
 8001a64:	40010800 	.word	0x40010800
 8001a68:	40010c00 	.word	0x40010c00
 8001a6c:	20000070 	.word	0x20000070
 8001a70:	20000074 	.word	0x20000074
 8001a74:	200000ec 	.word	0x200000ec
 8001a78:	200000cc 	.word	0x200000cc
 8001a7c:	20000078 	.word	0x20000078
 8001a80:	200000f8 	.word	0x200000f8
 8001a84:	200000e4 	.word	0x200000e4
 8001a88:	200000f0 	.word	0x200000f0
 8001a8c:	200000e8 	.word	0x200000e8
 8001a90:	200000f4 	.word	0x200000f4
 8001a94:	2000005c 	.word	0x2000005c
 8001a98:	20000050 	.word	0x20000050
				}

			}
			else if((check_button2_yellow == 1 || check_button3_yellow == 1) && (check_button2_green == 1 || check_button3_green == 1))
 8001a9c:	4b61      	ldr	r3, [pc, #388]	; (8001c24 <fsm_manual+0x8f4>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d003      	beq.n	8001aac <fsm_manual+0x77c>
 8001aa4:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <fsm_manual+0x8f8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d133      	bne.n	8001b14 <fsm_manual+0x7e4>
 8001aac:	4b5f      	ldr	r3, [pc, #380]	; (8001c2c <fsm_manual+0x8fc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d003      	beq.n	8001abc <fsm_manual+0x78c>
 8001ab4:	4b5e      	ldr	r3, [pc, #376]	; (8001c30 <fsm_manual+0x900>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d12b      	bne.n	8001b14 <fsm_manual+0x7e4>
			{
				red_yellow_green_manual_time[0] = red_yellow_green_manual_time[1] + red_yellow_green_manual_time[2];
 8001abc:	4b5d      	ldr	r3, [pc, #372]	; (8001c34 <fsm_manual+0x904>)
 8001abe:	685a      	ldr	r2, [r3, #4]
 8001ac0:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <fsm_manual+0x904>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a5b      	ldr	r2, [pc, #364]	; (8001c34 <fsm_manual+0x904>)
 8001ac8:	6013      	str	r3, [r2, #0]

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001aca:	4b5a      	ldr	r3, [pc, #360]	; (8001c34 <fsm_manual+0x904>)
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	4b59      	ldr	r3, [pc, #356]	; (8001c34 <fsm_manual+0x904>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	da68      	bge.n	8001ba8 <fsm_manual+0x878>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0])
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <fsm_manual+0x904>)
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	4b56      	ldr	r3, [pc, #344]	; (8001c34 <fsm_manual+0x904>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	da62      	bge.n	8001ba8 <fsm_manual+0x878>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001ae2:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <fsm_manual+0x904>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a54      	ldr	r2, [pc, #336]	; (8001c38 <fsm_manual+0x908>)
 8001ae8:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001aea:	4b52      	ldr	r3, [pc, #328]	; (8001c34 <fsm_manual+0x904>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a53      	ldr	r2, [pc, #332]	; (8001c3c <fsm_manual+0x90c>)
 8001af0:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001af2:	4b50      	ldr	r3, [pc, #320]	; (8001c34 <fsm_manual+0x904>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	4a50      	ldr	r2, [pc, #320]	; (8001c38 <fsm_manual+0x908>)
 8001af8:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001afa:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <fsm_manual+0x904>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a4f      	ldr	r2, [pc, #316]	; (8001c3c <fsm_manual+0x90c>)
 8001b00:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001b02:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <fsm_manual+0x904>)
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	4a4c      	ldr	r2, [pc, #304]	; (8001c38 <fsm_manual+0x908>)
 8001b08:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001b0a:	4b4a      	ldr	r3, [pc, #296]	; (8001c34 <fsm_manual+0x904>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	4a4b      	ldr	r2, [pc, #300]	; (8001c3c <fsm_manual+0x90c>)
 8001b10:	6093      	str	r3, [r2, #8]
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001b12:	e049      	b.n	8001ba8 <fsm_manual+0x878>
				}

			}
			else if((check_button2_red == 1 || check_button3_red == 1) && (check_button2_yellow == 1 || check_button3_yellow == 1) && (check_button2_green == 1 || check_button3_green == 1))
 8001b14:	4b4a      	ldr	r3, [pc, #296]	; (8001c40 <fsm_manual+0x910>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d003      	beq.n	8001b24 <fsm_manual+0x7f4>
 8001b1c:	4b49      	ldr	r3, [pc, #292]	; (8001c44 <fsm_manual+0x914>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d142      	bne.n	8001baa <fsm_manual+0x87a>
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <fsm_manual+0x8f4>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d003      	beq.n	8001b34 <fsm_manual+0x804>
 8001b2c:	4b3e      	ldr	r3, [pc, #248]	; (8001c28 <fsm_manual+0x8f8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d13a      	bne.n	8001baa <fsm_manual+0x87a>
 8001b34:	4b3d      	ldr	r3, [pc, #244]	; (8001c2c <fsm_manual+0x8fc>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d003      	beq.n	8001b44 <fsm_manual+0x814>
 8001b3c:	4b3c      	ldr	r3, [pc, #240]	; (8001c30 <fsm_manual+0x900>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d132      	bne.n	8001baa <fsm_manual+0x87a>
			{

				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001b44:	4b3b      	ldr	r3, [pc, #236]	; (8001c34 <fsm_manual+0x904>)
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	4b3a      	ldr	r3, [pc, #232]	; (8001c34 <fsm_manual+0x904>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	da2c      	bge.n	8001baa <fsm_manual+0x87a>
				&& red_yellow_green_manual_time[1] < red_yellow_green_manual_time[0]
 8001b50:	4b38      	ldr	r3, [pc, #224]	; (8001c34 <fsm_manual+0x904>)
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	4b37      	ldr	r3, [pc, #220]	; (8001c34 <fsm_manual+0x904>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	da26      	bge.n	8001baa <fsm_manual+0x87a>
				&& red_yellow_green_manual_time[0] == red_yellow_green_manual_time[1] + red_yellow_green_manual_time[2])
 8001b5c:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <fsm_manual+0x904>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b34      	ldr	r3, [pc, #208]	; (8001c34 <fsm_manual+0x904>)
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	4b33      	ldr	r3, [pc, #204]	; (8001c34 <fsm_manual+0x904>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	440b      	add	r3, r1
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d11d      	bne.n	8001baa <fsm_manual+0x87a>
				{
					red_yellow_green_auto_time_horizontal[0] = red_yellow_green_manual_time[0];
 8001b6e:	4b31      	ldr	r3, [pc, #196]	; (8001c34 <fsm_manual+0x904>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a31      	ldr	r2, [pc, #196]	; (8001c38 <fsm_manual+0x908>)
 8001b74:	6013      	str	r3, [r2, #0]
					red_yellow_green_auto_time_vertical[0] = red_yellow_green_manual_time[0];
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <fsm_manual+0x904>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a30      	ldr	r2, [pc, #192]	; (8001c3c <fsm_manual+0x90c>)
 8001b7c:	6013      	str	r3, [r2, #0]

					red_yellow_green_auto_time_horizontal[1] = red_yellow_green_manual_time[1];
 8001b7e:	4b2d      	ldr	r3, [pc, #180]	; (8001c34 <fsm_manual+0x904>)
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	4a2d      	ldr	r2, [pc, #180]	; (8001c38 <fsm_manual+0x908>)
 8001b84:	6053      	str	r3, [r2, #4]
					red_yellow_green_auto_time_vertical[1] = red_yellow_green_manual_time[1];
 8001b86:	4b2b      	ldr	r3, [pc, #172]	; (8001c34 <fsm_manual+0x904>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <fsm_manual+0x90c>)
 8001b8c:	6053      	str	r3, [r2, #4]

					red_yellow_green_auto_time_horizontal[2] = red_yellow_green_manual_time[2];
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <fsm_manual+0x904>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <fsm_manual+0x908>)
 8001b94:	6093      	str	r3, [r2, #8]
					red_yellow_green_auto_time_vertical[2] = red_yellow_green_manual_time[2];
 8001b96:	4b27      	ldr	r3, [pc, #156]	; (8001c34 <fsm_manual+0x904>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <fsm_manual+0x90c>)
 8001b9c:	6093      	str	r3, [r2, #8]
 8001b9e:	e004      	b.n	8001baa <fsm_manual+0x87a>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001ba0:	bf00      	nop
 8001ba2:	e002      	b.n	8001baa <fsm_manual+0x87a>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001ba4:	bf00      	nop
 8001ba6:	e000      	b.n	8001baa <fsm_manual+0x87a>
				if(red_yellow_green_manual_time[1] < red_yellow_green_manual_time[2]
 8001ba8:	bf00      	nop
				}

			}

			EN_horizontal = 0;
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <fsm_manual+0x918>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
			EN_vertical = 0;
 8001bb0:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <fsm_manual+0x91c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
			horizontal_counter = -1;
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <fsm_manual+0x920>)
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	601a      	str	r2, [r3, #0]
			vertical_counter = -1;
 8001bbe:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <fsm_manual+0x924>)
 8001bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc4:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <fsm_manual+0x928>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <fsm_manual+0x92c>)
 8001bce:	2203      	movs	r2, #3
 8001bd0:	601a      	str	r2, [r3, #0]
		}

		if(auto_count > 0)
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <fsm_manual+0x930>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	dd05      	ble.n	8001be6 <fsm_manual+0x8b6>
		{
			auto_count--;
 8001bda:	4b21      	ldr	r3, [pc, #132]	; (8001c60 <fsm_manual+0x930>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	4a1f      	ldr	r2, [pc, #124]	; (8001c60 <fsm_manual+0x930>)
 8001be2:	6013      	str	r3, [r2, #0]
			vertical_counter = -1;
			status_horizontal = AUTO_RED;
			status_vertical = AUTO_GREEN;
		}

		break;
 8001be4:	e019      	b.n	8001c1a <fsm_manual+0x8ea>
			EN_horizontal = 0;
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <fsm_manual+0x918>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
			EN_vertical = 0;
 8001bec:	4b17      	ldr	r3, [pc, #92]	; (8001c4c <fsm_manual+0x91c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
			horizontal_counter = -1;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <fsm_manual+0x920>)
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	601a      	str	r2, [r3, #0]
			vertical_counter = -1;
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <fsm_manual+0x924>)
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	601a      	str	r2, [r3, #0]
			status_horizontal = AUTO_RED;
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <fsm_manual+0x928>)
 8001c04:	2201      	movs	r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
			status_vertical = AUTO_GREEN;
 8001c08:	4b14      	ldr	r3, [pc, #80]	; (8001c5c <fsm_manual+0x92c>)
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	601a      	str	r2, [r3, #0]
		break;
 8001c0e:	e004      	b.n	8001c1a <fsm_manual+0x8ea>
		break;
 8001c10:	bf00      	nop
 8001c12:	e002      	b.n	8001c1a <fsm_manual+0x8ea>
		break;
 8001c14:	bf00      	nop
 8001c16:	e000      	b.n	8001c1a <fsm_manual+0x8ea>
		break;
 8001c18:	bf00      	nop
	}

	}

}
 8001c1a:	bf00      	nop
 8001c1c:	3710      	adds	r7, #16
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	200000e8 	.word	0x200000e8
 8001c28:	200000f4 	.word	0x200000f4
 8001c2c:	200000ec 	.word	0x200000ec
 8001c30:	200000f8 	.word	0x200000f8
 8001c34:	200000cc 	.word	0x200000cc
 8001c38:	2000005c 	.word	0x2000005c
 8001c3c:	20000050 	.word	0x20000050
 8001c40:	200000e4 	.word	0x200000e4
 8001c44:	200000f0 	.word	0x200000f0
 8001c48:	200000b4 	.word	0x200000b4
 8001c4c:	200000b8 	.word	0x200000b8
 8001c50:	20000068 	.word	0x20000068
 8001c54:	2000006c 	.word	0x2000006c
 8001c58:	20000070 	.word	0x20000070
 8001c5c:	20000074 	.word	0x20000074
 8001c60:	20000078 	.word	0x20000078

08001c64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c68:	f000 fb82 	bl	8002370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c6c:	f000 f84a 	bl	8001d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c70:	f000 f8d0 	bl	8001e14 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001c74:	f000 f882 	bl	8001d7c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  SCH_Init();
 8001c78:	f000 f956 	bl	8001f28 <SCH_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001c7c:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <main+0x7c>)
 8001c7e:	f001 fad5 	bl	800322c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Add_Task(getButton1, 0, 10);
 8001c82:	220a      	movs	r2, #10
 8001c84:	2100      	movs	r1, #0
 8001c86:	4817      	ldr	r0, [pc, #92]	; (8001ce4 <main+0x80>)
 8001c88:	f000 fa24 	bl	80020d4 <SCH_Add_Task>
  SCH_Add_Task(getButton2, 0, 10);
 8001c8c:	220a      	movs	r2, #10
 8001c8e:	2100      	movs	r1, #0
 8001c90:	4815      	ldr	r0, [pc, #84]	; (8001ce8 <main+0x84>)
 8001c92:	f000 fa1f 	bl	80020d4 <SCH_Add_Task>
  SCH_Add_Task(getButton3, 0, 10);
 8001c96:	220a      	movs	r2, #10
 8001c98:	2100      	movs	r1, #0
 8001c9a:	4814      	ldr	r0, [pc, #80]	; (8001cec <main+0x88>)
 8001c9c:	f000 fa1a 	bl	80020d4 <SCH_Add_Task>
  SCH_Add_Task(getButton4, 0, 10);
 8001ca0:	220a      	movs	r2, #10
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	4812      	ldr	r0, [pc, #72]	; (8001cf0 <main+0x8c>)
 8001ca6:	f000 fa15 	bl	80020d4 <SCH_Add_Task>

  SCH_Add_Task(testLED, 0, 1000);
 8001caa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4810      	ldr	r0, [pc, #64]	; (8001cf4 <main+0x90>)
 8001cb2:	f000 fa0f 	bl	80020d4 <SCH_Add_Task>

  SCH_Add_Task(fsm_manual, 0, 500);
 8001cb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cba:	2100      	movs	r1, #0
 8001cbc:	480e      	ldr	r0, [pc, #56]	; (8001cf8 <main+0x94>)
 8001cbe:	f000 fa09 	bl	80020d4 <SCH_Add_Task>
  SCH_Add_Task(fsm_automatic, 0, 1000);
 8001cc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	480c      	ldr	r0, [pc, #48]	; (8001cfc <main+0x98>)
 8001cca:	f000 fa03 	bl	80020d4 <SCH_Add_Task>
  SCH_Add_Task(display7SEGFinal, 0, 500);
 8001cce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	480a      	ldr	r0, [pc, #40]	; (8001d00 <main+0x9c>)
 8001cd6:	f000 f9fd 	bl	80020d4 <SCH_Add_Task>


  while (1)
  {
	  SCH_Dispatch_Tasks();
 8001cda:	f000 f9af 	bl	800203c <SCH_Dispatch_Tasks>
 8001cde:	e7fc      	b.n	8001cda <main+0x76>
 8001ce0:	20000100 	.word	0x20000100
 8001ce4:	08000ce1 	.word	0x08000ce1
 8001ce8:	08000ded 	.word	0x08000ded
 8001cec:	08000ef5 	.word	0x08000ef5
 8001cf0:	08000ffd 	.word	0x08000ffd
 8001cf4:	08001f09 	.word	0x08001f09
 8001cf8:	08001331 	.word	0x08001331
 8001cfc:	08001109 	.word	0x08001109
 8001d00:	0800014d 	.word	0x0800014d

08001d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b090      	sub	sp, #64	; 0x40
 8001d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d0a:	f107 0318 	add.w	r3, r7, #24
 8001d0e:	2228      	movs	r2, #40	; 0x28
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f001 fe3a 	bl	800398c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d18:	1d3b      	adds	r3, r7, #4
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
 8001d20:	609a      	str	r2, [r3, #8]
 8001d22:	60da      	str	r2, [r3, #12]
 8001d24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d2e:	2310      	movs	r3, #16
 8001d30:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d36:	f107 0318 	add.w	r3, r7, #24
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f000 fe4a 	bl	80029d4 <HAL_RCC_OscConfig>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001d46:	f000 f8e9 	bl	8001f1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d4a:	230f      	movs	r3, #15
 8001d4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d5e:	1d3b      	adds	r3, r7, #4
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f001 f8b6 	bl	8002ed4 <HAL_RCC_ClockConfig>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8001d6e:	f000 f8d5 	bl	8001f1c <Error_Handler>
  }
}
 8001d72:	bf00      	nop
 8001d74:	3740      	adds	r7, #64	; 0x40
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]
 8001d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d90:	463b      	mov	r3, r7
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <MX_TIM2_Init+0x94>)
 8001d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001da0:	4b1b      	ldr	r3, [pc, #108]	; (8001e10 <MX_TIM2_Init+0x94>)
 8001da2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001da6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <MX_TIM2_Init+0x94>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <MX_TIM2_Init+0x94>)
 8001db0:	2209      	movs	r2, #9
 8001db2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db4:	4b16      	ldr	r3, [pc, #88]	; (8001e10 <MX_TIM2_Init+0x94>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <MX_TIM2_Init+0x94>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dc0:	4813      	ldr	r0, [pc, #76]	; (8001e10 <MX_TIM2_Init+0x94>)
 8001dc2:	f001 f9e3 	bl	800318c <HAL_TIM_Base_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001dcc:	f000 f8a6 	bl	8001f1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dd6:	f107 0308 	add.w	r3, r7, #8
 8001dda:	4619      	mov	r1, r3
 8001ddc:	480c      	ldr	r0, [pc, #48]	; (8001e10 <MX_TIM2_Init+0x94>)
 8001dde:	f001 fb61 	bl	80034a4 <HAL_TIM_ConfigClockSource>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001de8:	f000 f898 	bl	8001f1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df0:	2300      	movs	r3, #0
 8001df2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001df4:	463b      	mov	r3, r7
 8001df6:	4619      	mov	r1, r3
 8001df8:	4805      	ldr	r0, [pc, #20]	; (8001e10 <MX_TIM2_Init+0x94>)
 8001dfa:	f001 fd39 	bl	8003870 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e04:	f000 f88a 	bl	8001f1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e08:	bf00      	nop
 8001e0a:	3718      	adds	r7, #24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000100 	.word	0x20000100

08001e14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e28:	4b2f      	ldr	r3, [pc, #188]	; (8001ee8 <MX_GPIO_Init+0xd4>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	4a2e      	ldr	r2, [pc, #184]	; (8001ee8 <MX_GPIO_Init+0xd4>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	6193      	str	r3, [r2, #24]
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <MX_GPIO_Init+0xd4>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e40:	4b29      	ldr	r3, [pc, #164]	; (8001ee8 <MX_GPIO_Init+0xd4>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	4a28      	ldr	r2, [pc, #160]	; (8001ee8 <MX_GPIO_Init+0xd4>)
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	6193      	str	r3, [r2, #24]
 8001e4c:	4b26      	ldr	r3, [pc, #152]	; (8001ee8 <MX_GPIO_Init+0xd4>)
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, red1_Pin|yellow1_Pin|green1_Pin|test_Pin
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f641 71fc 	movw	r1, #8188	; 0x1ffc
 8001e5e:	4823      	ldr	r0, [pc, #140]	; (8001eec <MX_GPIO_Init+0xd8>)
 8001e60:	f000 fd87 	bl	8002972 <HAL_GPIO_WritePin>
                          |a1_Pin|b1_Pin|c1_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN0_Pin|EN1_Pin|e2_Pin|f2_Pin
 8001e64:	2200      	movs	r2, #0
 8001e66:	f64f 71f6 	movw	r1, #65526	; 0xfff6
 8001e6a:	4821      	ldr	r0, [pc, #132]	; (8001ef0 <MX_GPIO_Init+0xdc>)
 8001e6c:	f000 fd81 	bl	8002972 <HAL_GPIO_WritePin>
                          |c2_Pin|d2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : red1_Pin yellow1_Pin green1_Pin test_Pin
                           a1_Pin b1_Pin c1_Pin d1_Pin
                           e1_Pin f1_Pin g1_Pin */
  GPIO_InitStruct.Pin = red1_Pin|yellow1_Pin|green1_Pin|test_Pin
 8001e70:	f641 73fc 	movw	r3, #8188	; 0x1ffc
 8001e74:	60bb      	str	r3, [r7, #8]
                          |a1_Pin|b1_Pin|c1_Pin|d1_Pin
                          |e1_Pin|f1_Pin|g1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e76:	2301      	movs	r3, #1
 8001e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e82:	f107 0308 	add.w	r3, r7, #8
 8001e86:	4619      	mov	r1, r3
 8001e88:	4818      	ldr	r0, [pc, #96]	; (8001eec <MX_GPIO_Init+0xd8>)
 8001e8a:	f000 fbe1 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4_Pin */
  GPIO_InitStruct.Pin = button4_Pin;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(button4_GPIO_Port, &GPIO_InitStruct);
 8001e9a:	f107 0308 	add.w	r3, r7, #8
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	4813      	ldr	r0, [pc, #76]	; (8001ef0 <MX_GPIO_Init+0xdc>)
 8001ea2:	f000 fbd5 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin e2_Pin f2_Pin
                           g2_Pin red2_Pin yellow2_Pin green2_Pin
                           EN2_Pin EN3_Pin a2_Pin b2_Pin
                           c2_Pin d2_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|e2_Pin|f2_Pin
 8001ea6:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8001eaa:	60bb      	str	r3, [r7, #8]
                          |g2_Pin|red2_Pin|yellow2_Pin|green2_Pin
                          |EN2_Pin|EN3_Pin|a2_Pin|b2_Pin
                          |c2_Pin|d2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 0308 	add.w	r3, r7, #8
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	480c      	ldr	r0, [pc, #48]	; (8001ef0 <MX_GPIO_Init+0xdc>)
 8001ec0:	f000 fbc6 	bl	8002650 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1_Pin button2_Pin button3_Pin */
  GPIO_InitStruct.Pin = button1_Pin|button2_Pin|button3_Pin;
 8001ec4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001ec8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0308 	add.w	r3, r7, #8
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4804      	ldr	r0, [pc, #16]	; (8001eec <MX_GPIO_Init+0xd8>)
 8001eda:	f000 fbb9 	bl	8002650 <HAL_GPIO_Init>

}
 8001ede:	bf00      	nop
 8001ee0:	3718      	adds	r7, #24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	40010800 	.word	0x40010800
 8001ef0:	40010c00 	.word	0x40010c00

08001ef4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001efc:	f000 f82e 	bl	8001f5c <SCH_Update>
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <testLED>:

void testLED(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(test_GPIO_Port, test_Pin);
 8001f0c:	2120      	movs	r1, #32
 8001f0e:	4802      	ldr	r0, [pc, #8]	; (8001f18 <testLED+0x10>)
 8001f10:	f000 fd47 	bl	80029a2 <HAL_GPIO_TogglePin>
}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40010800 	.word	0x40010800

08001f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f20:	b672      	cpsid	i
}
 8001f22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f24:	e7fe      	b.n	8001f24 <Error_Handler+0x8>
	...

08001f28 <SCH_Init>:
sTask SCH_tasks_G[SCH_MAX_TASKS];
unsigned char Error_code_G = 0;

//SCH_Init function
void SCH_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
	unsigned char i;

	for (i = 0; i < SCH_MAX_TASKS; i++)
 8001f2e:	2300      	movs	r3, #0
 8001f30:	71fb      	strb	r3, [r7, #7]
 8001f32:	e006      	b.n	8001f42 <SCH_Init+0x1a>
	{
		SCH_Delete_Task(i);
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 f91e 	bl	8002178 <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASKS; i++)
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	71fb      	strb	r3, [r7, #7]
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	2b27      	cmp	r3, #39	; 0x27
 8001f46:	d9f5      	bls.n	8001f34 <SCH_Init+0xc>
	}

	Error_code_G = 0;
 8001f48:	4b03      	ldr	r3, [pc, #12]	; (8001f58 <SCH_Init+0x30>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	200000fc 	.word	0x200000fc

08001f5c <SCH_Update>:


//SCH_Update function
void SCH_Update(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
    unsigned char Index;

    for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	71fb      	strb	r3, [r7, #7]
 8001f66:	e05e      	b.n	8002026 <SCH_Update+0xca>
    {
        if (SCH_tasks_G[Index].pTask)
 8001f68:	79fa      	ldrb	r2, [r7, #7]
 8001f6a:	4933      	ldr	r1, [pc, #204]	; (8002038 <SCH_Update+0xdc>)
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	4413      	add	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d051      	beq.n	8002020 <SCH_Update+0xc4>
        {
            if (SCH_tasks_G[Index].Delay == 0)
 8001f7c:	79fa      	ldrb	r2, [r7, #7]
 8001f7e:	492e      	ldr	r1, [pc, #184]	; (8002038 <SCH_Update+0xdc>)
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	3304      	adds	r3, #4
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d132      	bne.n	8001ff8 <SCH_Update+0x9c>
            {
                SCH_tasks_G[Index].RunMe += 1;
 8001f92:	79fa      	ldrb	r2, [r7, #7]
 8001f94:	4928      	ldr	r1, [pc, #160]	; (8002038 <SCH_Update+0xdc>)
 8001f96:	4613      	mov	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	330c      	adds	r3, #12
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	79fa      	ldrb	r2, [r7, #7]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	b2d8      	uxtb	r0, r3
 8001faa:	4923      	ldr	r1, [pc, #140]	; (8002038 <SCH_Update+0xdc>)
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	330c      	adds	r3, #12
 8001fb8:	4602      	mov	r2, r0
 8001fba:	701a      	strb	r2, [r3, #0]

                if (SCH_tasks_G[Index].Period)
 8001fbc:	79fa      	ldrb	r2, [r7, #7]
 8001fbe:	491e      	ldr	r1, [pc, #120]	; (8002038 <SCH_Update+0xdc>)
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3308      	adds	r3, #8
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d026      	beq.n	8002020 <SCH_Update+0xc4>
                {
                    SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 8001fd2:	79f9      	ldrb	r1, [r7, #7]
 8001fd4:	79fa      	ldrb	r2, [r7, #7]
 8001fd6:	4818      	ldr	r0, [pc, #96]	; (8002038 <SCH_Update+0xdc>)
 8001fd8:	460b      	mov	r3, r1
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4403      	add	r3, r0
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	6819      	ldr	r1, [r3, #0]
 8001fe6:	4814      	ldr	r0, [pc, #80]	; (8002038 <SCH_Update+0xdc>)
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4403      	add	r3, r0
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	6019      	str	r1, [r3, #0]
 8001ff6:	e013      	b.n	8002020 <SCH_Update+0xc4>
                }
            }
            else
            {
                SCH_tasks_G[Index].Delay -= 10;
 8001ff8:	79fa      	ldrb	r2, [r7, #7]
 8001ffa:	490f      	ldr	r1, [pc, #60]	; (8002038 <SCH_Update+0xdc>)
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	3304      	adds	r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	79fa      	ldrb	r2, [r7, #7]
 800200c:	f1a3 010a 	sub.w	r1, r3, #10
 8002010:	4809      	ldr	r0, [pc, #36]	; (8002038 <SCH_Update+0xdc>)
 8002012:	4613      	mov	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4403      	add	r3, r0
 800201c:	3304      	adds	r3, #4
 800201e:	6019      	str	r1, [r3, #0]
    for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	3301      	adds	r3, #1
 8002024:	71fb      	strb	r3, [r7, #7]
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	2b27      	cmp	r3, #39	; 0x27
 800202a:	d99d      	bls.n	8001f68 <SCH_Update+0xc>
            }
        }
    }
}
 800202c:	bf00      	nop
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr
 8002038:	20000148 	.word	0x20000148

0800203c <SCH_Dispatch_Tasks>:

//SCH_Dispatch_Tasks function
void SCH_Dispatch_Tasks(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
    unsigned char Index;

    for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 8002042:	2300      	movs	r3, #0
 8002044:	71fb      	strb	r3, [r7, #7]
 8002046:	e03a      	b.n	80020be <SCH_Dispatch_Tasks+0x82>
    {
        if (SCH_tasks_G[Index].RunMe > 0)
 8002048:	79fa      	ldrb	r2, [r7, #7]
 800204a:	4921      	ldr	r1, [pc, #132]	; (80020d0 <SCH_Dispatch_Tasks+0x94>)
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	330c      	adds	r3, #12
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d02c      	beq.n	80020b8 <SCH_Dispatch_Tasks+0x7c>
        {
            (*SCH_tasks_G[Index].pTask)();
 800205e:	79fa      	ldrb	r2, [r7, #7]
 8002060:	491b      	ldr	r1, [pc, #108]	; (80020d0 <SCH_Dispatch_Tasks+0x94>)
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4798      	blx	r3
            SCH_tasks_G[Index].RunMe -= 1;
 8002070:	79fa      	ldrb	r2, [r7, #7]
 8002072:	4917      	ldr	r1, [pc, #92]	; (80020d0 <SCH_Dispatch_Tasks+0x94>)
 8002074:	4613      	mov	r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	330c      	adds	r3, #12
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	79fa      	ldrb	r2, [r7, #7]
 8002084:	3b01      	subs	r3, #1
 8002086:	b2d8      	uxtb	r0, r3
 8002088:	4911      	ldr	r1, [pc, #68]	; (80020d0 <SCH_Dispatch_Tasks+0x94>)
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	330c      	adds	r3, #12
 8002096:	4602      	mov	r2, r0
 8002098:	701a      	strb	r2, [r3, #0]

            if (SCH_tasks_G[Index].Period == 0)
 800209a:	79fa      	ldrb	r2, [r7, #7]
 800209c:	490c      	ldr	r1, [pc, #48]	; (80020d0 <SCH_Dispatch_Tasks+0x94>)
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	440b      	add	r3, r1
 80020a8:	3308      	adds	r3, #8
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d103      	bne.n	80020b8 <SCH_Dispatch_Tasks+0x7c>
            {
                SCH_Delete_Task(Index);
 80020b0:	79fb      	ldrb	r3, [r7, #7]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f000 f860 	bl	8002178 <SCH_Delete_Task>
    for (Index = 0; Index < SCH_MAX_TASKS; Index++)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	3301      	adds	r3, #1
 80020bc:	71fb      	strb	r3, [r7, #7]
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	2b27      	cmp	r3, #39	; 0x27
 80020c2:	d9c1      	bls.n	8002048 <SCH_Dispatch_Tasks+0xc>
            }
        }
    }
}
 80020c4:	bf00      	nop
 80020c6:	bf00      	nop
 80020c8:	3708      	adds	r7, #8
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000148 	.word	0x20000148

080020d4 <SCH_Add_Task>:

//SCH_Add_Task function
unsigned char SCH_Add_Task(void (*pFunction)(), uint32_t DELAY, uint32_t PERIOD)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b087      	sub	sp, #28
 80020d8:	af00      	add	r7, sp, #0
 80020da:	60f8      	str	r0, [r7, #12]
 80020dc:	60b9      	str	r1, [r7, #8]
 80020de:	607a      	str	r2, [r7, #4]
    unsigned char Index = 0;
 80020e0:	2300      	movs	r3, #0
 80020e2:	75fb      	strb	r3, [r7, #23]

    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 80020e4:	e002      	b.n	80020ec <SCH_Add_Task+0x18>
    {
        Index++;
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	3301      	adds	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
    while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASKS))
 80020ec:	7dfa      	ldrb	r2, [r7, #23]
 80020ee:	4920      	ldr	r1, [pc, #128]	; (8002170 <SCH_Add_Task+0x9c>)
 80020f0:	4613      	mov	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d002      	beq.n	8002106 <SCH_Add_Task+0x32>
 8002100:	7dfb      	ldrb	r3, [r7, #23]
 8002102:	2b27      	cmp	r3, #39	; 0x27
 8002104:	d9ef      	bls.n	80020e6 <SCH_Add_Task+0x12>
    }

    if (Index == SCH_MAX_TASKS)
 8002106:	7dfb      	ldrb	r3, [r7, #23]
 8002108:	2b28      	cmp	r3, #40	; 0x28
 800210a:	d104      	bne.n	8002116 <SCH_Add_Task+0x42>
    {
        Error_code_G = ERROR_SCH_TOO_MANY_TASKS;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <SCH_Add_Task+0xa0>)
 800210e:	2201      	movs	r2, #1
 8002110:	701a      	strb	r2, [r3, #0]
        return SCH_MAX_TASKS;
 8002112:	2328      	movs	r3, #40	; 0x28
 8002114:	e027      	b.n	8002166 <SCH_Add_Task+0x92>
    }

    SCH_tasks_G[Index].pTask = pFunction;
 8002116:	7dfa      	ldrb	r2, [r7, #23]
 8002118:	4915      	ldr	r1, [pc, #84]	; (8002170 <SCH_Add_Task+0x9c>)
 800211a:	4613      	mov	r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Delay = DELAY;
 8002128:	7dfa      	ldrb	r2, [r7, #23]
 800212a:	4911      	ldr	r1, [pc, #68]	; (8002170 <SCH_Add_Task+0x9c>)
 800212c:	4613      	mov	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	3304      	adds	r3, #4
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].Period = PERIOD;
 800213c:	7dfa      	ldrb	r2, [r7, #23]
 800213e:	490c      	ldr	r1, [pc, #48]	; (8002170 <SCH_Add_Task+0x9c>)
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3308      	adds	r3, #8
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[Index].RunMe = 0;
 8002150:	7dfa      	ldrb	r2, [r7, #23]
 8002152:	4907      	ldr	r1, [pc, #28]	; (8002170 <SCH_Add_Task+0x9c>)
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	330c      	adds	r3, #12
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]

    return Index;
 8002164:	7dfb      	ldrb	r3, [r7, #23]
}
 8002166:	4618      	mov	r0, r3
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000148 	.word	0x20000148
 8002174:	200000fc 	.word	0x200000fc

08002178 <SCH_Delete_Task>:


//SCH_Delete_Task function
uint8_t SCH_Delete_Task(uint32_t taskID)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
    uint8_t Return_code;

    if (SCH_tasks_G[taskID].pTask == 0)
 8002180:	491f      	ldr	r1, [pc, #124]	; (8002200 <SCH_Delete_Task+0x88>)
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d105      	bne.n	80021a0 <SCH_Delete_Task+0x28>
    {
        Error_code_G = ERROR_SCH_CANNOT_DELETE_TASK;
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <SCH_Delete_Task+0x8c>)
 8002196:	2202      	movs	r2, #2
 8002198:	701a      	strb	r2, [r3, #0]
        Return_code = RETURN_ERROR;
 800219a:	2300      	movs	r3, #0
 800219c:	73fb      	strb	r3, [r7, #15]
 800219e:	e001      	b.n	80021a4 <SCH_Delete_Task+0x2c>
    }
    else
    {
        Return_code = RETURN_NORMAL;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
    }

    SCH_tasks_G[taskID].pTask = 0x0000;
 80021a4:	4916      	ldr	r1, [pc, #88]	; (8002200 <SCH_Delete_Task+0x88>)
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].Delay = 0;
 80021b6:	4912      	ldr	r1, [pc, #72]	; (8002200 <SCH_Delete_Task+0x88>)
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	3304      	adds	r3, #4
 80021c6:	2200      	movs	r2, #0
 80021c8:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].Period = 0;
 80021ca:	490d      	ldr	r1, [pc, #52]	; (8002200 <SCH_Delete_Task+0x88>)
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	440b      	add	r3, r1
 80021d8:	3308      	adds	r3, #8
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
    SCH_tasks_G[taskID].RunMe = 0;
 80021de:	4908      	ldr	r1, [pc, #32]	; (8002200 <SCH_Delete_Task+0x88>)
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	440b      	add	r3, r1
 80021ec:	330c      	adds	r3, #12
 80021ee:	2200      	movs	r2, #0
 80021f0:	701a      	strb	r2, [r3, #0]

    return Return_code;
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000148 	.word	0x20000148
 8002204:	200000fc 	.word	0x200000fc

08002208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800220e:	4b15      	ldr	r3, [pc, #84]	; (8002264 <HAL_MspInit+0x5c>)
 8002210:	699b      	ldr	r3, [r3, #24]
 8002212:	4a14      	ldr	r2, [pc, #80]	; (8002264 <HAL_MspInit+0x5c>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6193      	str	r3, [r2, #24]
 800221a:	4b12      	ldr	r3, [pc, #72]	; (8002264 <HAL_MspInit+0x5c>)
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <HAL_MspInit+0x5c>)
 8002228:	69db      	ldr	r3, [r3, #28]
 800222a:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_MspInit+0x5c>)
 800222c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002230:	61d3      	str	r3, [r2, #28]
 8002232:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <HAL_MspInit+0x5c>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800223e:	4b0a      	ldr	r3, [pc, #40]	; (8002268 <HAL_MspInit+0x60>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_MspInit+0x60>)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000

0800226c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800227c:	d113      	bne.n	80022a6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800227e:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_TIM_Base_MspInit+0x44>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <HAL_TIM_Base_MspInit+0x44>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	61d3      	str	r3, [r2, #28]
 800228a:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_TIM_Base_MspInit+0x44>)
 800228c:	69db      	ldr	r3, [r3, #28]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002296:	2200      	movs	r2, #0
 8002298:	2100      	movs	r1, #0
 800229a:	201c      	movs	r0, #28
 800229c:	f000 f9a1 	bl	80025e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80022a0:	201c      	movs	r0, #28
 80022a2:	f000 f9ba 	bl	800261a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000

080022b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <NMI_Handler+0x4>

080022ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022be:	e7fe      	b.n	80022be <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	e7fe      	b.n	80022c4 <MemManage_Handler+0x4>

080022c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ca:	e7fe      	b.n	80022ca <BusFault_Handler+0x4>

080022cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d0:	e7fe      	b.n	80022d0 <UsageFault_Handler+0x4>

080022d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr

080022de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr

080022ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fa:	f000 f87f 	bl	80023fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <TIM2_IRQHandler+0x10>)
 800230a:	f000 ffdb 	bl	80032c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	20000100 	.word	0x20000100

08002318 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002324:	f7ff fff8 	bl	8002318 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002328:	480b      	ldr	r0, [pc, #44]	; (8002358 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800232a:	490c      	ldr	r1, [pc, #48]	; (800235c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800232c:	4a0c      	ldr	r2, [pc, #48]	; (8002360 <LoopFillZerobss+0x16>)
  movs r3, #0
 800232e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002330:	e002      	b.n	8002338 <LoopCopyDataInit>

08002332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002336:	3304      	adds	r3, #4

08002338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800233a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800233c:	d3f9      	bcc.n	8002332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800233e:	4a09      	ldr	r2, [pc, #36]	; (8002364 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002340:	4c09      	ldr	r4, [pc, #36]	; (8002368 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002344:	e001      	b.n	800234a <LoopFillZerobss>

08002346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002348:	3204      	adds	r2, #4

0800234a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800234a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800234c:	d3fb      	bcc.n	8002346 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800234e:	f001 faf9 	bl	8003944 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002352:	f7ff fc87 	bl	8001c64 <main>
  bx lr
 8002356:	4770      	bx	lr
  ldr r0, =_sdata
 8002358:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800235c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002360:	080039e0 	.word	0x080039e0
  ldr r2, =_sbss
 8002364:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002368:	2000046c 	.word	0x2000046c

0800236c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800236c:	e7fe      	b.n	800236c <ADC1_2_IRQHandler>
	...

08002370 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002374:	4b08      	ldr	r3, [pc, #32]	; (8002398 <HAL_Init+0x28>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a07      	ldr	r2, [pc, #28]	; (8002398 <HAL_Init+0x28>)
 800237a:	f043 0310 	orr.w	r3, r3, #16
 800237e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002380:	2003      	movs	r0, #3
 8002382:	f000 f923 	bl	80025cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002386:	200f      	movs	r0, #15
 8002388:	f000 f808 	bl	800239c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800238c:	f7ff ff3c 	bl	8002208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40022000 	.word	0x40022000

0800239c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <HAL_InitTick+0x54>)
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_InitTick+0x58>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80023b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ba:	4618      	mov	r0, r3
 80023bc:	f000 f93b 	bl	8002636 <HAL_SYSTICK_Config>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00e      	b.n	80023e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d80a      	bhi.n	80023e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f000 f903 	bl	80025e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <HAL_InitTick+0x5c>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
 80023e4:	e000      	b.n	80023e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
}
 80023e8:	4618      	mov	r0, r3
 80023ea:	3708      	adds	r7, #8
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	2000007c 	.word	0x2000007c
 80023f4:	20000084 	.word	0x20000084
 80023f8:	20000080 	.word	0x20000080

080023fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_IncTick+0x1c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	461a      	mov	r2, r3
 8002406:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_IncTick+0x20>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4413      	add	r3, r2
 800240c:	4a03      	ldr	r2, [pc, #12]	; (800241c <HAL_IncTick+0x20>)
 800240e:	6013      	str	r3, [r2, #0]
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr
 8002418:	20000084 	.word	0x20000084
 800241c:	20000468 	.word	0x20000468

08002420 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b02      	ldr	r3, [pc, #8]	; (8002430 <HAL_GetTick+0x10>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	20000468 	.word	0x20000468

08002434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f003 0307 	and.w	r3, r3, #7
 8002442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002444:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002450:	4013      	ands	r3, r2
 8002452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800245c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002466:	4a04      	ldr	r2, [pc, #16]	; (8002478 <__NVIC_SetPriorityGrouping+0x44>)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	60d3      	str	r3, [r2, #12]
}
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000ed00 	.word	0xe000ed00

0800247c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <__NVIC_GetPriorityGrouping+0x18>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	f003 0307 	and.w	r3, r3, #7
}
 800248a:	4618      	mov	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	e000ed00 	.word	0xe000ed00

08002498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	db0b      	blt.n	80024c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	f003 021f 	and.w	r2, r3, #31
 80024b0:	4906      	ldr	r1, [pc, #24]	; (80024cc <__NVIC_EnableIRQ+0x34>)
 80024b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b6:	095b      	lsrs	r3, r3, #5
 80024b8:	2001      	movs	r0, #1
 80024ba:	fa00 f202 	lsl.w	r2, r0, r2
 80024be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	; (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	; (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	bc80      	pop	{r7}
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	; 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3b01      	subs	r3, #1
 8002594:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002598:	d301      	bcc.n	800259e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259a:	2301      	movs	r3, #1
 800259c:	e00f      	b.n	80025be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800259e:	4a0a      	ldr	r2, [pc, #40]	; (80025c8 <SysTick_Config+0x40>)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025a6:	210f      	movs	r1, #15
 80025a8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ac:	f7ff ff90 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b0:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <SysTick_Config+0x40>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025b6:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <SysTick_Config+0x40>)
 80025b8:	2207      	movs	r2, #7
 80025ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	e000e010 	.word	0xe000e010

080025cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff ff2d 	bl	8002434 <__NVIC_SetPriorityGrouping>
}
 80025da:	bf00      	nop
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e2:	b580      	push	{r7, lr}
 80025e4:	b086      	sub	sp, #24
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	4603      	mov	r3, r0
 80025ea:	60b9      	str	r1, [r7, #8]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f4:	f7ff ff42 	bl	800247c <__NVIC_GetPriorityGrouping>
 80025f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68b9      	ldr	r1, [r7, #8]
 80025fe:	6978      	ldr	r0, [r7, #20]
 8002600:	f7ff ff90 	bl	8002524 <NVIC_EncodePriority>
 8002604:	4602      	mov	r2, r0
 8002606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260a:	4611      	mov	r1, r2
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff ff5f 	bl	80024d0 <__NVIC_SetPriority>
}
 8002612:	bf00      	nop
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff ff35 	bl	8002498 <__NVIC_EnableIRQ>
}
 800262e:	bf00      	nop
 8002630:	3708      	adds	r7, #8
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}

08002636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ffa2 	bl	8002588 <SysTick_Config>
 8002644:	4603      	mov	r3, r0
}
 8002646:	4618      	mov	r0, r3
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002650:	b480      	push	{r7}
 8002652:	b08b      	sub	sp, #44	; 0x2c
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800265a:	2300      	movs	r3, #0
 800265c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800265e:	2300      	movs	r3, #0
 8002660:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002662:	e148      	b.n	80028f6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002664:	2201      	movs	r2, #1
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	429a      	cmp	r2, r3
 800267e:	f040 8137 	bne.w	80028f0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	4aa3      	ldr	r2, [pc, #652]	; (8002914 <HAL_GPIO_Init+0x2c4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d05e      	beq.n	800274a <HAL_GPIO_Init+0xfa>
 800268c:	4aa1      	ldr	r2, [pc, #644]	; (8002914 <HAL_GPIO_Init+0x2c4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d875      	bhi.n	800277e <HAL_GPIO_Init+0x12e>
 8002692:	4aa1      	ldr	r2, [pc, #644]	; (8002918 <HAL_GPIO_Init+0x2c8>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d058      	beq.n	800274a <HAL_GPIO_Init+0xfa>
 8002698:	4a9f      	ldr	r2, [pc, #636]	; (8002918 <HAL_GPIO_Init+0x2c8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d86f      	bhi.n	800277e <HAL_GPIO_Init+0x12e>
 800269e:	4a9f      	ldr	r2, [pc, #636]	; (800291c <HAL_GPIO_Init+0x2cc>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d052      	beq.n	800274a <HAL_GPIO_Init+0xfa>
 80026a4:	4a9d      	ldr	r2, [pc, #628]	; (800291c <HAL_GPIO_Init+0x2cc>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d869      	bhi.n	800277e <HAL_GPIO_Init+0x12e>
 80026aa:	4a9d      	ldr	r2, [pc, #628]	; (8002920 <HAL_GPIO_Init+0x2d0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d04c      	beq.n	800274a <HAL_GPIO_Init+0xfa>
 80026b0:	4a9b      	ldr	r2, [pc, #620]	; (8002920 <HAL_GPIO_Init+0x2d0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d863      	bhi.n	800277e <HAL_GPIO_Init+0x12e>
 80026b6:	4a9b      	ldr	r2, [pc, #620]	; (8002924 <HAL_GPIO_Init+0x2d4>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d046      	beq.n	800274a <HAL_GPIO_Init+0xfa>
 80026bc:	4a99      	ldr	r2, [pc, #612]	; (8002924 <HAL_GPIO_Init+0x2d4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d85d      	bhi.n	800277e <HAL_GPIO_Init+0x12e>
 80026c2:	2b12      	cmp	r3, #18
 80026c4:	d82a      	bhi.n	800271c <HAL_GPIO_Init+0xcc>
 80026c6:	2b12      	cmp	r3, #18
 80026c8:	d859      	bhi.n	800277e <HAL_GPIO_Init+0x12e>
 80026ca:	a201      	add	r2, pc, #4	; (adr r2, 80026d0 <HAL_GPIO_Init+0x80>)
 80026cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d0:	0800274b 	.word	0x0800274b
 80026d4:	08002725 	.word	0x08002725
 80026d8:	08002737 	.word	0x08002737
 80026dc:	08002779 	.word	0x08002779
 80026e0:	0800277f 	.word	0x0800277f
 80026e4:	0800277f 	.word	0x0800277f
 80026e8:	0800277f 	.word	0x0800277f
 80026ec:	0800277f 	.word	0x0800277f
 80026f0:	0800277f 	.word	0x0800277f
 80026f4:	0800277f 	.word	0x0800277f
 80026f8:	0800277f 	.word	0x0800277f
 80026fc:	0800277f 	.word	0x0800277f
 8002700:	0800277f 	.word	0x0800277f
 8002704:	0800277f 	.word	0x0800277f
 8002708:	0800277f 	.word	0x0800277f
 800270c:	0800277f 	.word	0x0800277f
 8002710:	0800277f 	.word	0x0800277f
 8002714:	0800272d 	.word	0x0800272d
 8002718:	08002741 	.word	0x08002741
 800271c:	4a82      	ldr	r2, [pc, #520]	; (8002928 <HAL_GPIO_Init+0x2d8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d013      	beq.n	800274a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002722:	e02c      	b.n	800277e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	623b      	str	r3, [r7, #32]
          break;
 800272a:	e029      	b.n	8002780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	3304      	adds	r3, #4
 8002732:	623b      	str	r3, [r7, #32]
          break;
 8002734:	e024      	b.n	8002780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	3308      	adds	r3, #8
 800273c:	623b      	str	r3, [r7, #32]
          break;
 800273e:	e01f      	b.n	8002780 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	330c      	adds	r3, #12
 8002746:	623b      	str	r3, [r7, #32]
          break;
 8002748:	e01a      	b.n	8002780 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d102      	bne.n	8002758 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002752:	2304      	movs	r3, #4
 8002754:	623b      	str	r3, [r7, #32]
          break;
 8002756:	e013      	b.n	8002780 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002760:	2308      	movs	r3, #8
 8002762:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	611a      	str	r2, [r3, #16]
          break;
 800276a:	e009      	b.n	8002780 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800276c:	2308      	movs	r3, #8
 800276e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69fa      	ldr	r2, [r7, #28]
 8002774:	615a      	str	r2, [r3, #20]
          break;
 8002776:	e003      	b.n	8002780 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002778:	2300      	movs	r3, #0
 800277a:	623b      	str	r3, [r7, #32]
          break;
 800277c:	e000      	b.n	8002780 <HAL_GPIO_Init+0x130>
          break;
 800277e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2bff      	cmp	r3, #255	; 0xff
 8002784:	d801      	bhi.n	800278a <HAL_GPIO_Init+0x13a>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	e001      	b.n	800278e <HAL_GPIO_Init+0x13e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002790:	69bb      	ldr	r3, [r7, #24]
 8002792:	2bff      	cmp	r3, #255	; 0xff
 8002794:	d802      	bhi.n	800279c <HAL_GPIO_Init+0x14c>
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	e002      	b.n	80027a2 <HAL_GPIO_Init+0x152>
 800279c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279e:	3b08      	subs	r3, #8
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	210f      	movs	r1, #15
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	fa01 f303 	lsl.w	r3, r1, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	401a      	ands	r2, r3
 80027b4:	6a39      	ldr	r1, [r7, #32]
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	fa01 f303 	lsl.w	r3, r1, r3
 80027bc:	431a      	orrs	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 8090 	beq.w	80028f0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80027d0:	4b56      	ldr	r3, [pc, #344]	; (800292c <HAL_GPIO_Init+0x2dc>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a55      	ldr	r2, [pc, #340]	; (800292c <HAL_GPIO_Init+0x2dc>)
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	6193      	str	r3, [r2, #24]
 80027dc:	4b53      	ldr	r3, [pc, #332]	; (800292c <HAL_GPIO_Init+0x2dc>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	60bb      	str	r3, [r7, #8]
 80027e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027e8:	4a51      	ldr	r2, [pc, #324]	; (8002930 <HAL_GPIO_Init+0x2e0>)
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	089b      	lsrs	r3, r3, #2
 80027ee:	3302      	adds	r3, #2
 80027f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	220f      	movs	r2, #15
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	4013      	ands	r3, r2
 800280a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a49      	ldr	r2, [pc, #292]	; (8002934 <HAL_GPIO_Init+0x2e4>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d00d      	beq.n	8002830 <HAL_GPIO_Init+0x1e0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a48      	ldr	r2, [pc, #288]	; (8002938 <HAL_GPIO_Init+0x2e8>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d007      	beq.n	800282c <HAL_GPIO_Init+0x1dc>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a47      	ldr	r2, [pc, #284]	; (800293c <HAL_GPIO_Init+0x2ec>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d101      	bne.n	8002828 <HAL_GPIO_Init+0x1d8>
 8002824:	2302      	movs	r3, #2
 8002826:	e004      	b.n	8002832 <HAL_GPIO_Init+0x1e2>
 8002828:	2303      	movs	r3, #3
 800282a:	e002      	b.n	8002832 <HAL_GPIO_Init+0x1e2>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_GPIO_Init+0x1e2>
 8002830:	2300      	movs	r3, #0
 8002832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002834:	f002 0203 	and.w	r2, r2, #3
 8002838:	0092      	lsls	r2, r2, #2
 800283a:	4093      	lsls	r3, r2
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002842:	493b      	ldr	r1, [pc, #236]	; (8002930 <HAL_GPIO_Init+0x2e0>)
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	089b      	lsrs	r3, r3, #2
 8002848:	3302      	adds	r3, #2
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d006      	beq.n	800286a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800285c:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	4937      	ldr	r1, [pc, #220]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	608b      	str	r3, [r1, #8]
 8002868:	e006      	b.n	8002878 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800286a:	4b35      	ldr	r3, [pc, #212]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	43db      	mvns	r3, r3
 8002872:	4933      	ldr	r1, [pc, #204]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 8002874:	4013      	ands	r3, r2
 8002876:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d006      	beq.n	8002892 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002884:	4b2e      	ldr	r3, [pc, #184]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 8002886:	68da      	ldr	r2, [r3, #12]
 8002888:	492d      	ldr	r1, [pc, #180]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	60cb      	str	r3, [r1, #12]
 8002890:	e006      	b.n	80028a0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002892:	4b2b      	ldr	r3, [pc, #172]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	43db      	mvns	r3, r3
 800289a:	4929      	ldr	r1, [pc, #164]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 800289c:	4013      	ands	r3, r2
 800289e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028ac:	4b24      	ldr	r3, [pc, #144]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4923      	ldr	r1, [pc, #140]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80028ba:	4b21      	ldr	r3, [pc, #132]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	43db      	mvns	r3, r3
 80028c2:	491f      	ldr	r1, [pc, #124]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 80028c4:	4013      	ands	r3, r2
 80028c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d006      	beq.n	80028e2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4919      	ldr	r1, [pc, #100]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]
 80028e0:	e006      	b.n	80028f0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028e2:	4b17      	ldr	r3, [pc, #92]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	43db      	mvns	r3, r3
 80028ea:	4915      	ldr	r1, [pc, #84]	; (8002940 <HAL_GPIO_Init+0x2f0>)
 80028ec:	4013      	ands	r3, r2
 80028ee:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	3301      	adds	r3, #1
 80028f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	f47f aeaf 	bne.w	8002664 <HAL_GPIO_Init+0x14>
  }
}
 8002906:	bf00      	nop
 8002908:	bf00      	nop
 800290a:	372c      	adds	r7, #44	; 0x2c
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	10320000 	.word	0x10320000
 8002918:	10310000 	.word	0x10310000
 800291c:	10220000 	.word	0x10220000
 8002920:	10210000 	.word	0x10210000
 8002924:	10120000 	.word	0x10120000
 8002928:	10110000 	.word	0x10110000
 800292c:	40021000 	.word	0x40021000
 8002930:	40010000 	.word	0x40010000
 8002934:	40010800 	.word	0x40010800
 8002938:	40010c00 	.word	0x40010c00
 800293c:	40011000 	.word	0x40011000
 8002940:	40010400 	.word	0x40010400

08002944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d002      	beq.n	8002962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800295c:	2301      	movs	r3, #1
 800295e:	73fb      	strb	r3, [r7, #15]
 8002960:	e001      	b.n	8002966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002962:	2300      	movs	r3, #0
 8002964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002966:	7bfb      	ldrb	r3, [r7, #15]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
 800297a:	460b      	mov	r3, r1
 800297c:	807b      	strh	r3, [r7, #2]
 800297e:	4613      	mov	r3, r2
 8002980:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002982:	787b      	ldrb	r3, [r7, #1]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002988:	887a      	ldrh	r2, [r7, #2]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800298e:	e003      	b.n	8002998 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002990:	887b      	ldrh	r3, [r7, #2]
 8002992:	041a      	lsls	r2, r3, #16
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	611a      	str	r2, [r3, #16]
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
 80029aa:	460b      	mov	r3, r1
 80029ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029b4:	887a      	ldrh	r2, [r7, #2]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4013      	ands	r3, r2
 80029ba:	041a      	lsls	r2, r3, #16
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	43d9      	mvns	r1, r3
 80029c0:	887b      	ldrh	r3, [r7, #2]
 80029c2:	400b      	ands	r3, r1
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	611a      	str	r2, [r3, #16]
}
 80029ca:	bf00      	nop
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr

080029d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e26c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8087 	beq.w	8002b02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f4:	4b92      	ldr	r3, [pc, #584]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f003 030c 	and.w	r3, r3, #12
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d00c      	beq.n	8002a1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a00:	4b8f      	ldr	r3, [pc, #572]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	f003 030c 	and.w	r3, r3, #12
 8002a08:	2b08      	cmp	r3, #8
 8002a0a:	d112      	bne.n	8002a32 <HAL_RCC_OscConfig+0x5e>
 8002a0c:	4b8c      	ldr	r3, [pc, #560]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a18:	d10b      	bne.n	8002a32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1a:	4b89      	ldr	r3, [pc, #548]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d06c      	beq.n	8002b00 <HAL_RCC_OscConfig+0x12c>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d168      	bne.n	8002b00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e246      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a3a:	d106      	bne.n	8002a4a <HAL_RCC_OscConfig+0x76>
 8002a3c:	4b80      	ldr	r3, [pc, #512]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a7f      	ldr	r2, [pc, #508]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	e02e      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd4>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10c      	bne.n	8002a6c <HAL_RCC_OscConfig+0x98>
 8002a52:	4b7b      	ldr	r3, [pc, #492]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a7a      	ldr	r2, [pc, #488]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b78      	ldr	r3, [pc, #480]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a77      	ldr	r2, [pc, #476]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	e01d      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd4>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0xbc>
 8002a76:	4b72      	ldr	r3, [pc, #456]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a71      	ldr	r2, [pc, #452]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	4b6f      	ldr	r3, [pc, #444]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a6e      	ldr	r2, [pc, #440]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a8c:	6013      	str	r3, [r2, #0]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCC_OscConfig+0xd4>
 8002a90:	4b6b      	ldr	r3, [pc, #428]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a6a      	ldr	r2, [pc, #424]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a9a:	6013      	str	r3, [r2, #0]
 8002a9c:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a67      	ldr	r2, [pc, #412]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002aa6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d013      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff fcb6 	bl	8002420 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff fcb2 	bl	8002420 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1fa      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aca:	4b5d      	ldr	r3, [pc, #372]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0xe4>
 8002ad6:	e014      	b.n	8002b02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad8:	f7ff fca2 	bl	8002420 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae0:	f7ff fc9e 	bl	8002420 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b64      	cmp	r3, #100	; 0x64
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e1e6      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af2:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x10c>
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d063      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b0e:	4b4c      	ldr	r3, [pc, #304]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00b      	beq.n	8002b32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b1a:	4b49      	ldr	r3, [pc, #292]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 030c 	and.w	r3, r3, #12
 8002b22:	2b08      	cmp	r3, #8
 8002b24:	d11c      	bne.n	8002b60 <HAL_RCC_OscConfig+0x18c>
 8002b26:	4b46      	ldr	r3, [pc, #280]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b32:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_RCC_OscConfig+0x176>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d001      	beq.n	8002b4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e1ba      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4b3d      	ldr	r3, [pc, #244]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	00db      	lsls	r3, r3, #3
 8002b58:	4939      	ldr	r1, [pc, #228]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b5e:	e03a      	b.n	8002bd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d020      	beq.n	8002baa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b68:	4b36      	ldr	r3, [pc, #216]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6e:	f7ff fc57 	bl	8002420 <HAL_GetTick>
 8002b72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b76:	f7ff fc53 	bl	8002420 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e19b      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	4b2d      	ldr	r3, [pc, #180]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0302 	and.w	r3, r3, #2
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b94:	4b2a      	ldr	r3, [pc, #168]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	4927      	ldr	r1, [pc, #156]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
 8002ba8:	e015      	b.n	8002bd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002baa:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <HAL_RCC_OscConfig+0x270>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7ff fc36 	bl	8002420 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb8:	f7ff fc32 	bl	8002420 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e17a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0308 	and.w	r3, r3, #8
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d03a      	beq.n	8002c58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d019      	beq.n	8002c1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bea:	4b17      	ldr	r3, [pc, #92]	; (8002c48 <HAL_RCC_OscConfig+0x274>)
 8002bec:	2201      	movs	r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7ff fc16 	bl	8002420 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bf8:	f7ff fc12 	bl	8002420 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e15a      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_RCC_OscConfig+0x26c>)
 8002c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c16:	2001      	movs	r0, #1
 8002c18:	f000 fa9a 	bl	8003150 <RCC_Delay>
 8002c1c:	e01c      	b.n	8002c58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_RCC_OscConfig+0x274>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c24:	f7ff fbfc 	bl	8002420 <HAL_GetTick>
 8002c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2a:	e00f      	b.n	8002c4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c2c:	f7ff fbf8 	bl	8002420 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d908      	bls.n	8002c4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e140      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
 8002c3e:	bf00      	nop
 8002c40:	40021000 	.word	0x40021000
 8002c44:	42420000 	.word	0x42420000
 8002c48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c4c:	4b9e      	ldr	r3, [pc, #632]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d1e9      	bne.n	8002c2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80a6 	beq.w	8002db2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c66:	2300      	movs	r3, #0
 8002c68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6a:	4b97      	ldr	r3, [pc, #604]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002c6c:	69db      	ldr	r3, [r3, #28]
 8002c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10d      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c76:	4b94      	ldr	r3, [pc, #592]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	4a93      	ldr	r2, [pc, #588]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c80:	61d3      	str	r3, [r2, #28]
 8002c82:	4b91      	ldr	r3, [pc, #580]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	60bb      	str	r3, [r7, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c92:	4b8e      	ldr	r3, [pc, #568]	; (8002ecc <HAL_RCC_OscConfig+0x4f8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d118      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c9e:	4b8b      	ldr	r3, [pc, #556]	; (8002ecc <HAL_RCC_OscConfig+0x4f8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a8a      	ldr	r2, [pc, #552]	; (8002ecc <HAL_RCC_OscConfig+0x4f8>)
 8002ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002caa:	f7ff fbb9 	bl	8002420 <HAL_GetTick>
 8002cae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb2:	f7ff fbb5 	bl	8002420 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b64      	cmp	r3, #100	; 0x64
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0fd      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc4:	4b81      	ldr	r3, [pc, #516]	; (8002ecc <HAL_RCC_OscConfig+0x4f8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0f0      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d106      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x312>
 8002cd8:	4b7b      	ldr	r3, [pc, #492]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	4a7a      	ldr	r2, [pc, #488]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6213      	str	r3, [r2, #32]
 8002ce4:	e02d      	b.n	8002d42 <HAL_RCC_OscConfig+0x36e>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCC_OscConfig+0x334>
 8002cee:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	4a75      	ldr	r2, [pc, #468]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002cf4:	f023 0301 	bic.w	r3, r3, #1
 8002cf8:	6213      	str	r3, [r2, #32]
 8002cfa:	4b73      	ldr	r3, [pc, #460]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	4a72      	ldr	r2, [pc, #456]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d00:	f023 0304 	bic.w	r3, r3, #4
 8002d04:	6213      	str	r3, [r2, #32]
 8002d06:	e01c      	b.n	8002d42 <HAL_RCC_OscConfig+0x36e>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d10c      	bne.n	8002d2a <HAL_RCC_OscConfig+0x356>
 8002d10:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d12:	6a1b      	ldr	r3, [r3, #32]
 8002d14:	4a6c      	ldr	r2, [pc, #432]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d16:	f043 0304 	orr.w	r3, r3, #4
 8002d1a:	6213      	str	r3, [r2, #32]
 8002d1c:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	4a69      	ldr	r2, [pc, #420]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d22:	f043 0301 	orr.w	r3, r3, #1
 8002d26:	6213      	str	r3, [r2, #32]
 8002d28:	e00b      	b.n	8002d42 <HAL_RCC_OscConfig+0x36e>
 8002d2a:	4b67      	ldr	r3, [pc, #412]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a66      	ldr	r2, [pc, #408]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	6213      	str	r3, [r2, #32]
 8002d36:	4b64      	ldr	r3, [pc, #400]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a63      	ldr	r2, [pc, #396]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d015      	beq.n	8002d76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4a:	f7ff fb69 	bl	8002420 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d52:	f7ff fb65 	bl	8002420 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e0ab      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d68:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ee      	beq.n	8002d52 <HAL_RCC_OscConfig+0x37e>
 8002d74:	e014      	b.n	8002da0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d76:	f7ff fb53 	bl	8002420 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7ff fb4f 	bl	8002420 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e095      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d94:	4b4c      	ldr	r3, [pc, #304]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002d96:	6a1b      	ldr	r3, [r3, #32]
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1ee      	bne.n	8002d7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da0:	7dfb      	ldrb	r3, [r7, #23]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d105      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002da6:	4b48      	ldr	r3, [pc, #288]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	4a47      	ldr	r2, [pc, #284]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002dac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002db0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69db      	ldr	r3, [r3, #28]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8081 	beq.w	8002ebe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dbc:	4b42      	ldr	r3, [pc, #264]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d061      	beq.n	8002e8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69db      	ldr	r3, [r3, #28]
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d146      	bne.n	8002e5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b3f      	ldr	r3, [pc, #252]	; (8002ed0 <HAL_RCC_OscConfig+0x4fc>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd6:	f7ff fb23 	bl	8002420 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dde:	f7ff fb1f 	bl	8002420 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e067      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df0:	4b35      	ldr	r3, [pc, #212]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a1b      	ldr	r3, [r3, #32]
 8002e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e04:	d108      	bne.n	8002e18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e06:	4b30      	ldr	r3, [pc, #192]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	492d      	ldr	r1, [pc, #180]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e18:	4b2b      	ldr	r3, [pc, #172]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a19      	ldr	r1, [r3, #32]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	4927      	ldr	r1, [pc, #156]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e30:	4b27      	ldr	r3, [pc, #156]	; (8002ed0 <HAL_RCC_OscConfig+0x4fc>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e36:	f7ff faf3 	bl	8002420 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e3e:	f7ff faef 	bl	8002420 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e037      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e50:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x46a>
 8002e5c:	e02f      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ed0 <HAL_RCC_OscConfig+0x4fc>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7ff fadc 	bl	8002420 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e6c:	f7ff fad8 	bl	8002420 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e020      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0x498>
 8002e8a:	e018      	b.n	8002ebe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e013      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e98:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_OscConfig+0x4f4>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d001      	beq.n	8002ebe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40021000 	.word	0x40021000
 8002ecc:	40007000 	.word	0x40007000
 8002ed0:	42420060 	.word	0x42420060

08002ed4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
 8002edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e0d0      	b.n	800308a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ee8:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d910      	bls.n	8002f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ef6:	4b67      	ldr	r3, [pc, #412]	; (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f023 0207 	bic.w	r2, r3, #7
 8002efe:	4965      	ldr	r1, [pc, #404]	; (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b63      	ldr	r3, [pc, #396]	; (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e0b8      	b.n	800308a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d020      	beq.n	8002f66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0304 	and.w	r3, r3, #4
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f30:	4b59      	ldr	r3, [pc, #356]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a58      	ldr	r2, [pc, #352]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f48:	4b53      	ldr	r3, [pc, #332]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a52      	ldr	r2, [pc, #328]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f54:	4b50      	ldr	r3, [pc, #320]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	494d      	ldr	r1, [pc, #308]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d040      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7a:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d115      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e07f      	b.n	800308a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d107      	bne.n	8002fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f92:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d109      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e073      	b.n	800308a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa2:	4b3d      	ldr	r3, [pc, #244]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e06b      	b.n	800308a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fb2:	4b39      	ldr	r3, [pc, #228]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f023 0203 	bic.w	r2, r3, #3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	4936      	ldr	r1, [pc, #216]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fc4:	f7ff fa2c 	bl	8002420 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	e00a      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fcc:	f7ff fa28 	bl	8002420 <HAL_GetTick>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e053      	b.n	800308a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fe2:	4b2d      	ldr	r3, [pc, #180]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 020c 	and.w	r2, r3, #12
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	d1eb      	bne.n	8002fcc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ff4:	4b27      	ldr	r3, [pc, #156]	; (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d210      	bcs.n	8003024 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003002:	4b24      	ldr	r3, [pc, #144]	; (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f023 0207 	bic.w	r2, r3, #7
 800300a:	4922      	ldr	r1, [pc, #136]	; (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	4313      	orrs	r3, r2
 8003010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003012:	4b20      	ldr	r3, [pc, #128]	; (8003094 <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0307 	and.w	r3, r3, #7
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e032      	b.n	800308a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003030:	4b19      	ldr	r3, [pc, #100]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	4916      	ldr	r1, [pc, #88]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800304e:	4b12      	ldr	r3, [pc, #72]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	490e      	ldr	r1, [pc, #56]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003062:	f000 f821 	bl	80030a8 <HAL_RCC_GetSysClockFreq>
 8003066:	4602      	mov	r2, r0
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_ClockConfig+0x1c4>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	091b      	lsrs	r3, r3, #4
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	490a      	ldr	r1, [pc, #40]	; (800309c <HAL_RCC_ClockConfig+0x1c8>)
 8003074:	5ccb      	ldrb	r3, [r1, r3]
 8003076:	fa22 f303 	lsr.w	r3, r2, r3
 800307a:	4a09      	ldr	r2, [pc, #36]	; (80030a0 <HAL_RCC_ClockConfig+0x1cc>)
 800307c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800307e:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f98a 	bl	800239c <HAL_InitTick>

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3710      	adds	r7, #16
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	40022000 	.word	0x40022000
 8003098:	40021000 	.word	0x40021000
 800309c:	080039b4 	.word	0x080039b4
 80030a0:	2000007c 	.word	0x2000007c
 80030a4:	20000080 	.word	0x20000080

080030a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b087      	sub	sp, #28
 80030ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]
 80030b2:	2300      	movs	r3, #0
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	2300      	movs	r3, #0
 80030bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030c2:	4b1e      	ldr	r3, [pc, #120]	; (800313c <HAL_RCC_GetSysClockFreq+0x94>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 030c 	and.w	r3, r3, #12
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d002      	beq.n	80030d8 <HAL_RCC_GetSysClockFreq+0x30>
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d003      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0x36>
 80030d6:	e027      	b.n	8003128 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_RCC_GetSysClockFreq+0x98>)
 80030da:	613b      	str	r3, [r7, #16]
      break;
 80030dc:	e027      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	0c9b      	lsrs	r3, r3, #18
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	4a17      	ldr	r2, [pc, #92]	; (8003144 <HAL_RCC_GetSysClockFreq+0x9c>)
 80030e8:	5cd3      	ldrb	r3, [r2, r3]
 80030ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d010      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030f6:	4b11      	ldr	r3, [pc, #68]	; (800313c <HAL_RCC_GetSysClockFreq+0x94>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	0c5b      	lsrs	r3, r3, #17
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	4a11      	ldr	r2, [pc, #68]	; (8003148 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003102:	5cd3      	ldrb	r3, [r2, r3]
 8003104:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a0d      	ldr	r2, [pc, #52]	; (8003140 <HAL_RCC_GetSysClockFreq+0x98>)
 800310a:	fb02 f203 	mul.w	r2, r2, r3
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	fbb2 f3f3 	udiv	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e004      	b.n	8003122 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a0c      	ldr	r2, [pc, #48]	; (800314c <HAL_RCC_GetSysClockFreq+0xa4>)
 800311c:	fb02 f303 	mul.w	r3, r2, r3
 8003120:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	613b      	str	r3, [r7, #16]
      break;
 8003126:	e002      	b.n	800312e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_RCC_GetSysClockFreq+0x98>)
 800312a:	613b      	str	r3, [r7, #16]
      break;
 800312c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800312e:	693b      	ldr	r3, [r7, #16]
}
 8003130:	4618      	mov	r0, r3
 8003132:	371c      	adds	r7, #28
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40021000 	.word	0x40021000
 8003140:	007a1200 	.word	0x007a1200
 8003144:	080039c4 	.word	0x080039c4
 8003148:	080039d4 	.word	0x080039d4
 800314c:	003d0900 	.word	0x003d0900

08003150 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <RCC_Delay+0x34>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a0a      	ldr	r2, [pc, #40]	; (8003188 <RCC_Delay+0x38>)
 800315e:	fba2 2303 	umull	r2, r3, r2, r3
 8003162:	0a5b      	lsrs	r3, r3, #9
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800316c:	bf00      	nop
  }
  while (Delay --);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1e5a      	subs	r2, r3, #1
 8003172:	60fa      	str	r2, [r7, #12]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1f9      	bne.n	800316c <RCC_Delay+0x1c>
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	bc80      	pop	{r7}
 8003182:	4770      	bx	lr
 8003184:	2000007c 	.word	0x2000007c
 8003188:	10624dd3 	.word	0x10624dd3

0800318c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e041      	b.n	8003222 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff f85a 	bl	800226c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2202      	movs	r2, #2
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3304      	adds	r3, #4
 80031c8:	4619      	mov	r1, r3
 80031ca:	4610      	mov	r0, r2
 80031cc:	f000 fa56 	bl	800367c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3708      	adds	r7, #8
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	d001      	beq.n	8003244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e035      	b.n	80032b0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68da      	ldr	r2, [r3, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f042 0201 	orr.w	r2, r2, #1
 800325a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a16      	ldr	r2, [pc, #88]	; (80032bc <HAL_TIM_Base_Start_IT+0x90>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_TIM_Base_Start_IT+0x4e>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326e:	d004      	beq.n	800327a <HAL_TIM_Base_Start_IT+0x4e>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <HAL_TIM_Base_Start_IT+0x94>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d111      	bne.n	800329e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0307 	and.w	r3, r3, #7
 8003284:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b06      	cmp	r3, #6
 800328a:	d010      	beq.n	80032ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f042 0201 	orr.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800329c:	e007      	b.n	80032ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f042 0201 	orr.w	r2, r2, #1
 80032ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc80      	pop	{r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	40012c00 	.word	0x40012c00
 80032c0:	40000400 	.word	0x40000400

080032c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b084      	sub	sp, #16
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d020      	beq.n	8003328 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01b      	beq.n	8003328 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0202 	mvn.w	r2, #2
 80032f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	f003 0303 	and.w	r3, r3, #3
 800330a:	2b00      	cmp	r3, #0
 800330c:	d003      	beq.n	8003316 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f998 	bl	8003644 <HAL_TIM_IC_CaptureCallback>
 8003314:	e005      	b.n	8003322 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f98b 	bl	8003632 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 f99a 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	d020      	beq.n	8003374 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01b      	beq.n	8003374 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0204 	mvn.w	r2, #4
 8003344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f972 	bl	8003644 <HAL_TIM_IC_CaptureCallback>
 8003360:	e005      	b.n	800336e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f965 	bl	8003632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f974 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f003 0308 	and.w	r3, r3, #8
 800337a:	2b00      	cmp	r3, #0
 800337c:	d020      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f003 0308 	and.w	r3, r3, #8
 8003384:	2b00      	cmp	r3, #0
 8003386:	d01b      	beq.n	80033c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0208 	mvn.w	r2, #8
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2204      	movs	r2, #4
 8003396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f94c 	bl	8003644 <HAL_TIM_IC_CaptureCallback>
 80033ac:	e005      	b.n	80033ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 f93f 	bl	8003632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	f000 f94e 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d020      	beq.n	800340c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d01b      	beq.n	800340c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0210 	mvn.w	r2, #16
 80033dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2208      	movs	r2, #8
 80033e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d003      	beq.n	80033fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f926 	bl	8003644 <HAL_TIM_IC_CaptureCallback>
 80033f8:	e005      	b.n	8003406 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f919 	bl	8003632 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f928 	bl	8003656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00c      	beq.n	8003430 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d007      	beq.n	8003430 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0201 	mvn.w	r2, #1
 8003428:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f7fe fd62 	bl	8001ef4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00c      	beq.n	8003454 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003440:	2b00      	cmp	r3, #0
 8003442:	d007      	beq.n	8003454 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800344c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa6f 	bl	8003932 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00c      	beq.n	8003478 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d007      	beq.n	8003478 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003470:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f8f8 	bl	8003668 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f003 0320 	and.w	r3, r3, #32
 800347e:	2b00      	cmp	r3, #0
 8003480:	d00c      	beq.n	800349c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f06f 0220 	mvn.w	r2, #32
 8003494:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fa42 	bl	8003920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800349c:	bf00      	nop
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <HAL_TIM_ConfigClockSource+0x1c>
 80034bc:	2302      	movs	r3, #2
 80034be:	e0b4      	b.n	800362a <HAL_TIM_ConfigClockSource+0x186>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2202      	movs	r2, #2
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034f8:	d03e      	beq.n	8003578 <HAL_TIM_ConfigClockSource+0xd4>
 80034fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034fe:	f200 8087 	bhi.w	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003506:	f000 8086 	beq.w	8003616 <HAL_TIM_ConfigClockSource+0x172>
 800350a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800350e:	d87f      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003510:	2b70      	cmp	r3, #112	; 0x70
 8003512:	d01a      	beq.n	800354a <HAL_TIM_ConfigClockSource+0xa6>
 8003514:	2b70      	cmp	r3, #112	; 0x70
 8003516:	d87b      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003518:	2b60      	cmp	r3, #96	; 0x60
 800351a:	d050      	beq.n	80035be <HAL_TIM_ConfigClockSource+0x11a>
 800351c:	2b60      	cmp	r3, #96	; 0x60
 800351e:	d877      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003520:	2b50      	cmp	r3, #80	; 0x50
 8003522:	d03c      	beq.n	800359e <HAL_TIM_ConfigClockSource+0xfa>
 8003524:	2b50      	cmp	r3, #80	; 0x50
 8003526:	d873      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003528:	2b40      	cmp	r3, #64	; 0x40
 800352a:	d058      	beq.n	80035de <HAL_TIM_ConfigClockSource+0x13a>
 800352c:	2b40      	cmp	r3, #64	; 0x40
 800352e:	d86f      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003530:	2b30      	cmp	r3, #48	; 0x30
 8003532:	d064      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 8003534:	2b30      	cmp	r3, #48	; 0x30
 8003536:	d86b      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003538:	2b20      	cmp	r3, #32
 800353a:	d060      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 800353c:	2b20      	cmp	r3, #32
 800353e:	d867      	bhi.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b00      	cmp	r3, #0
 8003542:	d05c      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 8003544:	2b10      	cmp	r3, #16
 8003546:	d05a      	beq.n	80035fe <HAL_TIM_ConfigClockSource+0x15a>
 8003548:	e062      	b.n	8003610 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6899      	ldr	r1, [r3, #8]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685a      	ldr	r2, [r3, #4]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	68db      	ldr	r3, [r3, #12]
 800355a:	f000 f96a 	bl	8003832 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800356c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	609a      	str	r2, [r3, #8]
      break;
 8003576:	e04f      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f000 f953 	bl	8003832 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800359a:	609a      	str	r2, [r3, #8]
      break;
 800359c:	e03c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6859      	ldr	r1, [r3, #4]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	461a      	mov	r2, r3
 80035ac:	f000 f8ca 	bl	8003744 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2150      	movs	r1, #80	; 0x50
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 f921 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 80035bc:	e02c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6818      	ldr	r0, [r3, #0]
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	461a      	mov	r2, r3
 80035cc:	f000 f8e8 	bl	80037a0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2160      	movs	r1, #96	; 0x60
 80035d6:	4618      	mov	r0, r3
 80035d8:	f000 f911 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 80035dc:	e01c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6818      	ldr	r0, [r3, #0]
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	461a      	mov	r2, r3
 80035ec:	f000 f8aa 	bl	8003744 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2140      	movs	r1, #64	; 0x40
 80035f6:	4618      	mov	r0, r3
 80035f8:	f000 f901 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 80035fc:	e00c      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4619      	mov	r1, r3
 8003608:	4610      	mov	r0, r2
 800360a:	f000 f8f8 	bl	80037fe <TIM_ITRx_SetConfig>
      break;
 800360e:	e003      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
      break;
 8003614:	e000      	b.n	8003618 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003616:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003628:	7bfb      	ldrb	r3, [r7, #15]
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	bc80      	pop	{r7}
 8003678:	4770      	bx	lr
	...

0800367c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800367c:	b480      	push	{r7}
 800367e:	b085      	sub	sp, #20
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a2b      	ldr	r2, [pc, #172]	; (800373c <TIM_Base_SetConfig+0xc0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d007      	beq.n	80036a4 <TIM_Base_SetConfig+0x28>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369a:	d003      	beq.n	80036a4 <TIM_Base_SetConfig+0x28>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a28      	ldr	r2, [pc, #160]	; (8003740 <TIM_Base_SetConfig+0xc4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d108      	bne.n	80036b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a20      	ldr	r2, [pc, #128]	; (800373c <TIM_Base_SetConfig+0xc0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <TIM_Base_SetConfig+0x52>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036c4:	d003      	beq.n	80036ce <TIM_Base_SetConfig+0x52>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a1d      	ldr	r2, [pc, #116]	; (8003740 <TIM_Base_SetConfig+0xc4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d108      	bne.n	80036e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a0d      	ldr	r2, [pc, #52]	; (800373c <TIM_Base_SetConfig+0xc0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d103      	bne.n	8003714 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	f023 0201 	bic.w	r2, r3, #1
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	611a      	str	r2, [r3, #16]
  }
}
 8003732:	bf00      	nop
 8003734:	3714      	adds	r7, #20
 8003736:	46bd      	mov	sp, r7
 8003738:	bc80      	pop	{r7}
 800373a:	4770      	bx	lr
 800373c:	40012c00 	.word	0x40012c00
 8003740:	40000400 	.word	0x40000400

08003744 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003744:	b480      	push	{r7}
 8003746:	b087      	sub	sp, #28
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f023 0201 	bic.w	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800376e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	4313      	orrs	r3, r2
 8003778:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	f023 030a 	bic.w	r3, r3, #10
 8003780:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	621a      	str	r2, [r3, #32]
}
 8003796:	bf00      	nop
 8003798:	371c      	adds	r7, #28
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr

080037a0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	f023 0210 	bic.w	r2, r3, #16
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	031b      	lsls	r3, r3, #12
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037dc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037de:	68bb      	ldr	r3, [r7, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	621a      	str	r2, [r3, #32]
}
 80037f4:	bf00      	nop
 80037f6:	371c      	adds	r7, #28
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037fe:	b480      	push	{r7}
 8003800:	b085      	sub	sp, #20
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4313      	orrs	r3, r2
 800381c:	f043 0307 	orr.w	r3, r3, #7
 8003820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	609a      	str	r2, [r3, #8]
}
 8003828:	bf00      	nop
 800382a:	3714      	adds	r7, #20
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr

08003832 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003832:	b480      	push	{r7}
 8003834:	b087      	sub	sp, #28
 8003836:	af00      	add	r7, sp, #0
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800384c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	021a      	lsls	r2, r3, #8
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	431a      	orrs	r2, r3
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4313      	orrs	r3, r2
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	609a      	str	r2, [r3, #8]
}
 8003866:	bf00      	nop
 8003868:	371c      	adds	r7, #28
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003884:	2302      	movs	r3, #2
 8003886:	e041      	b.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2202      	movs	r2, #2
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a14      	ldr	r2, [pc, #80]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038d4:	d004      	beq.n	80038e0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a10      	ldr	r2, [pc, #64]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d10c      	bne.n	80038fa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038e6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bc80      	pop	{r7}
 8003914:	4770      	bx	lr
 8003916:	bf00      	nop
 8003918:	40012c00 	.word	0x40012c00
 800391c:	40000400 	.word	0x40000400

08003920 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr

08003932 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800393a:	bf00      	nop
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	bc80      	pop	{r7}
 8003942:	4770      	bx	lr

08003944 <__libc_init_array>:
 8003944:	b570      	push	{r4, r5, r6, lr}
 8003946:	2600      	movs	r6, #0
 8003948:	4d0c      	ldr	r5, [pc, #48]	; (800397c <__libc_init_array+0x38>)
 800394a:	4c0d      	ldr	r4, [pc, #52]	; (8003980 <__libc_init_array+0x3c>)
 800394c:	1b64      	subs	r4, r4, r5
 800394e:	10a4      	asrs	r4, r4, #2
 8003950:	42a6      	cmp	r6, r4
 8003952:	d109      	bne.n	8003968 <__libc_init_array+0x24>
 8003954:	f000 f822 	bl	800399c <_init>
 8003958:	2600      	movs	r6, #0
 800395a:	4d0a      	ldr	r5, [pc, #40]	; (8003984 <__libc_init_array+0x40>)
 800395c:	4c0a      	ldr	r4, [pc, #40]	; (8003988 <__libc_init_array+0x44>)
 800395e:	1b64      	subs	r4, r4, r5
 8003960:	10a4      	asrs	r4, r4, #2
 8003962:	42a6      	cmp	r6, r4
 8003964:	d105      	bne.n	8003972 <__libc_init_array+0x2e>
 8003966:	bd70      	pop	{r4, r5, r6, pc}
 8003968:	f855 3b04 	ldr.w	r3, [r5], #4
 800396c:	4798      	blx	r3
 800396e:	3601      	adds	r6, #1
 8003970:	e7ee      	b.n	8003950 <__libc_init_array+0xc>
 8003972:	f855 3b04 	ldr.w	r3, [r5], #4
 8003976:	4798      	blx	r3
 8003978:	3601      	adds	r6, #1
 800397a:	e7f2      	b.n	8003962 <__libc_init_array+0x1e>
 800397c:	080039d8 	.word	0x080039d8
 8003980:	080039d8 	.word	0x080039d8
 8003984:	080039d8 	.word	0x080039d8
 8003988:	080039dc 	.word	0x080039dc

0800398c <memset>:
 800398c:	4603      	mov	r3, r0
 800398e:	4402      	add	r2, r0
 8003990:	4293      	cmp	r3, r2
 8003992:	d100      	bne.n	8003996 <memset+0xa>
 8003994:	4770      	bx	lr
 8003996:	f803 1b01 	strb.w	r1, [r3], #1
 800399a:	e7f9      	b.n	8003990 <memset+0x4>

0800399c <_init>:
 800399c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399e:	bf00      	nop
 80039a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039a2:	bc08      	pop	{r3}
 80039a4:	469e      	mov	lr, r3
 80039a6:	4770      	bx	lr

080039a8 <_fini>:
 80039a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039aa:	bf00      	nop
 80039ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ae:	bc08      	pop	{r3}
 80039b0:	469e      	mov	lr, r3
 80039b2:	4770      	bx	lr
